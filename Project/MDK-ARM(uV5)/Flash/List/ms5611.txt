; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\ms5611.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\ms5611.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\GPS -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Heigh -I..\..\User\Algorithm\ekf2 -IC:\__Electronic_Projects\STM32\HT_Hawk_0528_1\Project\MDK-ARM(uV5)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\ms5611.crf ..\..\User\Modules\Modules_ms5611\MS5611.c]
                          THUMB

                          AREA ||i.Get_High||, CODE, READONLY, ALIGN=2

                  Get_High PROC
;;;239    ************************************************/
;;;240    void Get_High(void)//OSR为压强转换速率
000000  b510              PUSH     {r4,lr}
;;;241    {
;;;242    	static u8 Now_doing = SCTemperature;
;;;243    	static u8 flag=0;
;;;244    	switch(Now_doing)
000002  4813              LDR      r0,|L1.80|
000004  7800              LDRB     r0,[r0,#0]  ; Now_doing
000006  2801              CMP      r0,#1
000008  d002              BEQ      |L1.16|
00000a  2802              CMP      r0,#2
00000c  d117              BNE      |L1.62|
00000e  e00b              B        |L1.40|
                  |L1.16|
;;;245    	 {
;;;246    		 case SCTemperature: 
;;;247    		 {		
;;;248    			 if(flag)    MS561101BA_getPressure();			 
000010  4810              LDR      r0,|L1.84|
000012  7800              LDRB     r0,[r0,#0]  ; flag
000014  b108              CBZ      r0,|L1.26|
000016  f7fffffe          BL       MS561101BA_getPressure
                  |L1.26|
;;;249    			 MS561101BA_startConversion(MS561101BA_D2_OSR_4096);  
00001a  2058              MOVS     r0,#0x58
00001c  f7fffffe          BL       MS561101BA_startConversion
;;;250    			 Now_doing = CTemperatureing;//切换到下一个状态，温度与压力轮着测量。
000020  2002              MOVS     r0,#2
000022  490b              LDR      r1,|L1.80|
000024  7008              STRB     r0,[r1,#0]
;;;251    		 }
;;;252    		 break;
000026  e011              B        |L1.76|
                  |L1.40|
;;;253    		 case CTemperatureing: 
;;;254    		 {		
;;;255    			 MS561101BA_getTemperature();
000028  f7fffffe          BL       MS561101BA_getTemperature
;;;256    			 MS561101BA_startConversion(MS561101BA_D1_OSR_4096); 
00002c  2048              MOVS     r0,#0x48
00002e  f7fffffe          BL       MS561101BA_startConversion
;;;257    			 flag = 1;
000032  2001              MOVS     r0,#1
000034  4907              LDR      r1,|L1.84|
000036  7008              STRB     r0,[r1,#0]
;;;258    			 Now_doing = SCTemperature;
000038  4905              LDR      r1,|L1.80|
00003a  7008              STRB     r0,[r1,#0]
;;;259    		 }
;;;260    		 break;
00003c  e006              B        |L1.76|
                  |L1.62|
;;;261         default: 
;;;262    		 {
;;;263    			 Now_doing = SCTemperature; //出错了 重新开始
00003e  2001              MOVS     r0,#1
000040  4903              LDR      r1,|L1.80|
000042  7008              STRB     r0,[r1,#0]
;;;264    			 flag=0;
000044  2000              MOVS     r0,#0
000046  4903              LDR      r1,|L1.84|
000048  7008              STRB     r0,[r1,#0]
;;;265    		 }
;;;266     		 break;			 
00004a  bf00              NOP      
                  |L1.76|
00004c  bf00              NOP                            ;252
;;;267    	 }
;;;268    }
00004e  bd10              POP      {r4,pc}
;;;269    
                          ENDP

                  |L1.80|
                          DCD      Now_doing
                  |L1.84|
                          DCD      flag

                          AREA ||i.MS561101BA_RESET||, CODE, READONLY, ALIGN=1

                  MS561101BA_RESET PROC
;;;57     *******************************************************************************/
;;;58     void MS561101BA_RESET(void)
000000  b510              PUSH     {r4,lr}
;;;59     {
;;;60       I2C_Start();
000002  f7fffffe          BL       I2C_Start
;;;61     	I2C_SendByte(MS561101BA_SlaveAddress);
000006  20ee              MOVS     r0,#0xee
000008  f7fffffe          BL       I2C_SendByte
;;;62     	I2C_WaitAck();
00000c  f7fffffe          BL       I2C_WaitAck
;;;63     	I2C_SendByte(MS561101BA_RST);
000010  201e              MOVS     r0,#0x1e
000012  f7fffffe          BL       I2C_SendByte
;;;64     	I2C_WaitAck();
000016  f7fffffe          BL       I2C_WaitAck
;;;65     	I2C_Stop();
00001a  f7fffffe          BL       I2C_Stop
;;;66     }
00001e  bd10              POP      {r4,pc}
;;;67     /*******************************************************************************
                          ENDP


                          AREA ||i.MS561101BA_getConversion||, CODE, READONLY, ALIGN=1

                  MS561101BA_getConversion PROC
;;;117    
;;;118    unsigned long MS561101BA_getConversion(void) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;119    {
;;;120    	unsigned long conversion = 0;
000004  2500              MOVS     r5,#0
;;;121    	uint8_t conv1,conv2,conv3; 
;;;122    	
;;;123    	I2C_Start();
000006  f7fffffe          BL       I2C_Start
;;;124    	I2C_SendByte(MS561101BA_SlaveAddress);
00000a  20ee              MOVS     r0,#0xee
00000c  f7fffffe          BL       I2C_SendByte
;;;125    	I2C_WaitAck();
000010  f7fffffe          BL       I2C_WaitAck
;;;126    	I2C_SendByte(0);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       I2C_SendByte
;;;127    	I2C_WaitAck();
00001a  f7fffffe          BL       I2C_WaitAck
;;;128      I2C_Stop();
00001e  f7fffffe          BL       I2C_Stop
;;;129    
;;;130    	I2C_Start();
000022  f7fffffe          BL       I2C_Start
;;;131    	I2C_SendByte(MS561101BA_SlaveAddress+1);//+1是读
000026  20ef              MOVS     r0,#0xef
000028  f7fffffe          BL       I2C_SendByte
;;;132    	I2C_WaitAck();
00002c  f7fffffe          BL       I2C_WaitAck
;;;133    	conv1=I2C_RadeByte();
000030  f7fffffe          BL       I2C_RadeByte
000034  4606              MOV      r6,r0
;;;134    	I2C_Ack();
000036  f7fffffe          BL       I2C_Ack
;;;135    	conv2=I2C_RadeByte();
00003a  f7fffffe          BL       I2C_RadeByte
00003e  4604              MOV      r4,r0
;;;136    	I2C_Ack();
000040  f7fffffe          BL       I2C_Ack
;;;137    	conv3=I2C_RadeByte();
000044  f7fffffe          BL       I2C_RadeByte
000048  4607              MOV      r7,r0
;;;138    
;;;139    	I2C_NoAck();
00004a  f7fffffe          BL       I2C_NoAck
;;;140    	I2C_Stop();
00004e  f7fffffe          BL       I2C_Stop
;;;141    
;;;142    	conversion=conv1*65535+conv2*256+conv3;
000052  ebc64006          RSB      r0,r6,r6,LSL #16
000056  eb002004          ADD      r0,r0,r4,LSL #8
00005a  19c5              ADDS     r5,r0,r7
;;;143    	return conversion;
00005c  4628              MOV      r0,r5
;;;144    }
00005e  e8bd81f0          POP      {r4-r8,pc}
;;;145    
                          ENDP


                          AREA ||i.MS561101BA_getPressure||, CODE, READONLY, ALIGN=2

                  MS561101BA_getPressure PROC
;;;174    ************************************************/
;;;175    void MS561101BA_getPressure(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;176    {
000004  b089              SUB      sp,sp,#0x24
;;;177    	uint32_t sum=0,max=0,min=200000;
000006  2400              MOVS     r4,#0
000008  2500              MOVS     r5,#0
00000a  f8df8284          LDR      r8,|L4.656|
;;;178    	uint32_t Altitude_sum=0,Altitude_max=0,Altitude_min=200000;
00000e  2000              MOVS     r0,#0
000010  9008              STR      r0,[sp,#0x20]
000012  9007              STR      r0,[sp,#0x1c]
000014  4640              MOV      r0,r8
000016  9006              STR      r0,[sp,#0x18]
;;;179    	static u8 p=0,q=0;
;;;180    	static u16 inum;
;;;181    //	float height_temp;
;;;182    	D1_Pres= MS561101BA_getConversion();
000018  f7fffffe          BL       MS561101BA_getConversion
00001c  499d              LDR      r1,|L4.660|
00001e  6008              STR      r0,[r1,#0]  ; D1_Pres
;;;183    	I2C_delay();
000020  f7fffffe          BL       I2C_delay
;;;184    	OFF_=(uint32_t)Cal_C[2]*65536+((uint32_t)Cal_C[4]*dT)/128;
000024  489c              LDR      r0,|L4.664|
000026  6900              LDR      r0,[r0,#0x10]  ; Cal_C
000028  2300              MOVS     r3,#0
00002a  4a9c              LDR      r2,|L4.668|
00002c  e9d21c00          LDRD     r1,r12,[r2,#0]
000030  fba06b01          UMULL    r6,r11,r0,r1
000034  fb03b101          MLA      r1,r3,r1,r11
000038  fb00110c          MLA      r1,r0,r12,r1
00003c  2280              MOVS     r2,#0x80
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       __aeabi_uldivmod
000044  4a94              LDR      r2,|L4.664|
000046  8912              LDRH     r2,[r2,#8]  ; Cal_C
000048  0412              LSLS     r2,r2,#16
00004a  eb100902          ADDS     r9,r0,r2
00004e  f1410100          ADC      r1,r1,#0
000052  4648              MOV      r0,r9
000054  f7fffffe          BL       __aeabi_ul2d
000058  4a91              LDR      r2,|L4.672|
00005a  c203              STM      r2!,{r0,r1}
;;;185    	SENS=(uint32_t)Cal_C[1]*32768+((uint32_t)Cal_C[3]*dT)/256;
00005c  488e              LDR      r0,|L4.664|
00005e  68c0              LDR      r0,[r0,#0xc]  ; Cal_C
000060  2200              MOVS     r2,#0
000062  498e              LDR      r1,|L4.668|
000064  e9d13100          LDRD     r3,r1,[r1,#0]
000068  fba06903          UMULL    r6,r9,r0,r3
00006c  fb029203          MLA      r2,r2,r3,r9
000070  fb012100          MLA      r1,r1,r0,r2
000074  f44f7280          MOV      r2,#0x100
000078  2300              MOVS     r3,#0
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       __aeabi_uldivmod
000080  4a85              LDR      r2,|L4.664|
000082  6852              LDR      r2,[r2,#4]  ; Cal_C
000084  03d2              LSLS     r2,r2,#15
000086  1880              ADDS     r0,r0,r2
000088  f1410100          ADC      r1,r1,#0
00008c  4a85              LDR      r2,|L4.676|
00008e  c203              STM      r2!,{r0,r1}
;;;186    
;;;187    	if(TEMP<2000)
000090  4885              LDR      r0,|L4.680|
000092  e9d02000          LDRD     r2,r0,[r0,#0]
000096  f44f63fa          MOV      r3,#0x7d0
00009a  1ad2              SUBS     r2,r2,r3
00009c  f1700000          SBCS     r0,r0,#0
0000a0  d24a              BCS      |L4.312|
;;;188    	{
;;;189    		Aux = TEMP*TEMP;
0000a2  4881              LDR      r0,|L4.680|
0000a4  e9d01000          LDRD     r1,r0,[r0,#0]
0000a8  fba12701          UMULL    r2,r7,r1,r1
0000ac  fb007701          MLA      r7,r0,r1,r7
0000b0  fb017100          MLA      r1,r1,r0,r7
0000b4  4610              MOV      r0,r2
0000b6  f7fffffe          BL       __aeabi_ul2f
0000ba  497c              LDR      r1,|L4.684|
0000bc  6008              STR      r0,[r1,#0]  ; Aux
;;;190    		OFF2 = 2.5*Aux;
0000be  4608              MOV      r0,r1
0000c0  6800              LDR      r0,[r0,#0]  ; Aux
0000c2  f7fffffe          BL       __aeabi_f2d
0000c6  4681              MOV      r9,r0
0000c8  2200              MOVS     r2,#0
0000ca  4b79              LDR      r3,|L4.688|
0000cc  f7fffffe          BL       __aeabi_dmul
0000d0  4606              MOV      r6,r0
0000d2  f7fffffe          BL       __aeabi_d2uiz
0000d6  4977              LDR      r1,|L4.692|
0000d8  6008              STR      r0,[r1,#0]  ; OFF2
;;;191    		SENS2 = 1.25*Aux;
0000da  4874              LDR      r0,|L4.684|
0000dc  6800              LDR      r0,[r0,#0]  ; Aux
0000de  f7fffffe          BL       __aeabi_f2d
0000e2  4681              MOV      r9,r0
0000e4  2200              MOVS     r2,#0
0000e6  4b74              LDR      r3,|L4.696|
0000e8  f7fffffe          BL       __aeabi_dmul
0000ec  4606              MOV      r6,r0
0000ee  f7fffffe          BL       __aeabi_d2uiz
0000f2  4972              LDR      r1,|L4.700|
0000f4  6008              STR      r0,[r1,#0]  ; SENS2
;;;192    		TEMP = TEMP - TEMP2;
0000f6  486c              LDR      r0,|L4.680|
0000f8  e9d03100          LDRD     r3,r1,[r0,#0]
0000fc  4870              LDR      r0,|L4.704|
0000fe  6800              LDR      r0,[r0,#0]  ; TEMP2
000100  1a18              SUBS     r0,r3,r0
000102  f1610100          SBC      r1,r1,#0
000106  4a68              LDR      r2,|L4.680|
000108  c203              STM      r2!,{r0,r1}
;;;193    		OFF_ = OFF_ - OFF2;
00010a  486a              LDR      r0,|L4.692|
00010c  6800              LDR      r0,[r0,#0]  ; OFF2
00010e  f7fffffe          BL       __aeabi_ui2d
000112  4606              MOV      r6,r0
000114  4862              LDR      r0,|L4.672|
000116  c80c              LDM      r0!,{r2,r3}
000118  4630              MOV      r0,r6
00011a  f7fffffe          BL       __aeabi_drsub
00011e  4a60              LDR      r2,|L4.672|
000120  c203              STM      r2!,{r0,r1}
;;;194    		SENS = SENS - SENS2;	
000122  4860              LDR      r0,|L4.676|
000124  e9d03000          LDRD     r3,r0,[r0,#0]
000128  4964              LDR      r1,|L4.700|
00012a  6809              LDR      r1,[r1,#0]  ; SENS2
00012c  1a59              SUBS     r1,r3,r1
00012e  f1600000          SBC      r0,r0,#0
000132  4a5c              LDR      r2,|L4.676|
000134  e9c21000          STRD     r1,r0,[r2,#0]
                  |L4.312|
;;;195    	}
;;;196      Pres_BUFFER[p] = qqp =((D1_Pres*SENS/2097152-OFF_)/32768);
000138  4856              LDR      r0,|L4.660|
00013a  6800              LDR      r0,[r0,#0]  ; D1_Pres
00013c  2200              MOVS     r2,#0
00013e  4959              LDR      r1,|L4.676|
000140  e9d13100          LDRD     r3,r1,[r1,#0]
000144  fba06b03          UMULL    r6,r11,r0,r3
000148  fb02b203          MLA      r2,r2,r3,r11
00014c  fb012100          MLA      r1,r1,r0,r2
000150  f44f1200          MOV      r2,#0x200000
000154  2300              MOVS     r3,#0
000156  4630              MOV      r0,r6
000158  f7fffffe          BL       __aeabi_uldivmod
00015c  e9cd0100          STRD     r0,r1,[sp,#0]
000160  f7fffffe          BL       __aeabi_ul2d
000164  e9cd0102          STRD     r0,r1,[sp,#8]
000168  484d              LDR      r0,|L4.672|
00016a  c80c              LDM      r0!,{r2,r3}
00016c  9802              LDR      r0,[sp,#8]
00016e  f7fffffe          BL       __aeabi_dsub
000172  4681              MOV      r9,r0
000174  2200              MOVS     r2,#0
000176  4b53              LDR      r3,|L4.708|
000178  f7fffffe          BL       __aeabi_ddiv
00017c  e9cd0104          STRD     r0,r1,[sp,#0x10]
000180  f7fffffe          BL       __aeabi_d2uiz
000184  4950              LDR      r1,|L4.712|
000186  6008              STR      r0,[r1,#0]  ; qqp
000188  4950              LDR      r1,|L4.716|
00018a  4a51              LDR      r2,|L4.720|
00018c  7812              LDRB     r2,[r2,#0]  ; p
00018e  f8410022          STR      r0,[r1,r2,LSL #2]
;;;197    	p++;
000192  484f              LDR      r0,|L4.720|
000194  7800              LDRB     r0,[r0,#0]  ; p
000196  1c40              ADDS     r0,r0,#1
000198  494d              LDR      r1,|L4.720|
00019a  7008              STRB     r0,[r1,#0]
;;;198    	if(p==20) p=0;
00019c  4608              MOV      r0,r1
00019e  7800              LDRB     r0,[r0,#0]  ; p
0001a0  2814              CMP      r0,#0x14
0001a2  d101              BNE      |L4.424|
0001a4  2000              MOVS     r0,#0
0001a6  7008              STRB     r0,[r1,#0]
                  |L4.424|
;;;199    	for(u8 i=0;i<20;i++) 
0001a8  2000              MOVS     r0,#0
0001aa  e016              B        |L4.474|
                  |L4.428|
;;;200      {
;;;201    		if(Pres_BUFFER[i] > max)  max = Pres_BUFFER[i];
0001ac  4947              LDR      r1,|L4.716|
0001ae  f8511020          LDR      r1,[r1,r0,LSL #2]
0001b2  42a9              CMP      r1,r5
0001b4  d903              BLS      |L4.446|
0001b6  4945              LDR      r1,|L4.716|
0001b8  f8515020          LDR      r5,[r1,r0,LSL #2]
0001bc  e007              B        |L4.462|
                  |L4.446|
;;;202    		else if(Pres_BUFFER[i] < min)  min = Pres_BUFFER[i];
0001be  4943              LDR      r1,|L4.716|
0001c0  f8511020          LDR      r1,[r1,r0,LSL #2]
0001c4  4541              CMP      r1,r8
0001c6  d202              BCS      |L4.462|
0001c8  4940              LDR      r1,|L4.716|
0001ca  f8518020          LDR      r8,[r1,r0,LSL #2]
                  |L4.462|
;;;203    		sum +=Pres_BUFFER[i];
0001ce  493f              LDR      r1,|L4.716|
0001d0  f8511020          LDR      r1,[r1,r0,LSL #2]
0001d4  440c              ADD      r4,r4,r1
0001d6  1c41              ADDS     r1,r0,#1              ;199
0001d8  b2c8              UXTB     r0,r1                 ;199
                  |L4.474|
0001da  2814              CMP      r0,#0x14              ;199
0001dc  dbe6              BLT      |L4.428|
;;;204    	}	
;;;205    	Pressure=(sum -  max -min)/18;
0001de  1b60              SUBS     r0,r4,r5
0001e0  eba00008          SUB      r0,r0,r8
0001e4  2112              MOVS     r1,#0x12
0001e6  fbb0f0f1          UDIV     r0,r0,r1
0001ea  493a              LDR      r1,|L4.724|
0001ec  6008              STR      r0,[r1,#0]  ; Pressure
;;;206    	if(Pressure>150000)
0001ee  4608              MOV      r0,r1
0001f0  6800              LDR      r0,[r0,#0]  ; Pressure
0001f2  4939              LDR      r1,|L4.728|
0001f4  4288              CMP      r0,r1
0001f6  d902              BLS      |L4.510|
;;;207    		Pressure=100000;//防止初始化时的值很大
0001f8  4838              LDR      r0,|L4.732|
0001fa  4936              LDR      r1,|L4.724|
0001fc  6008              STR      r0,[r1,#0]  ; Pressure
                  |L4.510|
;;;208    	baro_height=(Pressure_groud-Pressure)*85;//经验计算，近似高度，单位mm
0001fe  4835              LDR      r0,|L4.724|
000200  6800              LDR      r0,[r0,#0]  ; Pressure
000202  f7fffffe          BL       __aeabi_ui2f
000206  4607              MOV      r7,r0
000208  4835              LDR      r0,|L4.736|
00020a  6801              LDR      r1,[r0,#0]  ; Pressure_groud
00020c  4638              MOV      r0,r7
00020e  f7fffffe          BL       __aeabi_frsub
000212  4606              MOV      r6,r0
000214  4933              LDR      r1,|L4.740|
000216  f7fffffe          BL       __aeabi_fmul
00021a  4933              LDR      r1,|L4.744|
00021c  6008              STR      r0,[r1,#0]  ; baro_height
;;;209    	if(baro_height < -200) 
00021e  4933              LDR      r1,|L4.748|
000220  4831              LDR      r0,|L4.744|
000222  6800              LDR      r0,[r0,#0]  ; baro_height
000224  f7fffffe          BL       __aeabi_cfcmple
000228  d202              BCS      |L4.560|
;;;210    		baro_height= - 100;
00022a  4831              LDR      r0,|L4.752|
00022c  492e              LDR      r1,|L4.744|
00022e  6008              STR      r0,[r1,#0]  ; baro_height
                  |L4.560|
;;;211    	
;;;212    	Baro_Height_Source=(Pressure_groud-qqp)*85;//经验计算，近似高度，单位mm
000230  4825              LDR      r0,|L4.712|
000232  6800              LDR      r0,[r0,#0]  ; qqp
000234  f7fffffe          BL       __aeabi_ui2f
000238  4607              MOV      r7,r0
00023a  4829              LDR      r0,|L4.736|
00023c  6801              LDR      r1,[r0,#0]  ; Pressure_groud
00023e  4638              MOV      r0,r7
000240  f7fffffe          BL       __aeabi_frsub
000244  4606              MOV      r6,r0
000246  4927              LDR      r1,|L4.740|
000248  f7fffffe          BL       __aeabi_fmul
00024c  4929              LDR      r1,|L4.756|
00024e  6008              STR      r0,[r1,#0]  ; Baro_Height_Source
;;;213    	if(Baro_Height_Source < -100) 
000250  4927              LDR      r1,|L4.752|
000252  4828              LDR      r0,|L4.756|
000254  6800              LDR      r0,[r0,#0]  ; Baro_Height_Source
000256  f7fffffe          BL       __aeabi_cfcmple
00025a  d202              BCS      |L4.610|
;;;214    		Baro_Height_Source= - 100;
00025c  4824              LDR      r0,|L4.752|
00025e  4925              LDR      r1,|L4.756|
000260  6008              STR      r0,[r1,#0]  ; Baro_Height_Source
                  |L4.610|
;;;215    	
;;;216    	if(inum<300)//等待气压稳定后自动读取零米时的气压值
000262  4825              LDR      r0,|L4.760|
000264  8800              LDRH     r0,[r0,#0]  ; inum
000266  f5b07f96          CMP      r0,#0x12c
00026a  da0a              BGE      |L4.642|
;;;217    	{
;;;218    		inum++;Pressure_groud=Pressure;//当前气压值保存为地面气压
00026c  4822              LDR      r0,|L4.760|
00026e  8800              LDRH     r0,[r0,#0]  ; inum
000270  1c40              ADDS     r0,r0,#1
000272  4921              LDR      r1,|L4.760|
000274  8008              STRH     r0,[r1,#0]
000276  4817              LDR      r0,|L4.724|
000278  6800              LDR      r0,[r0,#0]  ; Pressure
00027a  f7fffffe          BL       __aeabi_ui2f
00027e  4918              LDR      r1,|L4.736|
000280  6008              STR      r0,[r1,#0]  ; Pressure_groud
                  |L4.642|
;;;219    	}
;;;220    	
;;;221    	//Altitude_BUFFER[q] = zzz 
;;;222    	//Altitude = 4433000.0 * (1 - pow((Pressure / Pressure_groud), 0.1903));
;;;223    //	q++;
;;;224    //	if(q==50) q=0;
;;;225    //	for(u8 i=0;i<50;i++) 
;;;226    //  {
;;;227    //		if(Altitude_BUFFER[i] > Altitude_max)  Altitude_max = Altitude_BUFFER[i];
;;;228    //		else if(Altitude_BUFFER[i] < Altitude_min)  Altitude_min = Altitude_BUFFER[i];
;;;229    //		Altitude_sum +=Altitude_BUFFER[i];
;;;230    //	}	
;;;231    	//Altitude=(Altitude_sum -  Altitude_max - Altitude_min)/48;
;;;232    	
;;;233    	baro_start_f=1;
000282  2001              MOVS     r0,#1
000284  491d              LDR      r1,|L4.764|
000286  7008              STRB     r0,[r1,#0]
;;;234    }
000288  b009              ADD      sp,sp,#0x24
00028a  e8bd8ff0          POP      {r4-r11,pc}
;;;235    /***********************************************
                          ENDP

00028e  0000              DCW      0x0000
                  |L4.656|
                          DCD      0x00030d40
                  |L4.660|
                          DCD      D1_Pres
                  |L4.664|
                          DCD      Cal_C
                  |L4.668|
                          DCD      ||dT||
                  |L4.672|
                          DCD      OFF_
                  |L4.676|
                          DCD      SENS
                  |L4.680|
                          DCD      TEMP
                  |L4.684|
                          DCD      Aux
                  |L4.688|
                          DCD      0x40040000
                  |L4.692|
                          DCD      OFF2
                  |L4.696|
                          DCD      0x3ff40000
                  |L4.700|
                          DCD      SENS2
                  |L4.704|
                          DCD      TEMP2
                  |L4.708|
                          DCD      0x40e00000
                  |L4.712|
                          DCD      qqp
                  |L4.716|
                          DCD      Pres_BUFFER
                  |L4.720|
                          DCD      |symbol_number.24|
                  |L4.724|
                          DCD      Pressure
                  |L4.728|
                          DCD      0x000249f0
                  |L4.732|
                          DCD      0x000186a0
                  |L4.736|
                          DCD      Pressure_groud
                  |L4.740|
                          DCD      0x42aa0000
                  |L4.744|
                          DCD      baro_height
                  |L4.748|
                          DCD      0xc3480000
                  |L4.752|
                          DCD      0xc2c80000
                  |L4.756|
                          DCD      Baro_Height_Source
                  |L4.760|
                          DCD      inum
                  |L4.764|
                          DCD      baro_start_f

                          AREA ||i.MS561101BA_getTemperature||, CODE, READONLY, ALIGN=2

                  MS561101BA_getTemperature PROC
;;;150    ************************************************/
;;;151    void MS561101BA_getTemperature(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;152    {  
;;;153      static u8 p=0;
;;;154    	uint32_t sum=0,max=0,min=200000000;
000004  2400              MOVS     r4,#0
000006  2500              MOVS     r5,#0
000008  f8df80b0          LDR      r8,|L5.188|
;;;155    	
;;;156    	Temp_BUFFER[p] = MS561101BA_getConversion();
00000c  f7fffffe          BL       MS561101BA_getConversion
000010  492b              LDR      r1,|L5.192|
000012  4a2c              LDR      r2,|L5.196|
000014  7812              LDRB     r2,[r2,#0]  ; p
000016  f8410022          STR      r0,[r1,r2,LSL #2]
;;;157    	p++;
00001a  482a              LDR      r0,|L5.196|
00001c  7800              LDRB     r0,[r0,#0]  ; p
00001e  1c40              ADDS     r0,r0,#1
000020  4928              LDR      r1,|L5.196|
000022  7008              STRB     r0,[r1,#0]
;;;158    	if(p==100) p=0;
000024  4608              MOV      r0,r1
000026  7800              LDRB     r0,[r0,#0]  ; p
000028  2864              CMP      r0,#0x64
00002a  d101              BNE      |L5.48|
00002c  2000              MOVS     r0,#0
00002e  7008              STRB     r0,[r1,#0]
                  |L5.48|
;;;159    	for(u8 i=0;i<100;i++) 
000030  2000              MOVS     r0,#0
000032  e016              B        |L5.98|
                  |L5.52|
;;;160      {
;;;161    		if(Temp_BUFFER[i] > max)  max = Temp_BUFFER[i];
000034  4922              LDR      r1,|L5.192|
000036  f8511020          LDR      r1,[r1,r0,LSL #2]
00003a  42a9              CMP      r1,r5
00003c  d903              BLS      |L5.70|
00003e  4920              LDR      r1,|L5.192|
000040  f8515020          LDR      r5,[r1,r0,LSL #2]
000044  e007              B        |L5.86|
                  |L5.70|
;;;162    		else if(Temp_BUFFER[i] < min)  min = Temp_BUFFER[i];
000046  491e              LDR      r1,|L5.192|
000048  f8511020          LDR      r1,[r1,r0,LSL #2]
00004c  4541              CMP      r1,r8
00004e  d202              BCS      |L5.86|
000050  491b              LDR      r1,|L5.192|
000052  f8518020          LDR      r8,[r1,r0,LSL #2]
                  |L5.86|
;;;163    		sum += Temp_BUFFER[i];
000056  491a              LDR      r1,|L5.192|
000058  f8511020          LDR      r1,[r1,r0,LSL #2]
00005c  440c              ADD      r4,r4,r1
00005e  1c41              ADDS     r1,r0,#1              ;159
000060  b2c8              UXTB     r0,r1                 ;159
                  |L5.98|
000062  2864              CMP      r0,#0x64              ;159
000064  dbe6              BLT      |L5.52|
;;;164    	}	
;;;165    	D2_Temp =(sum -  max -min)/98;
000066  1b60              SUBS     r0,r4,r5
000068  eba00008          SUB      r0,r0,r8
00006c  2162              MOVS     r1,#0x62
00006e  fbb0f0f1          UDIV     r0,r0,r1
000072  4915              LDR      r1,|L5.200|
000074  6008              STR      r0,[r1,#0]  ; D2_Temp
;;;166    	dT=D2_Temp - (((uint32_t)Cal_C[5])<<8);
000076  4815              LDR      r0,|L5.204|
000078  6940              LDR      r0,[r0,#0x14]  ; Cal_C
00007a  6809              LDR      r1,[r1,#0]  ; D2_Temp
00007c  eba12000          SUB      r0,r1,r0,LSL #8
000080  2100              MOVS     r1,#0
000082  4a13              LDR      r2,|L5.208|
000084  c203              STM      r2!,{r0,r1}
;;;167    	TEMP=2000+dT*((uint32_t)Cal_C[6])/8388608;
000086  4811              LDR      r0,|L5.204|
000088  6980              LDR      r0,[r0,#0x18]  ; Cal_C
00008a  2300              MOVS     r3,#0
00008c  4910              LDR      r1,|L5.208|
00008e  e9d12c00          LDRD     r2,r12,[r1,#0]
000092  fba06902          UMULL    r6,r9,r0,r2
000096  fb039202          MLA      r2,r3,r2,r9
00009a  fb00210c          MLA      r1,r0,r12,r2
00009e  f44f0200          MOV      r2,#0x800000
0000a2  4630              MOV      r0,r6
0000a4  f7fffffe          BL       __aeabi_uldivmod
0000a8  f44f63fa          MOV      r3,#0x7d0
0000ac  18c0              ADDS     r0,r0,r3
0000ae  f1410100          ADC      r1,r1,#0
0000b2  4a08              LDR      r2,|L5.212|
0000b4  c203              STM      r2!,{r0,r1}
;;;168    }
0000b6  e8bd87f0          POP      {r4-r10,pc}
;;;169    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L5.188|
                          DCD      0x0bebc200
                  |L5.192|
                          DCD      Temp_BUFFER
                  |L5.196|
                          DCD      p
                  |L5.200|
                          DCD      D2_Temp
                  |L5.204|
                          DCD      Cal_C
                  |L5.208|
                          DCD      ||dT||
                  |L5.212|
                          DCD      TEMP

                          AREA ||i.MS561101BA_startConversion||, CODE, READONLY, ALIGN=1

                  MS561101BA_startConversion PROC
;;;107    
;;;108    void MS561101BA_startConversion(uint8_t command) 
000000  b510              PUSH     {r4,lr}
;;;109    {	
000002  4604              MOV      r4,r0
;;;110    	I2C_Start();
000004  f7fffffe          BL       I2C_Start
;;;111    	I2C_SendByte(MS561101BA_SlaveAddress);
000008  20ee              MOVS     r0,#0xee
00000a  f7fffffe          BL       I2C_SendByte
;;;112    	I2C_WaitAck();
00000e  f7fffffe          BL       I2C_WaitAck
;;;113    	I2C_SendByte(command);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       I2C_SendByte
;;;114      I2C_WaitAck();
000018  f7fffffe          BL       I2C_WaitAck
;;;115    	I2C_Stop();
00001c  f7fffffe          BL       I2C_Stop
;;;116    }
000020  bd10              POP      {r4,pc}
;;;117    
                          ENDP


                          AREA ||i.MS5611_init||, CODE, READONLY, ALIGN=2

                  MS5611_init PROC
;;;73     *******************************************************************************/
;;;74     u8 MS5611_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;75      {	 
;;;76        uint8_t d1,d2,i;
;;;77        MS561101BA_RESET();	 // Reset Device
000002  f7fffffe          BL       MS561101BA_RESET
;;;78     	 delay_ms(20);  
000006  2014              MOVS     r0,#0x14
000008  f7fffffe          BL       delay_ms
;;;79     	 for(i=1;i<=6;i++)
00000c  2401              MOVS     r4,#1
00000e  e032              B        |L7.118|
                  |L7.16|
;;;80     	 {
;;;81     			I2C_Start();
000010  f7fffffe          BL       I2C_Start
;;;82     			I2C_SendByte(MS561101BA_SlaveAddress);
000014  20ee              MOVS     r0,#0xee
000016  f7fffffe          BL       I2C_SendByte
;;;83     			I2C_WaitAck();
00001a  f7fffffe          BL       I2C_WaitAck
;;;84     			I2C_SendByte((MS561101BA_PROM_RD+i*2));
00001e  21a0              MOVS     r1,#0xa0
000020  eb010144          ADD      r1,r1,r4,LSL #1
000024  b2c8              UXTB     r0,r1
000026  f7fffffe          BL       I2C_SendByte
;;;85     			I2C_WaitAck();
00002a  f7fffffe          BL       I2C_WaitAck
;;;86     			I2C_Stop();
00002e  f7fffffe          BL       I2C_Stop
;;;87     			delay_ms(1);
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       delay_ms
;;;88     
;;;89     			I2C_Start();
000038  f7fffffe          BL       I2C_Start
;;;90     			I2C_SendByte(MS561101BA_SlaveAddress+1);
00003c  20ef              MOVS     r0,#0xef
00003e  f7fffffe          BL       I2C_SendByte
;;;91     			I2C_WaitAck();
000042  f7fffffe          BL       I2C_WaitAck
;;;92     			d1=I2C_RadeByte();
000046  f7fffffe          BL       I2C_RadeByte
00004a  4605              MOV      r5,r0
;;;93     			I2C_Ack();
00004c  f7fffffe          BL       I2C_Ack
;;;94     			d2=I2C_RadeByte();
000050  f7fffffe          BL       I2C_RadeByte
000054  4606              MOV      r6,r0
;;;95     			I2C_NoAck();
000056  f7fffffe          BL       I2C_NoAck
;;;96     			I2C_Stop();
00005a  f7fffffe          BL       I2C_Stop
;;;97     
;;;98     			I2C_delay();
00005e  f7fffffe          BL       I2C_delay
;;;99     			Cal_C[i]=((uint16_t)d1<<8)|d2;
000062  ea462005          ORR      r0,r6,r5,LSL #8
000066  4908              LDR      r1,|L7.136|
000068  f8410024          STR      r0,[r1,r4,LSL #2]
;;;100    			delay_ms(10);
00006c  200a              MOVS     r0,#0xa
00006e  f7fffffe          BL       delay_ms
000072  1c60              ADDS     r0,r4,#1              ;79
000074  b2c4              UXTB     r4,r0                 ;79
                  |L7.118|
000076  2c06              CMP      r4,#6                 ;79
000078  ddca              BLE      |L7.16|
;;;101    	 }
;;;102       if (Cal_C[0]!=0)
00007a  4803              LDR      r0,|L7.136|
00007c  6800              LDR      r0,[r0,#0]  ; Cal_C
00007e  b108              CBZ      r0,|L7.132|
;;;103    		 return 1;
000080  2001              MOVS     r0,#1
                  |L7.130|
;;;104    	 else
;;;105         return 0; 
;;;106     }
000082  bd70              POP      {r4-r6,pc}
                  |L7.132|
000084  2000              MOVS     r0,#0                 ;105
000086  e7fc              B        |L7.130|
;;;107    
                          ENDP

                  |L7.136|
                          DCD      Cal_C

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  Cal_C
                          %        28
                  Pres_BUFFER
                          %        80
                  Temp_BUFFER
                          %        404
                  Pressure_Filterbuffer
                          %        80

                          AREA ||.data||, DATA, ALIGN=3

                  OFF_
                          %        8
                  Aux
                          DCD      0x00000000
                  Altitude
                          DCD      0x00000000
                  ||dT||
                          %        8
                  TEMP
                          %        8
                  OFf
                          %        8
                  SENS
                          %        8
                  D1_Pres
                          DCD      0x00000000
                  D2_Temp
                          DCD      0x00000000
                  Pressure
                          DCD      0x00000000
                  Pressure_old
                          DCD      0x00000000
                  qqp
                          DCD      0x00000000
                  TEMP2
                          DCD      0x00000000
                  ||T2||
                          DCD      0x00000000
                  OFF2
                          DCD      0x00000000
                  SENS2
                          DCD      0x00000000
                          DCD      0x00000000
                  IPressure
                          %        8
                  DPressure
                          %        8
                  Pressure_error
                          %        8
                  Pressure_out
                          %        8
                  Pressure_new
                          %        8
                  Pressure_last
                          %        8
                  lockpressure
000088  c8000000          DCB      0xc8,0x00,0x00,0x00
                  Baro_Height_Source
                          DCD      0x00000000
                  baro_dis_old
                          DCD      0x00000000
                  baro_dis_delta
                          DCD      0x00000000
                  baro_start_f
000098  00                DCB      0x00
                  p
000099  00                DCB      0x00
                  |symbol_number.24|
00009a  00                DCB      0x00
                  q
00009b  00                DCB      0x00
                  inum
00009c  0000              DCB      0x00,0x00
                  Now_doing
00009e  01                DCB      0x01
                  flag
00009f  00                DCB      0x00
