; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\hmc5883.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\hmc5883.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\GPS -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Heigh -IC:\__Electronic_Projects\STM32\HT_Hawk_0528_1\Project\MDK-ARM(uV5)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\hmc5883.crf ..\..\User\Modules\Modules_hmc5883\hmc5883.c]
                          THUMB

                          AREA ||i.HMC5883lRead||, CODE, READONLY, ALIGN=2

                  HMC5883lRead PROC
;;;53     /*====================================================================================================*/
;;;54     void HMC5883lRead(int16_t *magData)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;55     {
000004  4605              MOV      r5,r0
;;;56     	u8 buf[6],cy,con=0;
000006  2600              MOVS     r6,#0
;;;57     	int16_t mag[3];
;;;58     	static u8 onc=1;
;;;59     	static int32_t An[3] = {0,0,0};
;;;60     	
;;;61     	// 读取寄存器数据
;;;62     	I2C_Read(MAG_ADDRESS, MAG_DATA_REGISTER, 6, buf);
000008  ab02              ADD      r3,sp,#8
00000a  2206              MOVS     r2,#6
00000c  2103              MOVS     r1,#3
00000e  203c              MOVS     r0,#0x3c
000010  f7fffffe          BL       I2C_Read
;;;63     
;;;64     	// 十位深度滤波
;;;65     	An[0] -= An[0]/10;
000014  4859              LDR      r0,|L1.380|
000016  6800              LDR      r0,[r0,#0]  ; An
000018  210a              MOVS     r1,#0xa
00001a  fb90f0f1          SDIV     r0,r0,r1
00001e  4957              LDR      r1,|L1.380|
000020  6809              LDR      r1,[r1,#0]  ; An
000022  1a08              SUBS     r0,r1,r0
000024  4955              LDR      r1,|L1.380|
000026  6008              STR      r0,[r1,#0]  ; An
;;;66     	An[0] += (int16_t)(buf[0] << 8 | buf[1]);
000028  f89d0009          LDRB     r0,[sp,#9]
00002c  f89d1008          LDRB     r1,[sp,#8]
000030  ea402001          ORR      r0,r0,r1,LSL #8
000034  b200              SXTH     r0,r0
000036  4951              LDR      r1,|L1.380|
000038  6809              LDR      r1,[r1,#0]  ; An
00003a  4408              ADD      r0,r0,r1
00003c  494f              LDR      r1,|L1.380|
00003e  6008              STR      r0,[r1,#0]  ; An
;;;67     	mag[0] = An[0]/10;
000040  4608              MOV      r0,r1
000042  6800              LDR      r0,[r0,#0]  ; An
000044  210a              MOVS     r1,#0xa
000046  fb90f0f1          SDIV     r0,r0,r1
00004a  b200              SXTH     r0,r0
00004c  f8ad0000          STRH     r0,[sp,#0]
;;;68     
;;;69     	An[1] -= An[1]/10;
000050  484a              LDR      r0,|L1.380|
000052  6840              LDR      r0,[r0,#4]  ; An
000054  fb90f0f1          SDIV     r0,r0,r1
000058  4948              LDR      r1,|L1.380|
00005a  6849              LDR      r1,[r1,#4]  ; An
00005c  1a08              SUBS     r0,r1,r0
00005e  4947              LDR      r1,|L1.380|
000060  6048              STR      r0,[r1,#4]  ; An
;;;70     	An[1] += (int16_t)(buf[4] << 8 | buf[5]);
000062  f89d000d          LDRB     r0,[sp,#0xd]
000066  f89d100c          LDRB     r1,[sp,#0xc]
00006a  ea402001          ORR      r0,r0,r1,LSL #8
00006e  b200              SXTH     r0,r0
000070  4942              LDR      r1,|L1.380|
000072  6849              LDR      r1,[r1,#4]  ; An
000074  4408              ADD      r0,r0,r1
000076  4941              LDR      r1,|L1.380|
000078  6048              STR      r0,[r1,#4]  ; An
;;;71     	mag[1] = An[1]/10;
00007a  4608              MOV      r0,r1
00007c  6840              LDR      r0,[r0,#4]  ; An
00007e  210a              MOVS     r1,#0xa
000080  fb90f0f1          SDIV     r0,r0,r1
000084  b200              SXTH     r0,r0
000086  f8ad0002          STRH     r0,[sp,#2]
;;;72     
;;;73     	An[2] -= An[2]/10;
00008a  483c              LDR      r0,|L1.380|
00008c  6880              LDR      r0,[r0,#8]  ; An
00008e  fb90f0f1          SDIV     r0,r0,r1
000092  493a              LDR      r1,|L1.380|
000094  6889              LDR      r1,[r1,#8]  ; An
000096  1a08              SUBS     r0,r1,r0
000098  4938              LDR      r1,|L1.380|
00009a  6088              STR      r0,[r1,#8]  ; An
;;;74     	An[2] += (int16_t)(buf[2] << 8 | buf[3]);
00009c  f89d000b          LDRB     r0,[sp,#0xb]
0000a0  f89d100a          LDRB     r1,[sp,#0xa]
0000a4  ea402001          ORR      r0,r0,r1,LSL #8
0000a8  b200              SXTH     r0,r0
0000aa  4934              LDR      r1,|L1.380|
0000ac  6889              LDR      r1,[r1,#8]  ; An
0000ae  4408              ADD      r0,r0,r1
0000b0  4932              LDR      r1,|L1.380|
0000b2  6088              STR      r0,[r1,#8]  ; An
;;;75     	mag[2] = An[2]/10;
0000b4  4608              MOV      r0,r1
0000b6  6880              LDR      r0,[r0,#8]  ; An
0000b8  210a              MOVS     r1,#0xa
0000ba  fb90f0f1          SDIV     r0,r0,r1
0000be  b200              SXTH     r0,r0
0000c0  f8ad0004          STRH     r0,[sp,#4]
;;;76       magdata[0]=mag[2];
0000c4  f8bd0004          LDRH     r0,[sp,#4]
0000c8  492d              LDR      r1,|L1.384|
0000ca  8008              STRH     r0,[r1,#0]
;;;77       magdata[1]=buf[2];
0000cc  f89d000a          LDRB     r0,[sp,#0xa]
0000d0  8048              STRH     r0,[r1,#2]
;;;78     	magdata[2]=buf[3];
0000d2  f89d000b          LDRB     r0,[sp,#0xb]
0000d6  8088              STRH     r0,[r1,#4]
;;;79     
;;;80     	//需要校准
;;;81     	if(flag.calibratingM) {
0000d8  482a              LDR      r0,|L1.388|
0000da  7a00              LDRB     r0,[r0,#8]  ; flag
0000dc  b140              CBZ      r0,|L1.240|
;;;82     		onc=1;
0000de  2001              MOVS     r0,#1
0000e0  4929              LDR      r1,|L1.392|
0000e2  7008              STRB     r0,[r1,#0]
;;;83     		flag.MagIssue = 0;
0000e4  2000              MOVS     r0,#0
0000e6  4927              LDR      r1,|L1.388|
0000e8  70c8              STRB     r0,[r1,#3]
;;;84     		Mag_Calibration(mag);
0000ea  4668              MOV      r0,sp
0000ec  f7fffffe          BL       Mag_Calibration
                  |L1.240|
;;;85     	}
;;;86      
;;;87     	if(onc){
0000f0  4825              LDR      r0,|L1.392|
0000f2  7800              LDRB     r0,[r0,#0]  ; onc
0000f4  b308              CBZ      r0,|L1.314|
;;;88     		onc=0;
0000f6  2000              MOVS     r0,#0
0000f8  4923              LDR      r1,|L1.392|
0000fa  7008              STRB     r0,[r1,#0]
;;;89     		
;;;90     		// 三个轴的最值都偏小 说明地磁有问题，停用地磁  
;;;91     		for(cy=0;cy<6;cy++)	{
0000fc  2400              MOVS     r4,#0
0000fe  e015              B        |L1.300|
                  |L1.256|
;;;92     			if(absu16(*(mag_limt+cy))<20)	con++;
000100  4822              LDR      r0,|L1.396|
000102  6800              LDR      r0,[r0,#0]  ; mag_limt
000104  f9300014          LDRSH    r0,[r0,r4,LSL #1]
000108  2800              CMP      r0,#0
00010a  da05              BGE      |L1.280|
00010c  481f              LDR      r0,|L1.396|
00010e  6800              LDR      r0,[r0,#0]  ; mag_limt
000110  f9300014          LDRSH    r0,[r0,r4,LSL #1]
000114  4240              RSBS     r0,r0,#0
000116  e003              B        |L1.288|
                  |L1.280|
000118  481c              LDR      r0,|L1.396|
00011a  6800              LDR      r0,[r0,#0]  ; mag_limt
00011c  f9300014          LDRSH    r0,[r0,r4,LSL #1]
                  |L1.288|
000120  2814              CMP      r0,#0x14
000122  da01              BGE      |L1.296|
000124  1c70              ADDS     r0,r6,#1
000126  b2c6              UXTB     r6,r0
                  |L1.296|
000128  1c60              ADDS     r0,r4,#1              ;91
00012a  b2c4              UXTB     r4,r0                 ;91
                  |L1.300|
00012c  2c06              CMP      r4,#6                 ;91
00012e  dbe7              BLT      |L1.256|
;;;93     		}
;;;94     		if(con>=2) flag.MagIssue = 1;
000130  2e02              CMP      r6,#2
000132  db02              BLT      |L1.314|
000134  2001              MOVS     r0,#1
000136  4913              LDR      r1,|L1.388|
000138  70c8              STRB     r0,[r1,#3]
                  |L1.314|
;;;95       }
;;;96     	
;;;97     	// 修正
;;;98     	for(cy=0;cy<3;cy++)
00013a  2400              MOVS     r4,#0
00013c  e01a              B        |L1.372|
                  |L1.318|
;;;99     		*(magData+cy) = (fp32)(mag[cy] -(*(mag_limt+cy+3) + *(mag_limt+cy))/2);
00013e  4913              LDR      r1,|L1.396|
000140  6809              LDR      r1,[r1,#0]  ; mag_limt
000142  eb010144          ADD      r1,r1,r4,LSL #1
000146  f9b11006          LDRSH    r1,[r1,#6]
00014a  4a10              LDR      r2,|L1.396|
00014c  6812              LDR      r2,[r2,#0]  ; mag_limt
00014e  f9322014          LDRSH    r2,[r2,r4,LSL #1]
000152  188f              ADDS     r7,r1,r2
000154  eb0771d7          ADD      r1,r7,r7,LSR #31
000158  f93d2014          LDRSH    r2,[sp,r4,LSL #1]
00015c  eba20061          SUB      r0,r2,r1,ASR #1
000160  f7fffffe          BL       __aeabi_i2f
000164  4680              MOV      r8,r0
000166  f7fffffe          BL       __aeabi_f2iz
00016a  b200              SXTH     r0,r0
00016c  f8250014          STRH     r0,[r5,r4,LSL #1]
000170  1c60              ADDS     r0,r4,#1              ;98
000172  b2c4              UXTB     r4,r0                 ;98
                  |L1.372|
000174  2c03              CMP      r4,#3                 ;98
000176  dbe2              BLT      |L1.318|
;;;100    }
000178  e8bd81ff          POP      {r0-r8,pc}
;;;101    
                          ENDP

                  |L1.380|
                          DCD      ||An||
                  |L1.384|
                          DCD      magdata
                  |L1.388|
                          DCD      flag
                  |L1.392|
                          DCD      onc
                  |L1.396|
                          DCD      mag_limt

                          AREA ||i.Init_HMC5883L||, CODE, READONLY, ALIGN=1

                  Init_HMC5883L PROC
;;;26     /*====================================================================================================*/
;;;27     u8 Init_HMC5883L(void)
000000  b510              PUSH     {r4,lr}
;;;28     {
;;;29     	u8 ack; 
;;;30     	
;;;31     	ack = Single_Read(MAG_ADDRESS, 0x0A);
000002  210a              MOVS     r1,#0xa
000004  203c              MOVS     r0,#0x3c
000006  f7fffffe          BL       Single_Read
00000a  4604              MOV      r4,r0
;;;32     	
;;;33     	if (!ack)
00000c  b90c              CBNZ     r4,|L2.18|
;;;34     			return FALSE;
00000e  2000              MOVS     r0,#0
                  |L2.16|
;;;35     
;;;36     	// leave test mode
;;;37     	Single_Write(MAG_ADDRESS, HMC58X3_R_CONFA, 0x78);   // 0x70Configuration Register A  -- 0 11 100 00  num samples: 8 ; output rate: 75Hz ; normal measurement mode
;;;38     	Single_Write(MAG_ADDRESS, HMC58X3_R_CONFB, 0x20);   //0x20 Configuration Register B  -- 001 00000    configuration gain 1.33Ga
;;;39     	Single_Write(MAG_ADDRESS, HMC58X3_R_MODE, 0x00);    // Mode register             -- 000000 00    continuous Conversion Mode
;;;40     	delay(100);
;;;41     
;;;42     	return TRUE;	 
;;;43     }
000010  bd10              POP      {r4,pc}
                  |L2.18|
000012  2278              MOVS     r2,#0x78              ;37
000014  2100              MOVS     r1,#0                 ;37
000016  203c              MOVS     r0,#0x3c              ;37
000018  f7fffffe          BL       Single_Write
00001c  2220              MOVS     r2,#0x20              ;38
00001e  2101              MOVS     r1,#1                 ;38
000020  203c              MOVS     r0,#0x3c              ;38
000022  f7fffffe          BL       Single_Write
000026  2200              MOVS     r2,#0                 ;39
000028  2102              MOVS     r1,#2                 ;39
00002a  203c              MOVS     r0,#0x3c              ;39
00002c  f7fffffe          BL       Single_Write
000030  2064              MOVS     r0,#0x64              ;40
000032  f7fffffe          BL       delay
000036  2001              MOVS     r0,#1                 ;42
000038  e7ea              B        |L2.16|
;;;44     	
                          ENDP


                          AREA ||i.Mag_Calibration||, CODE, READONLY, ALIGN=2

                  Mag_Calibration PROC
;;;110    /*====================================================================================================*/
;;;111    void Mag_Calibration(int16_t *array)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;112    {
000004  4681              MOV      r9,r0
;;;113    	u8 cy;
;;;114    	static u8  clen_flag=1; 
;;;115    	static fp32 x,y,z; 
;;;116    	
;;;117    	//校准之前先把之前数据清零
;;;118    	if(clen_flag){
000006  4894              LDR      r0,|L3.600|
000008  7800              LDRB     r0,[r0,#0]  ; clen_flag
00000a  b198              CBZ      r0,|L3.52|
;;;119    		clen_flag = 0;
00000c  2000              MOVS     r0,#0
00000e  4992              LDR      r1,|L3.600|
000010  7008              STRB     r0,[r1,#0]
;;;120    		x=y=z=0;
000012  4992              LDR      r1,|L3.604|
000014  6008              STR      r0,[r1,#0]  ; z
000016  4992              LDR      r1,|L3.608|
000018  6008              STR      r0,[r1,#0]  ; y
00001a  4992              LDR      r1,|L3.612|
00001c  6008              STR      r0,[r1,#0]  ; x
;;;121    		for(cy=0;cy<6;cy++)
00001e  2400              MOVS     r4,#0
000020  e006              B        |L3.48|
                  |L3.34|
;;;122    			*(mag_limt+cy)=0;
000022  2000              MOVS     r0,#0
000024  4990              LDR      r1,|L3.616|
000026  6809              LDR      r1,[r1,#0]  ; mag_limt
000028  f8210014          STRH     r0,[r1,r4,LSL #1]
00002c  1c60              ADDS     r0,r4,#1              ;121
00002e  b2c4              UXTB     r4,r0                 ;121
                  |L3.48|
000030  2c06              CMP      r4,#6                 ;121
000032  dbf6              BLT      |L3.34|
                  |L3.52|
;;;123    	}
;;;124      
;;;125    	// 开始采集 寻找三个轴的最大和最小值
;;;126    	for(cy=0;cy<3;cy++){
000034  2400              MOVS     r4,#0
000036  e021              B        |L3.124|
                  |L3.56|
;;;127    		if(*(mag_limt+cy)> *(array+cy)) *(mag_limt+cy) = *(array+cy);  //找最小
000038  488b              LDR      r0,|L3.616|
00003a  6800              LDR      r0,[r0,#0]  ; mag_limt
00003c  f9300014          LDRSH    r0,[r0,r4,LSL #1]
000040  f9391014          LDRSH    r1,[r9,r4,LSL #1]
000044  4288              CMP      r0,r1
000046  dd06              BLE      |L3.86|
000048  f8390014          LDRH     r0,[r9,r4,LSL #1]
00004c  4986              LDR      r1,|L3.616|
00004e  6809              LDR      r1,[r1,#0]  ; mag_limt
000050  f8210014          STRH     r0,[r1,r4,LSL #1]
000054  e010              B        |L3.120|
                  |L3.86|
;;;128    
;;;129    		else if(*(mag_limt+cy+3)<*(array+cy)) *(mag_limt+cy+3) = *(array+cy);  //找最大
000056  4884              LDR      r0,|L3.616|
000058  6800              LDR      r0,[r0,#0]  ; mag_limt
00005a  eb000044          ADD      r0,r0,r4,LSL #1
00005e  f9b00006          LDRSH    r0,[r0,#6]
000062  f9391014          LDRSH    r1,[r9,r4,LSL #1]
000066  4288              CMP      r0,r1
000068  da06              BGE      |L3.120|
00006a  f8390014          LDRH     r0,[r9,r4,LSL #1]
00006e  497e              LDR      r1,|L3.616|
000070  6809              LDR      r1,[r1,#0]  ; mag_limt
000072  eb010144          ADD      r1,r1,r4,LSL #1
000076  80c8              STRH     r0,[r1,#6]
                  |L3.120|
000078  1c60              ADDS     r0,r4,#1              ;126
00007a  b2c4              UXTB     r4,r0                 ;126
                  |L3.124|
00007c  2c03              CMP      r4,#3                 ;126
00007e  dbdb              BLT      |L3.56|
;;;130    	}
;;;131    	//下面就是判断进行地磁校准的动作利用加速度计判断是否垂直，利用陀螺仪判断是否转满了360度
;;;132    	if(flag.calibratingM == 1 && (absu16(sensor.acc.averag.z) > 5000))   {
000080  487a              LDR      r0,|L3.620|
000082  7a00              LDRB     r0,[r0,#8]  ; flag
000084  2801              CMP      r0,#1
000086  d147              BNE      |L3.280|
000088  4979              LDR      r1,|L3.624|
00008a  6908              LDR      r0,[r1,#0x10]
00008c  2100              MOVS     r1,#0
00008e  f7fffffe          BL       __aeabi_cfcmple
000092  d204              BCS      |L3.158|
000094  4876              LDR      r0,|L3.624|
000096  6900              LDR      r0,[r0,#0x10]
000098  f0804000          EOR      r0,r0,#0x80000000
00009c  e001              B        |L3.162|
                  |L3.158|
00009e  4874              LDR      r0,|L3.624|
0000a0  6900              LDR      r0,[r0,#0x10]
                  |L3.162|
0000a2  4605              MOV      r5,r0
0000a4  4973              LDR      r1,|L3.628|
0000a6  f7fffffe          BL       __aeabi_cfrcmple
0000aa  d235              BCS      |L3.280|
;;;133    	  z += sensor.gyro.radian.z * Gyro_G * 0.002f;
0000ac  4970              LDR      r1,|L3.624|
0000ae  6e48              LDR      r0,[r1,#0x64]
0000b0  f7fffffe          BL       __aeabi_f2d
0000b4  4a70              LDR      r2,|L3.632|
0000b6  4b71              LDR      r3,|L3.636|
0000b8  e9cd0100          STRD     r0,r1,[sp,#0]
0000bc  f7fffffe          BL       __aeabi_dmul
0000c0  4607              MOV      r7,r0
0000c2  f04f4260          MOV      r2,#0xe0000000
0000c6  4b6e              LDR      r3,|L3.640|
0000c8  f7fffffe          BL       __aeabi_dmul
0000cc  4605              MOV      r5,r0
0000ce  460e              MOV      r6,r1
0000d0  4862              LDR      r0,|L3.604|
0000d2  6800              LDR      r0,[r0,#0]  ; z
0000d4  f7fffffe          BL       __aeabi_f2d
0000d8  4682              MOV      r10,r0
0000da  462a              MOV      r2,r5
0000dc  4633              MOV      r3,r6
0000de  f7fffffe          BL       __aeabi_dadd
0000e2  e9cd0102          STRD     r0,r1,[sp,#8]
0000e6  f7fffffe          BL       __aeabi_d2f
0000ea  495c              LDR      r1,|L3.604|
0000ec  6008              STR      r0,[r1,#0]  ; z
;;;134    		if(absFloat(z)>360)  flag.calibratingM = 2;
0000ee  2100              MOVS     r1,#0
0000f0  485a              LDR      r0,|L3.604|
0000f2  6800              LDR      r0,[r0,#0]  ; z
0000f4  f7fffffe          BL       __aeabi_cfcmple
0000f8  d204              BCS      |L3.260|
0000fa  4858              LDR      r0,|L3.604|
0000fc  6800              LDR      r0,[r0,#0]  ; z
0000fe  f0804000          EOR      r0,r0,#0x80000000
000102  e001              B        |L3.264|
                  |L3.260|
000104  4855              LDR      r0,|L3.604|
000106  6800              LDR      r0,[r0,#0]  ; z
                  |L3.264|
000108  4605              MOV      r5,r0
00010a  495e              LDR      r1,|L3.644|
00010c  f7fffffe          BL       __aeabi_cfrcmple
000110  d202              BCS      |L3.280|
000112  2002              MOVS     r0,#2
000114  4955              LDR      r1,|L3.620|
000116  7208              STRB     r0,[r1,#8]
                  |L3.280|
;;;135    	}
;;;136    	
;;;137    	if(flag.calibratingM == 2 && (absu16(sensor.acc.averag.x) > 5000))   {
000118  4854              LDR      r0,|L3.620|
00011a  7a00              LDRB     r0,[r0,#8]  ; flag
00011c  2802              CMP      r0,#2
00011e  d147              BNE      |L3.432|
000120  4953              LDR      r1,|L3.624|
000122  6888              LDR      r0,[r1,#8]  ; sensor
000124  2100              MOVS     r1,#0
000126  f7fffffe          BL       __aeabi_cfcmple
00012a  d204              BCS      |L3.310|
00012c  4850              LDR      r0,|L3.624|
00012e  6880              LDR      r0,[r0,#8]  ; sensor
000130  f0804000          EOR      r0,r0,#0x80000000
000134  e001              B        |L3.314|
                  |L3.310|
000136  484e              LDR      r0,|L3.624|
000138  6880              LDR      r0,[r0,#8]  ; sensor
                  |L3.314|
00013a  4605              MOV      r5,r0
00013c  494d              LDR      r1,|L3.628|
00013e  f7fffffe          BL       __aeabi_cfrcmple
000142  d235              BCS      |L3.432|
;;;138    	  x += sensor.gyro.radian.x * Gyro_G * 0.002f;
000144  494a              LDR      r1,|L3.624|
000146  6dc8              LDR      r0,[r1,#0x5c]
000148  f7fffffe          BL       __aeabi_f2d
00014c  4607              MOV      r7,r0
00014e  4a4a              LDR      r2,|L3.632|
000150  4b4a              LDR      r3,|L3.636|
000152  f7fffffe          BL       __aeabi_dmul
000156  4605              MOV      r5,r0
000158  f04f4260          MOV      r2,#0xe0000000
00015c  4b48              LDR      r3,|L3.640|
00015e  f7fffffe          BL       __aeabi_dmul
000162  4682              MOV      r10,r0
000164  468b              MOV      r11,r1
000166  483f              LDR      r0,|L3.612|
000168  6800              LDR      r0,[r0,#0]  ; x
00016a  f7fffffe          BL       __aeabi_f2d
00016e  4652              MOV      r2,r10
000170  465b              MOV      r3,r11
000172  e9cd0100          STRD     r0,r1,[sp,#0]
000176  f7fffffe          BL       __aeabi_dadd
00017a  e9cd0102          STRD     r0,r1,[sp,#8]
00017e  f7fffffe          BL       __aeabi_d2f
000182  4938              LDR      r1,|L3.612|
000184  6008              STR      r0,[r1,#0]  ; x
;;;139    		if(absFloat(x)>360)  flag.calibratingM = 3;
000186  2100              MOVS     r1,#0
000188  4836              LDR      r0,|L3.612|
00018a  6800              LDR      r0,[r0,#0]  ; x
00018c  f7fffffe          BL       __aeabi_cfcmple
000190  d204              BCS      |L3.412|
000192  4834              LDR      r0,|L3.612|
000194  6800              LDR      r0,[r0,#0]  ; x
000196  f0804000          EOR      r0,r0,#0x80000000
00019a  e001              B        |L3.416|
                  |L3.412|
00019c  4831              LDR      r0,|L3.612|
00019e  6800              LDR      r0,[r0,#0]  ; x
                  |L3.416|
0001a0  4605              MOV      r5,r0
0001a2  4938              LDR      r1,|L3.644|
0001a4  f7fffffe          BL       __aeabi_cfrcmple
0001a8  d202              BCS      |L3.432|
0001aa  2003              MOVS     r0,#3
0001ac  492f              LDR      r1,|L3.620|
0001ae  7208              STRB     r0,[r1,#8]
                  |L3.432|
;;;140    	}
;;;141    	
;;;142    	if(flag.calibratingM == 3 && (absu16(sensor.acc.averag.y) > 5000))   {
0001b0  482e              LDR      r0,|L3.620|
0001b2  7a00              LDRB     r0,[r0,#8]  ; flag
0001b4  2803              CMP      r0,#3
0001b6  d14c              BNE      |L3.594|
0001b8  492d              LDR      r1,|L3.624|
0001ba  68c8              LDR      r0,[r1,#0xc]
0001bc  2100              MOVS     r1,#0
0001be  f7fffffe          BL       __aeabi_cfcmple
0001c2  d204              BCS      |L3.462|
0001c4  482a              LDR      r0,|L3.624|
0001c6  68c0              LDR      r0,[r0,#0xc]
0001c8  f0804000          EOR      r0,r0,#0x80000000
0001cc  e001              B        |L3.466|
                  |L3.462|
0001ce  4828              LDR      r0,|L3.624|
0001d0  68c0              LDR      r0,[r0,#0xc]
                  |L3.466|
0001d2  4605              MOV      r5,r0
0001d4  4927              LDR      r1,|L3.628|
0001d6  f7fffffe          BL       __aeabi_cfrcmple
0001da  d23a              BCS      |L3.594|
;;;143    	  y += sensor.gyro.radian.y * Gyro_G * 0.002f;
0001dc  4924              LDR      r1,|L3.624|
0001de  6e08              LDR      r0,[r1,#0x60]
0001e0  f7fffffe          BL       __aeabi_f2d
0001e4  4607              MOV      r7,r0
0001e6  4a24              LDR      r2,|L3.632|
0001e8  4b24              LDR      r3,|L3.636|
0001ea  f7fffffe          BL       __aeabi_dmul
0001ee  f04f4260          MOV      r2,#0xe0000000
0001f2  4b23              LDR      r3,|L3.640|
0001f4  e9cd0100          STRD     r0,r1,[sp,#0]
0001f8  f7fffffe          BL       __aeabi_dmul
0001fc  4605              MOV      r5,r0
0001fe  460e              MOV      r6,r1
000200  4817              LDR      r0,|L3.608|
000202  6800              LDR      r0,[r0,#0]  ; y
000204  f7fffffe          BL       __aeabi_f2d
000208  4682              MOV      r10,r0
00020a  462a              MOV      r2,r5
00020c  4633              MOV      r3,r6
00020e  f7fffffe          BL       __aeabi_dadd
000212  e9cd0102          STRD     r0,r1,[sp,#8]
000216  f7fffffe          BL       __aeabi_d2f
00021a  4911              LDR      r1,|L3.608|
00021c  6008              STR      r0,[r1,#0]  ; y
;;;144    		if(absFloat(y)>360)  {
00021e  2100              MOVS     r1,#0
000220  480f              LDR      r0,|L3.608|
000222  6800              LDR      r0,[r0,#0]  ; y
000224  f7fffffe          BL       __aeabi_cfcmple
000228  d204              BCS      |L3.564|
00022a  480d              LDR      r0,|L3.608|
00022c  6800              LDR      r0,[r0,#0]  ; y
00022e  f0804000          EOR      r0,r0,#0x80000000
000232  e001              B        |L3.568|
                  |L3.564|
000234  480a              LDR      r0,|L3.608|
000236  6800              LDR      r0,[r0,#0]  ; y
                  |L3.568|
000238  4605              MOV      r5,r0
00023a  4912              LDR      r1,|L3.644|
00023c  f7fffffe          BL       __aeabi_cfrcmple
000240  d207              BCS      |L3.594|
;;;145    			clen_flag = 1;
000242  2001              MOVS     r0,#1
000244  4904              LDR      r1,|L3.600|
000246  7008              STRB     r0,[r1,#0]
;;;146    			flag.calibratingM = 0;
000248  2000              MOVS     r0,#0
00024a  4908              LDR      r1,|L3.620|
00024c  7208              STRB     r0,[r1,#8]
;;;147    			EE_SAVE_MAG_OFFSET();
00024e  f7fffffe          BL       EE_SAVE_MAG_OFFSET
                  |L3.594|
;;;148    		}
;;;149    	}	
;;;150    }
000252  e8bd9fff          POP      {r0-r12,pc}
                          ENDP

000256  0000              DCW      0x0000
                  |L3.600|
                          DCD      clen_flag
                  |L3.604|
                          DCD      z
                  |L3.608|
                          DCD      y
                  |L3.612|
                          DCD      x
                  |L3.616|
                          DCD      mag_limt
                  |L3.620|
                          DCD      flag
                  |L3.624|
                          DCD      sensor
                  |L3.628|
                          DCD      0x459c4000
                  |L3.632|
                          DCD      0xc89d6830
                  |L3.636|
                          DCD      0x3f9f3ffe
                  |L3.640|
                          DCD      0x3f60624d
                  |L3.644|
                          DCD      0x43b40000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  HMC58X3_limit
                          %        12
                  magdata
                          %        12
                  ||An||
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  mag_limt
                          DCD      HMC58X3_limit
                  onc
000004  01                DCB      0x01
                  clen_flag
000005  010000            DCB      0x01,0x00,0x00
                  x
                          DCD      0x00000000
                  y
                          DCD      0x00000000
                  z
                          DCD      0x00000000
