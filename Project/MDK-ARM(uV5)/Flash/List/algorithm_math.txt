; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\algorithm_math.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\algorithm_math.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\GPS -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Heigh -IC:\__Electronic_Projects\STM32\HT_Hawk_0528_1\Project\MDK-ARM(uV5)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\algorithm_math.crf ..\..\User\Algorithm\Algorithm_math\Algorithm_math.c]
                          THUMB

                          AREA ||i.Degree||, CODE, READONLY, ALIGN=2

                  Degree PROC
;;;125    *******************************************************************************/
;;;126    double Degree(double rad)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;127    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;128        return (rad / M_PI * 180.0);
000008  f04f42c0          MOV      r2,#0x60000000
00000c  4b05              LDR      r3,|L1.36|
00000e  4620              MOV      r0,r4
000010  4629              MOV      r1,r5
000012  f7fffffe          BL       __aeabi_ddiv
000016  4606              MOV      r6,r0
000018  2200              MOVS     r2,#0
00001a  4b03              LDR      r3,|L1.40|
00001c  f7fffffe          BL       __aeabi_dmul
;;;129    }
000020  e8bd81f0          POP      {r4-r8,pc}
;;;130    
                          ENDP

                  |L1.36|
                          DCD      0x400921fb
                  |L1.40|
                          DCD      0x40668000

                          AREA ||i.Q_rsqrt||, CODE, READONLY, ALIGN=2

                  Q_rsqrt PROC
;;;22     /*====================================================================================================*/
;;;23     float Q_rsqrt(float number)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;24     {
000004  4604              MOV      r4,r0
;;;25     	long i;
;;;26     	float x2, y;
;;;27     	const float threehalfs = 1.5F;
000006  f04f597f          MOV      r9,#0x3fc00000
;;;28      
;;;29     	x2 = number * 0.5F;
00000a  f04f517c          MOV      r1,#0x3f000000
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       __aeabi_fmul
000014  4682              MOV      r10,r0
;;;30     	y  = number;
000016  4625              MOV      r5,r4
;;;31     	i  = * ( long * ) &y;                      
000018  462e              MOV      r6,r5
;;;32     	i  = 0x5f3759df - ( i >> 1 );               
00001a  480c              LDR      r0,|L2.76|
00001c  eba00666          SUB      r6,r0,r6,ASR #1
;;;33     	y  = * ( float * ) &i;
000020  4635              MOV      r5,r6
;;;34     	y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration （第一次牛顿迭代）
000022  4629              MOV      r1,r5
000024  4650              MOV      r0,r10
000026  f7fffffe          BL       __aeabi_fmul
00002a  4683              MOV      r11,r0
00002c  4629              MOV      r1,r5
00002e  f7fffffe          BL       __aeabi_fmul
000032  4680              MOV      r8,r0
000034  4649              MOV      r1,r9
000036  f7fffffe          BL       __aeabi_frsub
00003a  4607              MOV      r7,r0
00003c  4629              MOV      r1,r5
00003e  f7fffffe          BL       __aeabi_fmul
000042  4605              MOV      r5,r0
;;;35     	return y;
000044  4628              MOV      r0,r5
;;;36     } 
000046  e8bd9ff0          POP      {r4-r12,pc}
;;;37     
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
                          DCD      0x5f3759df

                          AREA ||i.Rad||, CODE, READONLY, ALIGN=2

                  ||Rad|| PROC
;;;115    *******************************************************************************/
;;;116    double Rad(double angle)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;117    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;118        return (angle * M_PI / 180.0);
000008  f04f42c0          MOV      r2,#0x60000000
00000c  4b05              LDR      r3,|L3.36|
00000e  4620              MOV      r0,r4
000010  4629              MOV      r1,r5
000012  f7fffffe          BL       __aeabi_dmul
000016  4606              MOV      r6,r0
000018  2200              MOVS     r2,#0
00001a  4b03              LDR      r3,|L3.40|
00001c  f7fffffe          BL       __aeabi_ddiv
;;;119    }
000020  e8bd81f0          POP      {r4-r8,pc}
;;;120    /**************************实现函数********************************************
                          ENDP

                  |L3.36|
                          DCD      0x400921fb
                  |L3.40|
                          DCD      0x40668000

                          AREA ||i.VariableParameter||, CODE, READONLY, ALIGN=2

                  VariableParameter PROC
;;;90     ************************************************/
;;;91     float VariableParameter(float error)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;92     {
000004  4682              MOV      r10,r0
;;;93     	float  result = 0;
000006  f04f0b00          MOV      r11,#0
;;;94     	
;;;95     	if(error < 0)
00000a  2100              MOVS     r1,#0
00000c  4650              MOV      r0,r10
00000e  f7fffffe          BL       __aeabi_cfcmple
000012  d201              BCS      |L4.24|
;;;96     	{
;;;97     	   error = -error;
000014  f08a4a00          EOR      r10,r10,#0x80000000
                  |L4.24|
;;;98     	}
;;;99       if(error >0.6f)
000018  4910              LDR      r1,|L4.92|
00001a  4650              MOV      r0,r10
00001c  f7fffffe          BL       __aeabi_cfrcmple
000020  d201              BCS      |L4.38|
;;;100    	{
;;;101    	   error = 0.6f;
000022  f8dfa038          LDR      r10,|L4.92|
                  |L4.38|
;;;102    	}
;;;103    	result = 1 - 1.667 * error;
000026  4650              MOV      r0,r10
000028  f7fffffe          BL       __aeabi_f2d
00002c  4680              MOV      r8,r0
00002e  4a0c              LDR      r2,|L4.96|
000030  4b0c              LDR      r3,|L4.100|
000032  f7fffffe          BL       __aeabi_dmul
000036  4606              MOV      r6,r0
000038  2200              MOVS     r2,#0
00003a  4b0b              LDR      r3,|L4.104|
00003c  f7fffffe          BL       __aeabi_drsub
000040  4604              MOV      r4,r0
000042  f7fffffe          BL       __aeabi_d2f
000046  4683              MOV      r11,r0
;;;104    	if(result < 0)
000048  2100              MOVS     r1,#0
00004a  4658              MOV      r0,r11
00004c  f7fffffe          BL       __aeabi_cfcmple
000050  d201              BCS      |L4.86|
;;;105    	{
;;;106    	   result = 0;
000052  f04f0b00          MOV      r11,#0
                  |L4.86|
;;;107    	}
;;;108    	return result;
000056  4658              MOV      r0,r11
;;;109    }
000058  e8bd9ff0          POP      {r4-r12,pc}
;;;110    /**************************实现函数********************************************
                          ENDP

                  |L4.92|
                          DCD      0x3f19999a
                  |L4.96|
                          DCD      0x3126e979
                  |L4.100|
                          DCD      0x3ffaac08
                  |L4.104|
                          DCD      0x3ff00000

                          AREA ||i.applyDeadband||, CODE, READONLY, ALIGN=1

                  applyDeadband PROC
;;;142    
;;;143    void applyDeadband(double value,double deadband)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;144    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;145      if((value  < deadband) && value > -deadband) 
00000c  4632              MOV      r2,r6
00000e  463b              MOV      r3,r7
000010  4620              MOV      r0,r4
000012  4629              MOV      r1,r5
000014  f7fffffe          BL       __aeabi_cdcmple
000018  d20b              BCS      |L5.50|
00001a  f0874100          EOR      r1,r7,#0x80000000
00001e  46b0              MOV      r8,r6
000020  4622              MOV      r2,r4
000022  462b              MOV      r3,r5
000024  4640              MOV      r0,r8
000026  f7fffffe          BL       __aeabi_cdcmple
00002a  d202              BCS      |L5.50|
;;;146      { value = 0;} 
00002c  2400              MOVS     r4,#0
00002e  4625              MOV      r5,r4
000030  e01e              B        |L5.112|
                  |L5.50|
;;;147      else if(value > 0)
000032  2200              MOVS     r2,#0
000034  4613              MOV      r3,r2
000036  4620              MOV      r0,r4
000038  4629              MOV      r1,r5
00003a  f7fffffe          BL       __aeabi_cdrcmple
00003e  d208              BCS      |L5.82|
;;;148            {value -= deadband;
000040  4632              MOV      r2,r6
000042  463b              MOV      r3,r7
000044  4620              MOV      r0,r4
000046  4629              MOV      r1,r5
000048  f7fffffe          BL       __aeabi_dsub
00004c  4604              MOV      r4,r0
00004e  460d              MOV      r5,r1
000050  e00e              B        |L5.112|
                  |L5.82|
;;;149            } else if(value < 0)
000052  2200              MOVS     r2,#0
000054  4613              MOV      r3,r2
000056  4620              MOV      r0,r4
000058  4629              MOV      r1,r5
00005a  f7fffffe          BL       __aeabi_cdcmple
00005e  d207              BCS      |L5.112|
;;;150                    {
;;;151                     value += deadband;
000060  4632              MOV      r2,r6
000062  463b              MOV      r3,r7
000064  4620              MOV      r0,r4
000066  4629              MOV      r1,r5
000068  f7fffffe          BL       __aeabi_dadd
00006c  4604              MOV      r4,r0
00006e  460d              MOV      r5,r1
                  |L5.112|
;;;152                    }
;;;153    }
000070  e8bd87f0          POP      {r4-r10,pc}
                          ENDP


                          AREA ||i.array_assign||, CODE, READONLY, ALIGN=1

                  array_assign PROC
;;;61     *******************************************************************************/
;;;62     void array_assign(u16 *array,s16 value,u16 length)
000000  b510              PUSH     {r4,lr}
;;;63     {
000002  4603              MOV      r3,r0
;;;64        for(uint16_t i=0;i<length;i++)
000004  2000              MOVS     r0,#0
000006  e003              B        |L6.16|
                  |L6.8|
;;;65        {
;;;66          *(array+i) = value;
000008  f8231010          STRH     r1,[r3,r0,LSL #1]
00000c  1c44              ADDS     r4,r0,#1              ;64
00000e  b2a0              UXTH     r0,r4                 ;64
                  |L6.16|
000010  4290              CMP      r0,r2                 ;64
000012  dbf9              BLT      |L6.8|
;;;67        } 
;;;68     }
000014  bd10              POP      {r4,pc}
;;;69     
                          ENDP


                          AREA ||i.array_astrict||, CODE, READONLY, ALIGN=1

                  array_astrict PROC
;;;44     *******************************************************************************/
;;;45     void array_astrict(s16 *array,s16 lower,s16 upper)
000000  b530              PUSH     {r4,r5,lr}
;;;46     {
000002  4603              MOV      r3,r0
;;;47        s16 length = sizeof(array); 
000004  2404              MOVS     r4,#4
;;;48        for(uint16_t i=0;i<length;i++)
000006  2000              MOVS     r0,#0
000008  e00e              B        |L7.40|
                  |L7.10|
;;;49        {
;;;50          if(*(array+i)<lower)  *(array+i) = lower;
00000a  f9335010          LDRSH    r5,[r3,r0,LSL #1]
00000e  428d              CMP      r5,r1
000010  da02              BGE      |L7.24|
000012  f8231010          STRH     r1,[r3,r0,LSL #1]
000016  e005              B        |L7.36|
                  |L7.24|
;;;51          else if(*(array+i)>upper)  *(array+i) = upper;
000018  f9335010          LDRSH    r5,[r3,r0,LSL #1]
00001c  4295              CMP      r5,r2
00001e  dd01              BLE      |L7.36|
000020  f8232010          STRH     r2,[r3,r0,LSL #1]
                  |L7.36|
000024  1c45              ADDS     r5,r0,#1              ;48
000026  b2a8              UXTH     r0,r5                 ;48
                  |L7.40|
000028  42a0              CMP      r0,r4                 ;48
00002a  dbee              BLT      |L7.10|
;;;52        } 
;;;53     }
00002c  bd30              POP      {r4,r5,pc}
;;;54     
                          ENDP


                          AREA ||i.constrain||, CODE, READONLY, ALIGN=1

                  constrain PROC
;;;130    
;;;131    double constrain(double inputvalue, double limitmin, double limitmax)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;132    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9dd8908          LDRD     r8,r9,[sp,#0x20]
;;;133        if (inputvalue>limitmax) {
000010  4642              MOV      r2,r8
000012  464b              MOV      r3,r9
000014  4620              MOV      r0,r4
000016  4629              MOV      r1,r5
000018  f7fffffe          BL       __aeabi_cdrcmple
00001c  d202              BCS      |L8.36|
;;;134            inputvalue=limitmax;
00001e  4644              MOV      r4,r8
000020  464d              MOV      r5,r9
000022  e008              B        |L8.54|
                  |L8.36|
;;;135        }
;;;136        else
;;;137        if (inputvalue<limitmin) {
000024  4632              MOV      r2,r6
000026  463b              MOV      r3,r7
000028  4620              MOV      r0,r4
00002a  4629              MOV      r1,r5
00002c  f7fffffe          BL       __aeabi_cdcmple
000030  d201              BCS      |L8.54|
;;;138            inputvalue=limitmin;
000032  4634              MOV      r4,r6
000034  463d              MOV      r5,r7
                  |L8.54|
;;;139        }
;;;140    		return inputvalue;
000036  4620              MOV      r0,r4
000038  4629              MOV      r1,r5
;;;141    }
00003a  e8bd87f0          POP      {r4-r10,pc}
;;;142    
                          ENDP


                          AREA ||i.data_limit||, CODE, READONLY, ALIGN=1

                  data_limit PROC
;;;77     *******************************************************************************/
;;;78     float data_limit(float data,float toplimit,float lowerlimit)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;80       if(data > toplimit)  data = toplimit;
000008  4629              MOV      r1,r5
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       __aeabi_cfrcmple
000010  d201              BCS      |L9.22|
000012  462e              MOV      r6,r5
000014  e005              B        |L9.34|
                  |L9.22|
;;;81       else if(data < lowerlimit) data = lowerlimit;
000016  4621              MOV      r1,r4
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       __aeabi_cfcmple
00001e  d200              BCS      |L9.34|
000020  4626              MOV      r6,r4
                  |L9.34|
;;;82     	return data;
000022  4630              MOV      r0,r6
;;;83     }
000024  bd70              POP      {r4-r6,pc}
;;;84     
                          ENDP

