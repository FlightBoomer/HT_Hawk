; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\multirotor_control.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\multirotor_control.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\GPS -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Heigh -IC:\__Electronic_Projects\STM32\HT_Hawk_0528_1\Project\MDK-ARM(uV5)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\multirotor_control.crf ..\..\User\Function\MultiRotor_control\MultiRotor_control.c]
                          THUMB

                          AREA ||i.Attitude_RatePID||, CODE, READONLY, ALIGN=2

                  Attitude_RatePID PROC
;;;123    /*====================================================================================================*/
;;;124    void Attitude_RatePID(void)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;125    {
;;;126      fp32 E_pitch,E_roll,E_yaw;
;;;127    	
;;;128    	// 计算偏差  
;;;129    	E_pitch = ctrl.pitch.shell.pid_out - sensor.gyro.averag.y;
000004  4a9a              LDR      r2,|L1.624|
000006  6c11              LDR      r1,[r2,#0x40]
000008  4a9a              LDR      r2,|L1.628|
00000a  6a50              LDR      r0,[r2,#0x24]
00000c  f7fffffe          BL       __aeabi_fsub
000010  9002              STR      r0,[sp,#8]
;;;130    	E_roll  = ctrl.roll.shell.pid_out  - sensor.gyro.averag.x;
000012  4a97              LDR      r2,|L1.624|
000014  6bd1              LDR      r1,[r2,#0x3c]
000016  4a97              LDR      r2,|L1.628|
000018  6ed0              LDR      r0,[r2,#0x6c]
00001a  f7fffffe          BL       __aeabi_fsub
00001e  9001              STR      r0,[sp,#4]
;;;131    	E_yaw   = ctrl.yaw.shell.pid_out   - sensor.gyro.averag.z;
000020  4a93              LDR      r2,|L1.624|
000022  6c51              LDR      r1,[r2,#0x44]
000024  4a93              LDR      r2,|L1.628|
000026  f8d200b4          LDR      r0,[r2,#0xb4]
00002a  f7fffffe          BL       __aeabi_fsub
00002e  9000              STR      r0,[sp,#0]
;;;132    	
;;;133    	// 积分
;;;134    	ctrl.pitch.core.increment += E_pitch;
000030  4990              LDR      r1,|L1.628|
000032  6b48              LDR      r0,[r1,#0x34]
000034  9902              LDR      r1,[sp,#8]
000036  f7fffffe          BL       __aeabi_fadd
00003a  4601              MOV      r1,r0
00003c  488d              LDR      r0,|L1.628|
00003e  6341              STR      r1,[r0,#0x34]
;;;135    	ctrl.roll.core.increment  += E_roll;
000040  4601              MOV      r1,r0
000042  6fc8              LDR      r0,[r1,#0x7c]
000044  9901              LDR      r1,[sp,#4]
000046  f7fffffe          BL       __aeabi_fadd
00004a  4601              MOV      r1,r0
00004c  4889              LDR      r0,|L1.628|
00004e  67c1              STR      r1,[r0,#0x7c]
;;;136    	ctrl.yaw.core.increment   += E_yaw;
000050  4601              MOV      r1,r0
000052  f8d100c4          LDR      r0,[r1,#0xc4]
000056  9900              LDR      r1,[sp,#0]
000058  f7fffffe          BL       __aeabi_fadd
00005c  4601              MOV      r1,r0
00005e  4885              LDR      r0,|L1.628|
000060  f8c010c4          STR      r1,[r0,#0xc4]
;;;137    	
;;;138    	// 积分限幅
;;;139    	ctrl.pitch.core.increment = data_limit(ctrl.pitch.core.increment,20,-20);
000064  4601              MOV      r1,r0
000066  4a84              LDR      r2,|L1.632|
000068  6b48              LDR      r0,[r1,#0x34]
00006a  4984              LDR      r1,|L1.636|
00006c  f7fffffe          BL       data_limit
000070  4601              MOV      r1,r0
000072  4880              LDR      r0,|L1.628|
000074  6341              STR      r1,[r0,#0x34]
;;;140    	ctrl.roll.core.increment  = data_limit(ctrl.roll.core.increment,20,-20);		
000076  4601              MOV      r1,r0
000078  4a7f              LDR      r2,|L1.632|
00007a  6fc8              LDR      r0,[r1,#0x7c]
00007c  497f              LDR      r1,|L1.636|
00007e  f7fffffe          BL       data_limit
000082  4601              MOV      r1,r0
000084  487b              LDR      r0,|L1.628|
000086  67c1              STR      r1,[r0,#0x7c]
;;;141    	ctrl.yaw.core.increment   = data_limit(ctrl.yaw.core.increment,20,-20);
000088  4601              MOV      r1,r0
00008a  4a7b              LDR      r2,|L1.632|
00008c  f8d100c4          LDR      r0,[r1,#0xc4]
000090  497a              LDR      r1,|L1.636|
000092  f7fffffe          BL       data_limit
000096  4601              MOV      r1,r0
000098  4876              LDR      r0,|L1.628|
00009a  f8c010c4          STR      r1,[r0,#0xc4]
;;;142    	
;;;143    	ctrl.pitch.core.kp_out = ctrl.pitch.core.kp * E_pitch;
00009e  4601              MOV      r1,r0
0000a0  6a88              LDR      r0,[r1,#0x28]
0000a2  9902              LDR      r1,[sp,#8]
0000a4  f7fffffe          BL       __aeabi_fmul
0000a8  4601              MOV      r1,r0
0000aa  4872              LDR      r0,|L1.628|
0000ac  63c1              STR      r1,[r0,#0x3c]
;;;144    	ctrl.roll.core.kp_out  = ctrl.roll.core.kp  * E_roll;
0000ae  4601              MOV      r1,r0
0000b0  6f08              LDR      r0,[r1,#0x70]
0000b2  9901              LDR      r1,[sp,#4]
0000b4  f7fffffe          BL       __aeabi_fmul
0000b8  4601              MOV      r1,r0
0000ba  486e              LDR      r0,|L1.628|
0000bc  f8c01084          STR      r1,[r0,#0x84]
;;;145    	ctrl.yaw.core.kp_out   = ctrl.yaw.core.kp   * E_yaw;
0000c0  4601              MOV      r1,r0
0000c2  f8d100b8          LDR      r0,[r1,#0xb8]
0000c6  9900              LDR      r1,[sp,#0]
0000c8  f7fffffe          BL       __aeabi_fmul
0000cc  4601              MOV      r1,r0
0000ce  4869              LDR      r0,|L1.628|
0000d0  f8c010cc          STR      r1,[r0,#0xcc]
;;;146    	
;;;147    	ctrl.pitch.core.ki_out = ctrl.pitch.core.ki * ctrl.pitch.core.increment;
0000d4  4602              MOV      r2,r0
0000d6  6b51              LDR      r1,[r2,#0x34]
0000d8  6ad0              LDR      r0,[r2,#0x2c]
0000da  f7fffffe          BL       __aeabi_fmul
0000de  4601              MOV      r1,r0
0000e0  4864              LDR      r0,|L1.628|
0000e2  6401              STR      r1,[r0,#0x40]
;;;148      ctrl.roll.core.ki_out  = ctrl.roll.core.ki  * ctrl.roll.core.increment;
0000e4  4602              MOV      r2,r0
0000e6  6fd1              LDR      r1,[r2,#0x7c]
0000e8  6f50              LDR      r0,[r2,#0x74]
0000ea  f7fffffe          BL       __aeabi_fmul
0000ee  4601              MOV      r1,r0
0000f0  4860              LDR      r0,|L1.628|
0000f2  f8c01088          STR      r1,[r0,#0x88]
;;;149    	ctrl.yaw.core.ki_out   = ctrl.yaw.core.ki   * ctrl.yaw.core.increment;
0000f6  4602              MOV      r2,r0
0000f8  f8d210c4          LDR      r1,[r2,#0xc4]
0000fc  f8d200bc          LDR      r0,[r2,#0xbc]
000100  f7fffffe          BL       __aeabi_fmul
000104  4601              MOV      r1,r0
000106  485b              LDR      r0,|L1.628|
000108  f8c010d0          STR      r1,[r0,#0xd0]
;;;150    	
;;;151    	// 微分
;;;152    	ctrl.pitch.core.kd_out = ctrl.pitch.core.kd * (sensor.gyro.histor.y - sensor.gyro.averag.y)*33;
00010c  4a58              LDR      r2,|L1.624|
00010e  6c11              LDR      r1,[r2,#0x40]
000110  6cd0              LDR      r0,[r2,#0x4c]
000112  f7fffffe          BL       __aeabi_fsub
000116  4605              MOV      r5,r0
000118  4856              LDR      r0,|L1.628|
00011a  6b01              LDR      r1,[r0,#0x30]
00011c  4628              MOV      r0,r5
00011e  f7fffffe          BL       __aeabi_fmul
000122  4604              MOV      r4,r0
000124  4956              LDR      r1,|L1.640|
000126  f7fffffe          BL       __aeabi_fmul
00012a  4601              MOV      r1,r0
00012c  4851              LDR      r0,|L1.628|
00012e  6441              STR      r1,[r0,#0x44]
;;;153    	ctrl.roll.core.kd_out  = ctrl.roll.core.kd  * (sensor.gyro.histor.x - sensor.gyro.averag.x)*33;
000130  4a4f              LDR      r2,|L1.624|
000132  6bd1              LDR      r1,[r2,#0x3c]
000134  6c90              LDR      r0,[r2,#0x48]
000136  f7fffffe          BL       __aeabi_fsub
00013a  4605              MOV      r5,r0
00013c  484d              LDR      r0,|L1.628|
00013e  6f81              LDR      r1,[r0,#0x78]
000140  4628              MOV      r0,r5
000142  f7fffffe          BL       __aeabi_fmul
000146  4604              MOV      r4,r0
000148  494d              LDR      r1,|L1.640|
00014a  f7fffffe          BL       __aeabi_fmul
00014e  4601              MOV      r1,r0
000150  4848              LDR      r0,|L1.628|
000152  f8c0108c          STR      r1,[r0,#0x8c]
;;;154    	ctrl.yaw.core.kd_out   = ctrl.yaw.core.kd   * (sensor.gyro.histor.z - sensor.gyro.averag.z)*33;	
000156  4a46              LDR      r2,|L1.624|
000158  6c51              LDR      r1,[r2,#0x44]
00015a  6d10              LDR      r0,[r2,#0x50]
00015c  f7fffffe          BL       __aeabi_fsub
000160  4605              MOV      r5,r0
000162  4844              LDR      r0,|L1.628|
000164  f8d010c0          LDR      r1,[r0,#0xc0]
000168  4628              MOV      r0,r5
00016a  f7fffffe          BL       __aeabi_fmul
00016e  4604              MOV      r4,r0
000170  4943              LDR      r1,|L1.640|
000172  f7fffffe          BL       __aeabi_fmul
000176  4601              MOV      r1,r0
000178  483e              LDR      r0,|L1.628|
00017a  f8c010d4          STR      r1,[r0,#0xd4]
;;;155    	
;;;156    	sensor.gyro.histor.y = sensor.gyro.averag.y;
00017e  483c              LDR      r0,|L1.624|
000180  6c01              LDR      r1,[r0,#0x40]
000182  64c1              STR      r1,[r0,#0x4c]
;;;157    	sensor.gyro.histor.x = sensor.gyro.averag.x; 
000184  6bc1              LDR      r1,[r0,#0x3c]
000186  6481              STR      r1,[r0,#0x48]
;;;158      sensor.gyro.histor.z = sensor.gyro.averag.z;	
000188  6c41              LDR      r1,[r0,#0x44]
00018a  6501              STR      r1,[r0,#0x50]
;;;159    	
;;;160    	ctrl.pitch.core.pid_out = ctrl.pitch.core.kp_out + ctrl.pitch.core.ki_out + ctrl.pitch.core.kd_out;
00018c  4a39              LDR      r2,|L1.628|
00018e  6c11              LDR      r1,[r2,#0x40]
000190  6bd0              LDR      r0,[r2,#0x3c]
000192  f7fffffe          BL       __aeabi_fadd
000196  4604              MOV      r4,r0
000198  4836              LDR      r0,|L1.628|
00019a  6c41              LDR      r1,[r0,#0x44]
00019c  4620              MOV      r0,r4
00019e  f7fffffe          BL       __aeabi_fadd
0001a2  4601              MOV      r1,r0
0001a4  4833              LDR      r0,|L1.628|
0001a6  6481              STR      r1,[r0,#0x48]
;;;161    	ctrl.roll.core.pid_out  = ctrl.roll.core.kp_out  + ctrl.roll.core.ki_out  + ctrl.roll.core.kd_out;
0001a8  4602              MOV      r2,r0
0001aa  f8d21088          LDR      r1,[r2,#0x88]
0001ae  f8d20084          LDR      r0,[r2,#0x84]
0001b2  f7fffffe          BL       __aeabi_fadd
0001b6  4604              MOV      r4,r0
0001b8  482e              LDR      r0,|L1.628|
0001ba  f8d0108c          LDR      r1,[r0,#0x8c]
0001be  4620              MOV      r0,r4
0001c0  f7fffffe          BL       __aeabi_fadd
0001c4  4601              MOV      r1,r0
0001c6  482b              LDR      r0,|L1.628|
0001c8  f8c01090          STR      r1,[r0,#0x90]
;;;162    	ctrl.yaw.core.pid_out   = ctrl.yaw.core.kp_out   + ctrl.yaw.core.kd_out;
0001cc  4602              MOV      r2,r0
0001ce  f8d210d4          LDR      r1,[r2,#0xd4]
0001d2  f8d200cc          LDR      r0,[r2,#0xcc]
0001d6  f7fffffe          BL       __aeabi_fadd
0001da  4601              MOV      r1,r0
0001dc  4825              LDR      r0,|L1.628|
0001de  f8c010d8          STR      r1,[r0,#0xd8]
;;;163    	
;;;164    	ctrl.pitch.core.pid_out = ctrl.pitch.core.pid_out*0.8 + ctrl.pitch.shell.pid_out/2;
0001e2  4601              MOV      r1,r0
0001e4  6a48              LDR      r0,[r1,#0x24]
0001e6  f04f4180          MOV      r1,#0x40000000
0001ea  f7fffffe          BL       __aeabi_fdiv
0001ee  4682              MOV      r10,r0
0001f0  f7fffffe          BL       __aeabi_f2d
0001f4  4606              MOV      r6,r0
0001f6  460f              MOV      r7,r1
0001f8  491e              LDR      r1,|L1.628|
0001fa  6c88              LDR      r0,[r1,#0x48]
0001fc  f7fffffe          BL       __aeabi_f2d
000200  4682              MOV      r10,r0
000202  4a20              LDR      r2,|L1.644|
000204  4b20              LDR      r3,|L1.648|
000206  f7fffffe          BL       __aeabi_dmul
00020a  4680              MOV      r8,r0
00020c  4632              MOV      r2,r6
00020e  463b              MOV      r3,r7
000210  f7fffffe          BL       __aeabi_dadd
000214  4604              MOV      r4,r0
000216  f7fffffe          BL       __aeabi_d2f
00021a  4601              MOV      r1,r0
00021c  4815              LDR      r0,|L1.628|
00021e  6481              STR      r1,[r0,#0x48]
;;;165    	ctrl.roll.core.pid_out  = ctrl.roll.core.pid_out *0.8 + ctrl.roll.shell.pid_out/2; 
000220  4601              MOV      r1,r0
000222  6ec8              LDR      r0,[r1,#0x6c]
000224  f04f4180          MOV      r1,#0x40000000
000228  f7fffffe          BL       __aeabi_fdiv
00022c  4680              MOV      r8,r0
00022e  f7fffffe          BL       __aeabi_f2d
000232  4604              MOV      r4,r0
000234  460d              MOV      r5,r1
000236  490f              LDR      r1,|L1.628|
000238  f8d10090          LDR      r0,[r1,#0x90]
00023c  f7fffffe          BL       __aeabi_f2d
000240  4680              MOV      r8,r0
000242  4a10              LDR      r2,|L1.644|
000244  4b10              LDR      r3,|L1.648|
000246  f7fffffe          BL       __aeabi_dmul
00024a  4606              MOV      r6,r0
00024c  4622              MOV      r2,r4
00024e  462b              MOV      r3,r5
000250  f7fffffe          BL       __aeabi_dadd
000254  4682              MOV      r10,r0
000256  f7fffffe          BL       __aeabi_d2f
00025a  4601              MOV      r1,r0
00025c  4805              LDR      r0,|L1.628|
00025e  f8c01090          STR      r1,[r0,#0x90]
;;;166    	ctrl.yaw.core.pid_out   = ctrl.yaw.core.pid_out;
000262  f8d010d8          LDR      r1,[r0,#0xd8]
000266  f8c010d8          STR      r1,[r0,#0xd8]
;;;167    
;;;168    }
00026a  e8bd8ffe          POP      {r1-r11,pc}
;;;169    /*====================================================================================================*/
                          ENDP

00026e  0000              DCW      0x0000
                  |L1.624|
                          DCD      sensor
                  |L1.628|
                          DCD      ctrl
                  |L1.632|
                          DCD      0xc1a00000
                  |L1.636|
                          DCD      0x41a00000
                  |L1.640|
                          DCD      0x42040000
                  |L1.644|
                          DCD      0x9999999a
                  |L1.648|
                          DCD      0x3fe99999

                          AREA ||i.CONTROL||, CODE, READONLY, ALIGN=2

                  CONTROL PROC
;;;73     /*====================================================================================================*/
;;;74     void CONTROL(struct _target Goal)   
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;75     {
;;;76     	float  deviation_pitch,deviation_roll,deviation_yaw;
;;;77     	
;;;78     	if(ctrl.ctrlRate >= 2)
000004  4860              LDR      r0,|L2.392|
000006  7800              LDRB     r0,[r0,#0]  ; ctrl
000008  2802              CMP      r0,#2
00000a  db7d              BLT      |L2.264|
;;;79     	{		//*****************外环(角度环)PID**************************//
;;;81     		//横滚计算///////////////
;;;82     	  deviation_pitch = Goal.Pitch - IMU.Pitch;
00000c  4a5f              LDR      r2,|L2.396|
00000e  6811              LDR      r1,[r2,#0]  ; IMU
000010  9800              LDR      r0,[sp,#0]
000012  f7fffffe          BL       __aeabi_fsub
000016  4606              MOV      r6,r0
;;;83     		ctrl.pitch.shell.increment += deviation_pitch;
000018  495b              LDR      r1,|L2.392|
00001a  6908              LDR      r0,[r1,#0x10]
00001c  4631              MOV      r1,r6
00001e  f7fffffe          BL       __aeabi_fadd
000022  4959              LDR      r1,|L2.392|
000024  6108              STR      r0,[r1,#0x10]
;;;84     		
;;;85     		//limit for the max increment
;;;86     		ctrl.pitch.shell.increment = data_limit(ctrl.pitch.shell.increment,ctrl.pitch.shell.increment_max,-ctrl.pitch.shell.increment_max);
000026  4608              MOV      r0,r1
000028  6940              LDR      r0,[r0,#0x14]
00002a  f0804500          EOR      r5,r0,#0x80000000
00002e  460a              MOV      r2,r1
000030  6951              LDR      r1,[r2,#0x14]
000032  6910              LDR      r0,[r2,#0x10]
000034  462a              MOV      r2,r5
000036  f7fffffe          BL       data_limit
00003a  4953              LDR      r1,|L2.392|
00003c  6108              STR      r0,[r1,#0x10]
;;;87     
;;;88     		ctrl.pitch.shell.pid_out = ctrl.pitch.shell.kp * deviation_pitch + ctrl.pitch.shell.ki * ctrl.pitch.shell.increment;
00003e  460a              MOV      r2,r1
000040  6911              LDR      r1,[r2,#0x10]
000042  6890              LDR      r0,[r2,#8]
000044  f7fffffe          BL       __aeabi_fmul
000048  4605              MOV      r5,r0
00004a  494f              LDR      r1,|L2.392|
00004c  6848              LDR      r0,[r1,#4]  ; ctrl
00004e  4631              MOV      r1,r6
000050  f7fffffe          BL       __aeabi_fmul
000054  4680              MOV      r8,r0
000056  4629              MOV      r1,r5
000058  f7fffffe          BL       __aeabi_fadd
00005c  494a              LDR      r1,|L2.392|
00005e  6248              STR      r0,[r1,#0x24]
;;;89     		
;;;90     		//俯仰计算//////////////
;;;91     		deviation_roll = Goal.Roll - IMU.Roll;
000060  4a4a              LDR      r2,|L2.396|
000062  6851              LDR      r1,[r2,#4]  ; IMU
000064  9801              LDR      r0,[sp,#4]
000066  f7fffffe          BL       __aeabi_fsub
00006a  4607              MOV      r7,r0
;;;92     		ctrl.roll.shell.increment += deviation_roll;
00006c  4946              LDR      r1,|L2.392|
00006e  6d88              LDR      r0,[r1,#0x58]
000070  4639              MOV      r1,r7
000072  f7fffffe          BL       __aeabi_fadd
000076  4944              LDR      r1,|L2.392|
000078  6588              STR      r0,[r1,#0x58]
;;;93     		
;;;94     		//limit for the max increment
;;;95     		ctrl.roll.shell.increment = data_limit(ctrl.roll.shell.increment,ctrl.roll.shell.increment_max,-ctrl.roll.shell.increment_max);
00007a  4608              MOV      r0,r1
00007c  6dc0              LDR      r0,[r0,#0x5c]
00007e  f0804500          EOR      r5,r0,#0x80000000
000082  460a              MOV      r2,r1
000084  6dd1              LDR      r1,[r2,#0x5c]
000086  6d90              LDR      r0,[r2,#0x58]
000088  462a              MOV      r2,r5
00008a  f7fffffe          BL       data_limit
00008e  493e              LDR      r1,|L2.392|
000090  6588              STR      r0,[r1,#0x58]
;;;96     
;;;97     		ctrl.roll.shell.pid_out  = ctrl.roll.shell.kp * deviation_roll + ctrl.roll.shell.ki * ctrl.roll.shell.increment;
000092  460a              MOV      r2,r1
000094  6d91              LDR      r1,[r2,#0x58]
000096  6d10              LDR      r0,[r2,#0x50]
000098  f7fffffe          BL       __aeabi_fmul
00009c  4605              MOV      r5,r0
00009e  493a              LDR      r1,|L2.392|
0000a0  6cc8              LDR      r0,[r1,#0x4c]  ; ctrl
0000a2  4639              MOV      r1,r7
0000a4  f7fffffe          BL       __aeabi_fmul
0000a8  4680              MOV      r8,r0
0000aa  4629              MOV      r1,r5
0000ac  f7fffffe          BL       __aeabi_fadd
0000b0  4935              LDR      r1,|L2.392|
0000b2  66c8              STR      r0,[r1,#0x6c]
;;;98     		
;;;99     		//航向计算////////////
;;;100        if((Goal.Yaw - IMU.Yaw)>180 || (Goal.Yaw - IMU.Yaw)<-180){
0000b4  4a35              LDR      r2,|L2.396|
0000b6  6891              LDR      r1,[r2,#8]  ; IMU
0000b8  9802              LDR      r0,[sp,#8]
0000ba  f7fffffe          BL       __aeabi_fsub
0000be  4605              MOV      r5,r0
0000c0  4933              LDR      r1,|L2.400|
0000c2  f7fffffe          BL       __aeabi_cfrcmple
0000c6  d309              BCC      |L2.220|
0000c8  4a30              LDR      r2,|L2.396|
0000ca  6891              LDR      r1,[r2,#8]  ; IMU
0000cc  9802              LDR      r0,[sp,#8]
0000ce  f7fffffe          BL       __aeabi_fsub
0000d2  4605              MOV      r5,r0
0000d4  492f              LDR      r1,|L2.404|
0000d6  f7fffffe          BL       __aeabi_cfcmple
0000da  d236              BCS      |L2.330|
                  |L2.220|
;;;101           if(Goal.Yaw>0 && IMU.Yaw<0)  deviation_yaw= (-180 - IMU.Yaw) +(Goal.Yaw - 180);
0000dc  2100              MOVS     r1,#0
0000de  9802              LDR      r0,[sp,#8]
0000e0  f7fffffe          BL       __aeabi_cfrcmple
0000e4  d216              BCS      |L2.276|
0000e6  4929              LDR      r1,|L2.396|
0000e8  6888              LDR      r0,[r1,#8]  ; IMU
0000ea  2100              MOVS     r1,#0
0000ec  f7fffffe          BL       __aeabi_cfcmple
0000f0  d210              BCS      |L2.276|
0000f2  4927              LDR      r1,|L2.400|
0000f4  9802              LDR      r0,[sp,#8]
0000f6  f7fffffe          BL       __aeabi_fsub
0000fa  4605              MOV      r5,r0
0000fc  4823              LDR      r0,|L2.396|
0000fe  6881              LDR      r1,[r0,#8]  ; IMU
000100  4824              LDR      r0,|L2.404|
000102  f7fffffe          BL       __aeabi_fsub
000106  e000              B        |L2.266|
                  |L2.264|
000108  e030              B        |L2.364|
                  |L2.266|
00010a  4680              MOV      r8,r0
00010c  4629              MOV      r1,r5
00010e  f7fffffe          BL       __aeabi_fadd
000112  4604              MOV      r4,r0
                  |L2.276|
;;;102           if(Goal.Yaw<0 && IMU.Yaw>0)  deviation_yaw= (180 - IMU.Yaw) +(Goal.Yaw + 180);
000114  2100              MOVS     r1,#0
000116  9802              LDR      r0,[sp,#8]
000118  f7fffffe          BL       __aeabi_cfcmple
00011c  d21b              BCS      |L2.342|
00011e  491b              LDR      r1,|L2.396|
000120  6888              LDR      r0,[r1,#8]  ; IMU
000122  2100              MOVS     r1,#0
000124  f7fffffe          BL       __aeabi_cfrcmple
000128  d215              BCS      |L2.342|
00012a  4919              LDR      r1,|L2.400|
00012c  9802              LDR      r0,[sp,#8]
00012e  f7fffffe          BL       __aeabi_fadd
000132  4605              MOV      r5,r0
000134  4815              LDR      r0,|L2.396|
000136  6881              LDR      r1,[r0,#8]  ; IMU
000138  4815              LDR      r0,|L2.400|
00013a  f7fffffe          BL       __aeabi_fsub
00013e  4680              MOV      r8,r0
000140  4629              MOV      r1,r5
000142  f7fffffe          BL       __aeabi_fadd
000146  4604              MOV      r4,r0
000148  e005              B        |L2.342|
                  |L2.330|
;;;103        }
;;;104        else  deviation_yaw = Goal.Yaw - IMU.Yaw;
00014a  4a10              LDR      r2,|L2.396|
00014c  6891              LDR      r1,[r2,#8]  ; IMU
00014e  9802              LDR      r0,[sp,#8]
000150  f7fffffe          BL       __aeabi_fsub
000154  4604              MOV      r4,r0
                  |L2.342|
;;;105    		
;;;106    	  ctrl.yaw.shell.pid_out = ctrl.yaw.shell.kp * deviation_yaw;
000156  490c              LDR      r1,|L2.392|
000158  f8d10094          LDR      r0,[r1,#0x94]  ; ctrl
00015c  4621              MOV      r1,r4
00015e  f7fffffe          BL       __aeabi_fmul
000162  4909              LDR      r1,|L2.392|
000164  f8c100b4          STR      r0,[r1,#0xb4]
;;;107        ctrl.ctrlRate = 0; 
000168  2000              MOVS     r0,#0
00016a  7008              STRB     r0,[r1,#0]
                  |L2.364|
;;;108    	}
;;;109    	ctrl.ctrlRate ++;
00016c  4806              LDR      r0,|L2.392|
00016e  7800              LDRB     r0,[r0,#0]  ; ctrl
000170  1c40              ADDS     r0,r0,#1
000172  4905              LDR      r1,|L2.392|
000174  7008              STRB     r0,[r1,#0]
;;;110      Attitude_RatePID();
000176  f7fffffe          BL       Attitude_RatePID
;;;111    	Thr_Ctrl(TT);// 油门控制
00017a  4807              LDR      r0,|L2.408|
00017c  f7fffffe          BL       Thr_Ctrl
;;;112    	Motor_Conter();
000180  f7fffffe          BL       Motor_Conter
;;;113    }
000184  e8bd81ff          POP      {r0-r8,pc}
;;;114    
                          ENDP

                  |L2.392|
                          DCD      ctrl
                  |L2.396|
                          DCD      IMU
                  |L2.400|
                          DCD      0x43340000
                  |L2.404|
                          DCD      0xc3340000
                  |L2.408|
                          DCD      0x3b23d70a

                          AREA ||i.Calculate_Target||, CODE, READONLY, ALIGN=2

                  Calculate_Target PROC
;;;35     /*====================================================================================================*/
;;;36     void Calculate_Target(void) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;37     {
;;;38     	int16_t ftemp=0;
000004  2400              MOVS     r4,#0
;;;39     	Target.Pitch = (1500-RC_Data.PITCH)/(20 + 7*RC_Data.SENSITIVITY);//RC_Data.SENSITIVITY没有被赋值
000006  4841              LDR      r0,|L3.268|
000008  f9b00012          LDRSH    r0,[r0,#0x12]  ; RC_Data
00000c  f24051dc          MOV      r1,#0x5dc
000010  1a09              SUBS     r1,r1,r0
000012  483e              LDR      r0,|L3.268|
000014  f9b00018          LDRSH    r0,[r0,#0x18]  ; RC_Data
000018  ebc000c0          RSB      r0,r0,r0,LSL #3
00001c  3014              ADDS     r0,r0,#0x14
00001e  fb91f5f0          SDIV     r5,r1,r0
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       __aeabi_i2f
000028  4939              LDR      r1,|L3.272|
00002a  6008              STR      r0,[r1,#0]  ; Target
;;;40     	Target.Roll = (RC_Data.ROLL-1500)/(20 + 7*RC_Data.SENSITIVITY);
00002c  4837              LDR      r0,|L3.268|
00002e  f9b00010          LDRSH    r0,[r0,#0x10]  ; RC_Data
000032  f2a050dc          SUB      r0,r0,#0x5dc
000036  4935              LDR      r1,|L3.268|
000038  f9b11018          LDRSH    r1,[r1,#0x18]  ; RC_Data
00003c  ebc101c1          RSB      r1,r1,r1,LSL #3
000040  3114              ADDS     r1,r1,#0x14
000042  fb90f5f1          SDIV     r5,r0,r1
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       __aeabi_i2f
00004c  4930              LDR      r1,|L3.272|
00004e  6048              STR      r0,[r1,#4]  ; Target
;;;41     
;;;42       //目标航向控制。当油门大于最小检查值时，认为用户希望起飞。那么此时的航向做为目标航向
;;;43        if(RC_Data.THROTTLE > RC_MINCHECK ) {
000050  482e              LDR      r0,|L3.268|
000052  f9b00014          LDRSH    r0,[r0,#0x14]  ; RC_Data
000056  f240417e          MOV      r1,#0x47e
00005a  4288              CMP      r0,r1
00005c  dd0b              BLE      |L3.118|
;;;44           if(flag.LockYaw != 1){  
00005e  482d              LDR      r0,|L3.276|
000060  7980              LDRB     r0,[r0,#6]  ; flag
000062  2801              CMP      r0,#1
000064  d00e              BEQ      |L3.132|
;;;45     				 flag.LockYaw = 1;
000066  2001              MOVS     r0,#1
000068  492a              LDR      r1,|L3.276|
00006a  7188              STRB     r0,[r1,#6]
;;;46     	       Target.Yaw = IMU.Yaw; //将当前的航向做为目标航向
00006c  482a              LDR      r0,|L3.280|
00006e  6880              LDR      r0,[r0,#8]  ; IMU
000070  4927              LDR      r1,|L3.272|
000072  6088              STR      r0,[r1,#8]  ; Target
000074  e006              B        |L3.132|
                  |L3.118|
;;;47           }
;;;48        }
;;;49        else {
;;;50     		 flag.LockYaw = 0;	
000076  2000              MOVS     r0,#0
000078  4926              LDR      r1,|L3.276|
00007a  7188              STRB     r0,[r1,#6]
;;;51     		 Target.Yaw = IMU.Yaw;
00007c  4826              LDR      r0,|L3.280|
00007e  6880              LDR      r0,[r0,#8]  ; IMU
000080  4923              LDR      r1,|L3.272|
000082  6088              STR      r0,[r1,#8]  ; Target
                  |L3.132|
;;;52     	 } 
;;;53     	//航向在中点设置一个死区，好处是手操作时忽略小动作
;;;54     	if((RC_Data.YAW > 1530)||(RC_Data.YAW < 1470)){
000084  4821              LDR      r0,|L3.268|
000086  f9b00016          LDRSH    r0,[r0,#0x16]  ; RC_Data
00008a  f24051fa          MOV      r1,#0x5fa
00008e  4288              CMP      r0,r1
000090  dc06              BGT      |L3.160|
000092  481e              LDR      r0,|L3.268|
000094  f9b00016          LDRSH    r0,[r0,#0x16]  ; RC_Data
000098  f24051be          MOV      r1,#0x5be
00009c  4288              CMP      r0,r1
00009e  da32              BGE      |L3.262|
                  |L3.160|
;;;55     		ftemp = 1500 - RC_Data.YAW; 
0000a0  481a              LDR      r0,|L3.268|
0000a2  8ac0              LDRH     r0,[r0,#0x16]  ; RC_Data
0000a4  f24051dc          MOV      r1,#0x5dc
0000a8  1a08              SUBS     r0,r1,r0
0000aa  b204              SXTH     r4,r0
;;;56     	  Target.Yaw += (ftemp / 200.0f)*0.1f; 
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       __aeabi_i2f
0000b2  4607              MOV      r7,r0
0000b4  4919              LDR      r1,|L3.284|
0000b6  f7fffffe          BL       __aeabi_fdiv
0000ba  4606              MOV      r6,r0
0000bc  4918              LDR      r1,|L3.288|
0000be  f7fffffe          BL       __aeabi_fmul
0000c2  4605              MOV      r5,r0
0000c4  4812              LDR      r0,|L3.272|
0000c6  6881              LDR      r1,[r0,#8]  ; Target
0000c8  4628              MOV      r0,r5
0000ca  f7fffffe          BL       __aeabi_fadd
0000ce  4910              LDR      r1,|L3.272|
0000d0  6088              STR      r0,[r1,#8]  ; Target
;;;57     		
;;;58     		//转[-180.0,+180.0]
;;;59     	  if(Target.Yaw >180.0f) Target.Yaw -= 360.0f;	
0000d2  6888              LDR      r0,[r1,#8]  ; Target
0000d4  4913              LDR      r1,|L3.292|
0000d6  f7fffffe          BL       __aeabi_cfrcmple
0000da  d207              BCS      |L3.236|
0000dc  490c              LDR      r1,|L3.272|
0000de  6888              LDR      r0,[r1,#8]  ; Target
0000e0  4911              LDR      r1,|L3.296|
0000e2  f7fffffe          BL       __aeabi_fsub
0000e6  490a              LDR      r1,|L3.272|
0000e8  6088              STR      r0,[r1,#8]  ; Target
0000ea  e00c              B        |L3.262|
                  |L3.236|
;;;60     	  else if(Target.Yaw <-180.0f)Target.Yaw += 360.0f;
0000ec  4908              LDR      r1,|L3.272|
0000ee  6888              LDR      r0,[r1,#8]  ; Target
0000f0  490e              LDR      r1,|L3.300|
0000f2  f7fffffe          BL       __aeabi_cfcmple
0000f6  d206              BCS      |L3.262|
0000f8  4905              LDR      r1,|L3.272|
0000fa  6888              LDR      r0,[r1,#8]  ; Target
0000fc  490a              LDR      r1,|L3.296|
0000fe  f7fffffe          BL       __aeabi_fadd
000102  4903              LDR      r1,|L3.272|
000104  6088              STR      r0,[r1,#8]  ; Target
                  |L3.262|
;;;61     	}
;;;62     		
;;;63     }
000106  e8bd81f0          POP      {r4-r8,pc}
;;;64     
                          ENDP

00010a  0000              DCW      0x0000
                  |L3.268|
                          DCD      RC_Data
                  |L3.272|
                          DCD      Target
                  |L3.276|
                          DCD      flag
                  |L3.280|
                          DCD      IMU
                  |L3.284|
                          DCD      0x43480000
                  |L3.288|
                          DCD      0x3dcccccd
                  |L3.292|
                          DCD      0x43340000
                  |L3.296|
                          DCD      0x43b40000
                  |L3.300|
                          DCD      0xc3340000

                          AREA ||i.Motor_Conter||, CODE, READONLY, ALIGN=2

                  Motor_Conter PROC
;;;177    /*====================================================================================================*/
;;;178    void Motor_Conter(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;179    {
000004  b08b              SUB      sp,sp,#0x2c
;;;180    	s16 pitch,roll,yaw;
;;;181    	
;;;182    		pitch = ctrl.pitch.core.pid_out;
000006  4996              LDR      r1,|L4.608|
000008  6c88              LDR      r0,[r1,#0x48]
00000a  f7fffffe          BL       __aeabi_f2iz
00000e  b204              SXTH     r4,r0
;;;183    		roll  = ctrl.roll.core.pid_out;    
000010  4993              LDR      r1,|L4.608|
000012  f8d10090          LDR      r0,[r1,#0x90]
000016  f7fffffe          BL       __aeabi_f2iz
00001a  fa0ff980          SXTH     r9,r0
;;;184    		yaw   = -ctrl.yaw.core.pid_out;
00001e  4890              LDR      r0,|L4.608|
000020  f8d000d8          LDR      r0,[r0,#0xd8]
000024  f0804500          EOR      r5,r0,#0x80000000
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       __aeabi_f2iz
00002e  fa0ffa80          SXTH     r10,r0
;;;185    	
;;;186      	if(flag.FlightMode==ULTRASONIC_High || flag.FlightMode==AUTO_High || flag.FlightMode==ACC_High  || flag.FlightMode==ATMOSPHERE_High){
000032  488c              LDR      r0,|L4.612|
000034  7cc0              LDRB     r0,[r0,#0x13]  ; flag
000036  2802              CMP      r0,#2
000038  d00b              BEQ      |L4.82|
00003a  488a              LDR      r0,|L4.612|
00003c  7cc0              LDRB     r0,[r0,#0x13]  ; flag
00003e  2804              CMP      r0,#4
000040  d007              BEQ      |L4.82|
000042  4888              LDR      r0,|L4.612|
000044  7cc0              LDRB     r0,[r0,#0x13]  ; flag
000046  2806              CMP      r0,#6
000048  d003              BEQ      |L4.82|
00004a  4886              LDR      r0,|L4.612|
00004c  7cc0              LDRB     r0,[r0,#0x13]  ; flag
00004e  2803              CMP      r0,#3
000050  d17d              BNE      |L4.334|
                  |L4.82|
;;;187    			Moto[0] = thr_value - pitch - roll + yaw;
000052  4650              MOV      r0,r10
000054  f7fffffe          BL       __aeabi_i2f
000058  4680              MOV      r8,r0
00005a  4648              MOV      r0,r9
00005c  f7fffffe          BL       __aeabi_i2f
000060  4683              MOV      r11,r0
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       __aeabi_i2f
000068  9009              STR      r0,[sp,#0x24]
00006a  487f              LDR      r0,|L4.616|
00006c  6801              LDR      r1,[r0,#0]  ; thr_value
00006e  9809              LDR      r0,[sp,#0x24]
000070  f7fffffe          BL       __aeabi_frsub
000074  4607              MOV      r7,r0
000076  4659              MOV      r1,r11
000078  f7fffffe          BL       __aeabi_fsub
00007c  4606              MOV      r6,r0
00007e  4641              MOV      r1,r8
000080  f7fffffe          BL       __aeabi_fadd
000084  4605              MOV      r5,r0
000086  f7fffffe          BL       __aeabi_f2iz
00008a  b200              SXTH     r0,r0
00008c  4977              LDR      r1,|L4.620|
00008e  8008              STRH     r0,[r1,#0]
;;;188    			Moto[1] = thr_value - pitch + roll - yaw;
000090  4650              MOV      r0,r10
000092  f7fffffe          BL       __aeabi_i2f
000096  4680              MOV      r8,r0
000098  4648              MOV      r0,r9
00009a  f7fffffe          BL       __aeabi_i2f
00009e  9009              STR      r0,[sp,#0x24]
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       __aeabi_i2f
0000a6  4683              MOV      r11,r0
0000a8  486f              LDR      r0,|L4.616|
0000aa  6801              LDR      r1,[r0,#0]  ; thr_value
0000ac  4658              MOV      r0,r11
0000ae  f7fffffe          BL       __aeabi_frsub
0000b2  4607              MOV      r7,r0
0000b4  9909              LDR      r1,[sp,#0x24]
0000b6  f7fffffe          BL       __aeabi_fadd
0000ba  4606              MOV      r6,r0
0000bc  4641              MOV      r1,r8
0000be  f7fffffe          BL       __aeabi_fsub
0000c2  4605              MOV      r5,r0
0000c4  f7fffffe          BL       __aeabi_f2iz
0000c8  b200              SXTH     r0,r0
0000ca  4968              LDR      r1,|L4.620|
0000cc  8048              STRH     r0,[r1,#2]
;;;189    			Moto[2] = thr_value + pitch + roll + yaw;
0000ce  4650              MOV      r0,r10
0000d0  f7fffffe          BL       __aeabi_i2f
0000d4  9009              STR      r0,[sp,#0x24]
0000d6  4648              MOV      r0,r9
0000d8  f7fffffe          BL       __aeabi_i2f
0000dc  4680              MOV      r8,r0
0000de  4620              MOV      r0,r4
0000e0  f7fffffe          BL       __aeabi_i2f
0000e4  4683              MOV      r11,r0
0000e6  4860              LDR      r0,|L4.616|
0000e8  6801              LDR      r1,[r0,#0]  ; thr_value
0000ea  4658              MOV      r0,r11
0000ec  f7fffffe          BL       __aeabi_fadd
0000f0  4607              MOV      r7,r0
0000f2  4641              MOV      r1,r8
0000f4  f7fffffe          BL       __aeabi_fadd
0000f8  4606              MOV      r6,r0
0000fa  9909              LDR      r1,[sp,#0x24]
0000fc  f7fffffe          BL       __aeabi_fadd
000100  4605              MOV      r5,r0
000102  f7fffffe          BL       __aeabi_f2iz
000106  b200              SXTH     r0,r0
000108  4958              LDR      r1,|L4.620|
00010a  8088              STRH     r0,[r1,#4]
;;;190    			Moto[3] = thr_value + pitch - roll - yaw;
00010c  4650              MOV      r0,r10
00010e  f7fffffe          BL       __aeabi_i2f
000112  9009              STR      r0,[sp,#0x24]
000114  4648              MOV      r0,r9
000116  f7fffffe          BL       __aeabi_i2f
00011a  4680              MOV      r8,r0
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       __aeabi_i2f
000122  4683              MOV      r11,r0
000124  4850              LDR      r0,|L4.616|
000126  6801              LDR      r1,[r0,#0]  ; thr_value
000128  4658              MOV      r0,r11
00012a  f7fffffe          BL       __aeabi_fadd
00012e  4607              MOV      r7,r0
000130  4641              MOV      r1,r8
000132  f7fffffe          BL       __aeabi_fsub
000136  4606              MOV      r6,r0
000138  9909              LDR      r1,[sp,#0x24]
00013a  f7fffffe          BL       __aeabi_fsub
00013e  4605              MOV      r5,r0
000140  f7fffffe          BL       __aeabi_f2iz
000144  b200              SXTH     r0,r0
000146  4949              LDR      r1,|L4.620|
000148  80c8              STRH     r0,[r1,#6]
00014a  e06a              B        |L4.546|
00014c  e7ff              B        |L4.334|
                  |L4.334|
;;;191        }
;;;192        else	if(RC_Data.THROTTLE > RC_MINCHECK) {
00014e  4848              LDR      r0,|L4.624|
000150  f9b00014          LDRSH    r0,[r0,#0x14]  ; RC_Data
000154  f240417e          MOV      r1,#0x47e
000158  4288              CMP      r0,r1
00015a  dd5b              BLE      |L4.532|
;;;193    		  date_throttle	= (RC_Data.THROTTLE-MINRCVALUE)/cos(IMU.Roll/RtA)/cos(IMU.Pitch/RtA);
00015c  4945              LDR      r1,|L4.628|
00015e  6808              LDR      r0,[r1,#0]  ; IMU
000160  f7fffffe          BL       __aeabi_f2d
000164  4607              MOV      r7,r0
000166  4a44              LDR      r2,|L4.632|
000168  4b44              LDR      r3,|L4.636|
00016a  f7fffffe          BL       __aeabi_ddiv
00016e  4605              MOV      r5,r0
000170  f7fffffe          BL       ||cos||
000174  e9cd0106          STRD     r0,r1,[sp,#0x18]
000178  493e              LDR      r1,|L4.628|
00017a  6848              LDR      r0,[r1,#4]  ; IMU
00017c  f7fffffe          BL       __aeabi_f2d
000180  4a3d              LDR      r2,|L4.632|
000182  4b3e              LDR      r3,|L4.636|
000184  e9cd0100          STRD     r0,r1,[sp,#0]
000188  f7fffffe          BL       __aeabi_ddiv
00018c  e9cd0102          STRD     r0,r1,[sp,#8]
000190  f7fffffe          BL       ||cos||
000194  4605              MOV      r5,r0
000196  460e              MOV      r6,r1
000198  4935              LDR      r1,|L4.624|
00019a  f9b11014          LDRSH    r1,[r1,#0x14]  ; RC_Data
00019e  f2a1404c          SUB      r0,r1,#0x44c
0001a2  f7fffffe          BL       __aeabi_i2d
0001a6  4607              MOV      r7,r0
0001a8  462a              MOV      r2,r5
0001aa  4633              MOV      r3,r6
0001ac  f7fffffe          BL       __aeabi_ddiv
0001b0  e9cd0104          STRD     r0,r1,[sp,#0x10]
0001b4  e9dd2306          LDRD     r2,r3,[sp,#0x18]
0001b8  f7fffffe          BL       __aeabi_ddiv
0001bc  e9cd0108          STRD     r0,r1,[sp,#0x20]
0001c0  f7fffffe          BL       __aeabi_d2iz
0001c4  492e              LDR      r1,|L4.640|
0001c6  6008              STR      r0,[r1,#0]  ; date_throttle
;;;194    		
;;;195    		#ifdef QUADROTOR 
;;;196    			Moto[0] = date_throttle - pitch - roll + yaw + IDLING;
0001c8  4608              MOV      r0,r1
0001ca  8800              LDRH     r0,[r0,#0]  ; date_throttle
0001cc  1b00              SUBS     r0,r0,r4
0001ce  eba00009          SUB      r0,r0,r9
0001d2  4450              ADD      r0,r0,r10
0001d4  30c8              ADDS     r0,r0,#0xc8
0001d6  b200              SXTH     r0,r0
0001d8  4924              LDR      r1,|L4.620|
0001da  8008              STRH     r0,[r1,#0]
;;;197    			Moto[1] = date_throttle - pitch + roll - yaw + IDLING;
0001dc  4828              LDR      r0,|L4.640|
0001de  8800              LDRH     r0,[r0,#0]  ; date_throttle
0001e0  1b00              SUBS     r0,r0,r4
0001e2  4448              ADD      r0,r0,r9
0001e4  eba0000a          SUB      r0,r0,r10
0001e8  30c8              ADDS     r0,r0,#0xc8
0001ea  b200              SXTH     r0,r0
0001ec  8048              STRH     r0,[r1,#2]
;;;198    			Moto[2] = date_throttle + pitch + roll + yaw + IDLING;
0001ee  4824              LDR      r0,|L4.640|
0001f0  8800              LDRH     r0,[r0,#0]  ; date_throttle
0001f2  4420              ADD      r0,r0,r4
0001f4  4448              ADD      r0,r0,r9
0001f6  4450              ADD      r0,r0,r10
0001f8  30c8              ADDS     r0,r0,#0xc8
0001fa  b200              SXTH     r0,r0
0001fc  8088              STRH     r0,[r1,#4]
;;;199    			Moto[3] = date_throttle + pitch - roll - yaw + IDLING;
0001fe  4820              LDR      r0,|L4.640|
000200  8800              LDRH     r0,[r0,#0]  ; date_throttle
000202  4420              ADD      r0,r0,r4
000204  eba00009          SUB      r0,r0,r9
000208  eba0000a          SUB      r0,r0,r10
00020c  30c8              ADDS     r0,r0,#0xc8
00020e  b200              SXTH     r0,r0
000210  80c8              STRH     r0,[r1,#6]
000212  e006              B        |L4.546|
                  |L4.532|
;;;200    		#elif defined HEXACOPTER
;;;201    			Moto[0] = date_throttle - pitch + 0.5*roll - yaw + IDLING;
;;;202    			Moto[1] = date_throttle         +     roll + yaw + IDLING;
;;;203    			Moto[2] = date_throttle + pitch + 0.5*roll - yaw + IDLING;
;;;204    			Moto[3] = date_throttle + pitch - 0.5*roll + yaw + IDLING;	
;;;205    			Moto[4] = date_throttle         -     roll - yaw + IDLING;
;;;206    			Moto[5] = date_throttle - pitch - 0.5*roll + yaw + IDLING;	
;;;207    		#endif 	
;;;208    		}
;;;209    		else
;;;210    		{	
;;;211    			array_assign(&Moto[0],IDLING,MOTOR_NUM);//马达输出200
000214  2204              MOVS     r2,#4
000216  21c8              MOVS     r1,#0xc8
000218  4814              LDR      r0,|L4.620|
00021a  f7fffffe          BL       array_assign
;;;212    			Reset_Integral();//内环pid全部输出置0		
00021e  f7fffffe          BL       Reset_Integral
                  |L4.546|
;;;213    		}
;;;214    		
;;;215    		if(flag.ARMED)
000222  4810              LDR      r0,|L4.612|
000224  7940              LDRB     r0,[r0,#5]  ; flag
000226  b180              CBZ      r0,|L4.586|
;;;216    		{	
;;;217    			#ifdef QUADROTOR 
;;;218    					Moto_duty[0]=Moto[0];
000228  4810              LDR      r0,|L4.620|
00022a  8800              LDRH     r0,[r0,#0]  ; Moto
00022c  4915              LDR      r1,|L4.644|
00022e  8008              STRH     r0,[r1,#0]
;;;219    					Moto_duty[1]=Moto[1];
000230  480e              LDR      r0,|L4.620|
000232  8840              LDRH     r0,[r0,#2]  ; Moto
000234  8048              STRH     r0,[r1,#2]
;;;220    					Moto_duty[2]=Moto[2];
000236  480d              LDR      r0,|L4.620|
000238  8880              LDRH     r0,[r0,#4]  ; Moto
00023a  8088              STRH     r0,[r1,#4]
;;;221    					Moto_duty[3]=Moto[3];			
00023c  480b              LDR      r0,|L4.620|
00023e  88c0              LDRH     r0,[r0,#6]  ; Moto
000240  80c8              STRH     r0,[r1,#6]
;;;222    			
;;;223    			#elif defined HEXACOPTER
;;;224    					Moto_duty[0]=Moto[0];
;;;225    					Moto_duty[1]=Moto[1];
;;;226    					Moto_duty[2]=Moto[2];
;;;227    					Moto_duty[3]=Moto[3];	
;;;228    					Moto_duty[4]=Moto[4];
;;;229    					Moto_duty[5]=Moto[5];	
;;;230    			
;;;231    			#endif 	
;;;232    			
;;;233    			moto_PwmRflash(&Moto_duty[0]);//马达输出刷新，直接写PWM输出寄存器	
000242  4608              MOV      r0,r1
000244  f7fffffe          BL       moto_PwmRflash
000248  e006              B        |L4.600|
                  |L4.586|
;;;234    		}	
;;;235    		else 
;;;236    		{
;;;237    			 array_assign(&Moto_duty[0],0,MOTOR_NUM);//马达输出0
00024a  2204              MOVS     r2,#4
00024c  2100              MOVS     r1,#0
00024e  480d              LDR      r0,|L4.644|
000250  f7fffffe          BL       array_assign
;;;238    		   moto_STOP();//强制输出1000	
000254  f7fffffe          BL       moto_STOP
                  |L4.600|
;;;239    		}				
;;;240    }
000258  b00b              ADD      sp,sp,#0x2c
00025a  e8bd8ff0          POP      {r4-r11,pc}
;;;241    
                          ENDP

00025e  0000              DCW      0x0000
                  |L4.608|
                          DCD      ctrl
                  |L4.612|
                          DCD      flag
                  |L4.616|
                          DCD      thr_value
                  |L4.620|
                          DCD      Moto
                  |L4.624|
                          DCD      RC_Data
                  |L4.628|
                          DCD      IMU
                  |L4.632|
                          DCD      0x63cfb331
                  |L4.636|
                          DCD      0x404ca994
                  |L4.640|
                          DCD      date_throttle
                  |L4.644|
                          DCD      Moto_duty

                          AREA ||i.Reset_Integral||, CODE, READONLY, ALIGN=2

                  Reset_Integral PROC
;;;250    /*====================================================================================================*/
;;;251    void Reset_Integral(void)
000000  2100              MOVS     r1,#0
;;;252    {
;;;253    	ctrl.pitch.shell.increment = 0;
000002  4804              LDR      r0,|L5.20|
000004  6101              STR      r1,[r0,#0x10]
;;;254    	ctrl.roll.shell.increment= 0;	
000006  6581              STR      r1,[r0,#0x58]
;;;255      ctrl.pitch.core.increment = 0;		
000008  6341              STR      r1,[r0,#0x34]
;;;256      ctrl.roll.core.increment = 0;		
00000a  67c1              STR      r1,[r0,#0x7c]
;;;257    	ctrl.yaw.core.increment = 0;
00000c  f8c010c4          STR      r1,[r0,#0xc4]
;;;258    }
000010  4770              BX       lr
;;;259    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      ctrl

                          AREA ||i.Thr_Ctrl||, CODE, READONLY, ALIGN=2

                  Thr_Ctrl PROC
;;;260    
;;;261    void Thr_Ctrl(float T)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;262    {
000004  4604              MOV      r4,r0
;;;263    ///////////////////////////////////////////////////////////////////////////		
;;;264    	static float thr;
;;;265    	static float Thr_tmp;
;;;266    	thr = RC_Data.THROTTLE-1110; //油门值thr 0 ~ 1000
000006  4935              LDR      r1,|L6.220|
000008  f9b11014          LDRSH    r1,[r1,#0x14]  ; RC_Data
00000c  f2a14056          SUB      r0,r1,#0x456
000010  f7fffffe          BL       __aeabi_i2f
000014  4932              LDR      r1,|L6.224|
000016  6008              STR      r0,[r1,#0]  ; thr
;;;267    	Thr_tmp += 10 *3.14f *T *(thr/250.0f - Thr_tmp); //低通滤波
000018  4932              LDR      r1,|L6.228|
00001a  4831              LDR      r0,|L6.224|
00001c  6800              LDR      r0,[r0,#0]  ; thr
00001e  f7fffffe          BL       __aeabi_fdiv
000022  4680              MOV      r8,r0
000024  4830              LDR      r0,|L6.232|
000026  6801              LDR      r1,[r0,#0]  ; Thr_tmp
000028  4640              MOV      r0,r8
00002a  f7fffffe          BL       __aeabi_fsub
00002e  4606              MOV      r6,r0
000030  492e              LDR      r1,|L6.236|
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       __aeabi_fmul
000038  4607              MOV      r7,r0
00003a  4631              MOV      r1,r6
00003c  f7fffffe          BL       __aeabi_fmul
000040  4605              MOV      r5,r0
000042  4829              LDR      r0,|L6.232|
000044  6801              LDR      r1,[r0,#0]  ; Thr_tmp
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       __aeabi_fadd
00004c  4926              LDR      r1,|L6.232|
00004e  6008              STR      r0,[r1,#0]  ; Thr_tmp
;;;268    	Thr_Weight = LIMIT(Thr_tmp,0,1);    	//后边多处分离数据会用到这个值
000050  2100              MOVS     r1,#0
000052  4825              LDR      r0,|L6.232|
000054  6800              LDR      r0,[r0,#0]  ; Thr_tmp
000056  f7fffffe          BL       __aeabi_cfcmple
00005a  d201              BCS      |L6.96|
00005c  2000              MOVS     r0,#0
00005e  e00b              B        |L6.120|
                  |L6.96|
000060  f04f517e          MOV      r1,#0x3f800000
000064  4820              LDR      r0,|L6.232|
000066  6800              LDR      r0,[r0,#0]  ; Thr_tmp
000068  f7fffffe          BL       __aeabi_cfrcmple
00006c  d202              BCS      |L6.116|
00006e  f04f507e          MOV      r0,#0x3f800000
000072  e001              B        |L6.120|
                  |L6.116|
000074  481c              LDR      r0,|L6.232|
000076  6800              LDR      r0,[r0,#0]  ; Thr_tmp
                  |L6.120|
000078  491d              LDR      r1,|L6.240|
00007a  6008              STR      r0,[r1,#0]  ; Thr_Weight
;;;269    	
;;;270    ///////////////////////////////////////////////////////////////////////////////	
;;;271    
;;;272    	if( thr < 100 )
00007c  491d              LDR      r1,|L6.244|
00007e  4818              LDR      r0,|L6.224|
000080  6800              LDR      r0,[r0,#0]  ; thr
000082  f7fffffe          BL       __aeabi_cfcmple
000086  d203              BCS      |L6.144|
;;;273    	{
;;;274    		Thr_Low = 1;
000088  2001              MOVS     r0,#1
00008a  491b              LDR      r1,|L6.248|
00008c  7008              STRB     r0,[r1,#0]
00008e  e002              B        |L6.150|
                  |L6.144|
;;;275    	}
;;;276    	else
;;;277    	{
;;;278    		Thr_Low = 0;
000090  2000              MOVS     r0,#0
000092  4919              LDR      r1,|L6.248|
000094  7008              STRB     r0,[r1,#0]
                  |L6.150|
;;;279    	}
;;;280    	
;;;281    	#if(CTRL_HEIGHT)
;;;282    
;;;283    	Height_Ctrl(T,thr);
000096  4812              LDR      r0,|L6.224|
000098  6801              LDR      r1,[r0,#0]  ; thr
00009a  4620              MOV      r0,r4
00009c  f7fffffe          BL       Height_Ctrl
;;;284    
;;;285    	thr_value = Thr_Weight *height_ctrl_out;   //实际使用值
0000a0  4816              LDR      r0,|L6.252|
0000a2  6801              LDR      r1,[r0,#0]  ; height_ctrl_out
0000a4  4812              LDR      r0,|L6.240|
0000a6  6800              LDR      r0,[r0,#0]  ; Thr_Weight
0000a8  f7fffffe          BL       __aeabi_fmul
0000ac  4914              LDR      r1,|L6.256|
0000ae  6008              STR      r0,[r1,#0]  ; thr_value
;;;286    
;;;287    	#else
;;;288    	thr_value = thr;   //实际使用值
;;;289    
;;;290    	#endif
;;;291    
;;;292    	thr_value = LIMIT(thr_value,0,10 *MAX_THR *MAX_PWM/100);//限制油门最大为800，留200余地给姿态控制
0000b0  2100              MOVS     r1,#0
0000b2  4813              LDR      r0,|L6.256|
0000b4  6800              LDR      r0,[r0,#0]  ; thr_value
0000b6  f7fffffe          BL       __aeabi_cfcmple
0000ba  d201              BCS      |L6.192|
0000bc  2000              MOVS     r0,#0
0000be  e009              B        |L6.212|
                  |L6.192|
0000c0  4910              LDR      r1,|L6.260|
0000c2  480f              LDR      r0,|L6.256|
0000c4  6800              LDR      r0,[r0,#0]  ; thr_value
0000c6  f7fffffe          BL       __aeabi_cfrcmple
0000ca  d201              BCS      |L6.208|
0000cc  480d              LDR      r0,|L6.260|
0000ce  e001              B        |L6.212|
                  |L6.208|
0000d0  480b              LDR      r0,|L6.256|
0000d2  6800              LDR      r0,[r0,#0]  ; thr_value
                  |L6.212|
0000d4  490a              LDR      r1,|L6.256|
0000d6  6008              STR      r0,[r1,#0]  ; thr_value
;;;293    }
0000d8  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L6.220|
                          DCD      RC_Data
                  |L6.224|
                          DCD      thr
                  |L6.228|
                          DCD      0x437a0000
                  |L6.232|
                          DCD      Thr_tmp
                  |L6.236|
                          DCD      0x41fb3334
                  |L6.240|
                          DCD      Thr_Weight
                  |L6.244|
                          DCD      0x42c80000
                  |L6.248|
                          DCD      Thr_Low
                  |L6.252|
                          DCD      height_ctrl_out
                  |L6.256|
                          DCD      thr_value
                  |L6.260|
                          DCD      0x44480000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ctrl
                          %        220
                  Target
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  Moto_duty
                          %        8
                  Moto
                          %        8
                  motor_array
                          DCD      Moto_duty
                  Thr_Weight
                          DCD      0x00000000
                  thr_value
                          DCD      0x00000000
                  Thr_Low
00001c  00000000          DCB      0x00,0x00,0x00,0x00
                  date_throttle
                          DCD      0x00000000
                  thr
                          DCD      0x00000000
                  Thr_tmp
                          DCD      0x00000000
