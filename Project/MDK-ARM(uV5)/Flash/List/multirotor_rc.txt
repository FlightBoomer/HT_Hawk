; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\multirotor_rc.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\multirotor_rc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\GPS -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Heigh -I..\..\User\Algorithm\ekf2 -IC:\__Electronic_Projects\STM32\HT_Hawk_0528_1\Project\MDK-ARM(uV5)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\multirotor_rc.crf ..\..\User\Function\MultiRotor_rc\MultiRotor_rc.c]
                          THUMB

                          AREA ||i.ECS_Calibrate||, CODE, READONLY, ALIGN=2

                  ECS_Calibrate PROC
;;;215    /*====================================================================================================*/
;;;216    void ECS_Calibrate(void)
000000  b510              PUSH     {r4,lr}
;;;217    {
;;;218    	static vs8 ECS_Calibrate_FLAG=0;
;;;219    	static vs16 time=2000;
;;;220    	while(time--)
000002  e001              B        |L1.8|
                  |L1.4|
;;;221    	  RDAU();
000004  f7fffffe          BL       RDAU
                  |L1.8|
000008  4918              LDR      r1,|L1.108|
00000a  f9b10000          LDRSH    r0,[r1,#0]            ;220  ; time
00000e  1e41              SUBS     r1,r0,#1              ;220
000010  b209              SXTH     r1,r1                 ;220
000012  4a16              LDR      r2,|L1.108|
000014  8011              STRH     r1,[r2,#0]            ;220
000016  2800              CMP      r0,#0                 ;220
000018  d1f4              BNE      |L1.4|
;;;222      while(RC_Data.THROTTLE >= 1850 || ECS_Calibrate_FLAG)
00001a  e01a              B        |L1.82|
                  |L1.28|
;;;223      {   
;;;224    		LED_ALLON();//白色LED常亮
00001c  2107              MOVS     r1,#7
00001e  4814              LDR      r0,|L1.112|
000020  f7fffffe          BL       GPIO_ResetBits
;;;225    		OLED_Print(35,6,"电调校准");
000024  a213              ADR      r2,|L1.116|
000026  2106              MOVS     r1,#6
000028  2023              MOVS     r0,#0x23
00002a  f7fffffe          BL       OLED_Print
;;;226    		ECS_Calibrate_FLAG=1;//油门行程标志位置1
00002e  2001              MOVS     r0,#1
000030  4913              LDR      r1,|L1.128|
000032  7008              STRB     r0,[r1,#0]
;;;227        RDAU();	
000034  f7fffffe          BL       RDAU
;;;228    			
;;;229    		#ifdef QUADROTOR 
;;;230         Moto_duty[0] = Moto_duty[1] = Moto_duty[2] = Moto_duty[3] = RC_Data.THROTTLE-1000;
000038  4812              LDR      r0,|L1.132|
00003a  8a80              LDRH     r0,[r0,#0x14]  ; RC_Data
00003c  f5a0707a          SUB      r0,r0,#0x3e8
000040  b280              UXTH     r0,r0
000042  4911              LDR      r1,|L1.136|
000044  80c8              STRH     r0,[r1,#6]
000046  8088              STRH     r0,[r1,#4]
000048  8048              STRH     r0,[r1,#2]
00004a  8008              STRH     r0,[r1,#0]
;;;231    		#elif defined HEXACOPTER
;;;232          Moto_duty[0] = Moto_duty[1] = Moto_duty[2] = Moto_duty[3] = Moto_duty[4] = Moto_duty[5] = RC_Data.THROTTLE-1000;
;;;233    		#endif 
;;;234    	  moto_PwmRflash(&Moto_duty[0]);//马达输出刷新，直接写PWM输出寄存器
00004c  4608              MOV      r0,r1
00004e  f7fffffe          BL       moto_PwmRflash
                  |L1.82|
000052  480c              LDR      r0,|L1.132|
000054  f9b00014          LDRSH    r0,[r0,#0x14]         ;222  ; RC_Data
000058  f240713a          MOV      r1,#0x73a             ;222
00005c  4288              CMP      r0,r1                 ;222
00005e  dadd              BGE      |L1.28|
000060  4807              LDR      r0,|L1.128|
000062  7800              LDRB     r0,[r0,#0]            ;222  ; ECS_Calibrate_FLAG
000064  2800              CMP      r0,#0                 ;222
000066  d1d9              BNE      |L1.28|
;;;235      }
;;;236    }
000068  bd10              POP      {r4,pc}
                          ENDP

00006a  0000              DCW      0x0000
                  |L1.108|
                          DCD      time
                  |L1.112|
                          DCD      0x40011400
                  |L1.116|
000074  b5e7b5f7          DCB      181,231,181,247,208,163,215,188,0
000078  d0a3d7bc
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L1.128|
                          DCD      ECS_Calibrate_FLAG
                  |L1.132|
                          DCD      RC_Data
                  |L1.136|
                          DCD      Moto_duty

                          AREA ||i.RC_Data_Refine||, CODE, READONLY, ALIGN=2

                  RC_Data_Refine PROC
;;;159    /*====================================================================================================*/
;;;160    void RC_Data_Refine(void)
000000  b530              PUSH     {r4,r5,lr}
;;;161    {
000002  b088              SUB      sp,sp,#0x20
;;;162      u8 chan,a;	
;;;163    
;;;164    	u16 rcDataMax[8], rcDataMin[8];
;;;165    	static int16_t rcDataCache[8][4], rcDataMean[8];
;;;166    	static uint8_t rcValuesIndex = 0;
;;;167    
;;;168    	rcValuesIndex++;
000004  4a52              LDR      r2,|L2.336|
000006  7812              LDRB     r2,[r2,#0]  ; rcValuesIndex
000008  1c52              ADDS     r2,r2,#1
00000a  4b51              LDR      r3,|L2.336|
00000c  701a              STRB     r2,[r3,#0]
;;;169    	for (chan = 0; chan < 8; chan++) {
00000e  2000              MOVS     r0,#0
000010  e07c              B        |L2.268|
                  |L2.18|
;;;170    		  //滑动平均值滤波，4次
;;;171    		  if(RC_Pwm_In[chan]>2800 || RC_Pwm_In[chan]<800)  RC_Pwm_In[chan] = RC_Pwm_In_his[chan];
000012  4a50              LDR      r2,|L2.340|
000014  f8322010          LDRH     r2,[r2,r0,LSL #1]
000018  f5b26f2f          CMP      r2,#0xaf0
00001c  dc05              BGT      |L2.42|
00001e  4a4d              LDR      r2,|L2.340|
000020  f8322010          LDRH     r2,[r2,r0,LSL #1]
000024  f5b27f48          CMP      r2,#0x320
000028  da05              BGE      |L2.54|
                  |L2.42|
00002a  4a4b              LDR      r2,|L2.344|
00002c  f8322010          LDRH     r2,[r2,r0,LSL #1]
000030  4b48              LDR      r3,|L2.340|
000032  f8232010          STRH     r2,[r3,r0,LSL #1]
                  |L2.54|
;;;172    			rcDataCache[chan][rcValuesIndex % 4] = RC_Pwm_In[chan] ;		
000036  4b47              LDR      r3,|L2.340|
000038  f8333010          LDRH     r3,[r3,r0,LSL #1]
00003c  b21b              SXTH     r3,r3
00003e  4c44              LDR      r4,|L2.336|
000040  7822              LDRB     r2,[r4,#0]  ; rcValuesIndex
000042  17d4              ASRS     r4,r2,#31
000044  eb027494          ADD      r4,r2,r4,LSR #30
000048  10a4              ASRS     r4,r4,#2
00004a  eba20484          SUB      r4,r2,r4,LSL #2
00004e  4d43              LDR      r5,|L2.348|
000050  eb0505c0          ADD      r5,r5,r0,LSL #3
000054  f8253014          STRH     r3,[r5,r4,LSL #1]
;;;173    		  RC_Pwm_In_his[chan] = RC_Pwm_In[chan];
000058  4a3e              LDR      r2,|L2.340|
00005a  f8322010          LDRH     r2,[r2,r0,LSL #1]
00005e  4b3e              LDR      r3,|L2.344|
000060  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;174    			
;;;175    			rcDataMean[chan] = 0;
000064  2200              MOVS     r2,#0
000066  4b3e              LDR      r3,|L2.352|
000068  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;176    		  rcDataMax[chan]  = 0;
00006c  ab04              ADD      r3,sp,#0x10
00006e  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;177    		  rcDataMin[chan]  = 25000;
000072  f24612a8          MOV      r2,#0x61a8
000076  f82d2010          STRH     r2,[sp,r0,LSL #1]
;;;178    		
;;;179    			for (a = 0; a < 4; a++) {
00007a  2100              MOVS     r1,#0
00007c  e031              B        |L2.226|
                  |L2.126|
;;;180    				  // 记录缓存中最大值 && 最小值
;;;181    				  if(rcDataCache[chan][a] > rcDataMax[chan])  rcDataMax[chan] = rcDataCache[chan][a];     
00007e  4a37              LDR      r2,|L2.348|
000080  eb0202c0          ADD      r2,r2,r0,LSL #3
000084  f9322011          LDRSH    r2,[r2,r1,LSL #1]
000088  ab04              ADD      r3,sp,#0x10
00008a  f8333010          LDRH     r3,[r3,r0,LSL #1]
00008e  429a              CMP      r2,r3
000090  dd07              BLE      |L2.162|
000092  4a32              LDR      r2,|L2.348|
000094  eb0202c0          ADD      r2,r2,r0,LSL #3
000098  f8322011          LDRH     r2,[r2,r1,LSL #1]
00009c  ab04              ADD      r3,sp,#0x10
00009e  f8232010          STRH     r2,[r3,r0,LSL #1]
                  |L2.162|
;;;182    					if(rcDataCache[chan][a] < rcDataMin[chan])	rcDataMin[chan] = rcDataCache[chan][a]; 
0000a2  4a2e              LDR      r2,|L2.348|
0000a4  eb0202c0          ADD      r2,r2,r0,LSL #3
0000a8  f9322011          LDRSH    r2,[r2,r1,LSL #1]
0000ac  f83d3010          LDRH     r3,[sp,r0,LSL #1]
0000b0  429a              CMP      r2,r3
0000b2  da07              BGE      |L2.196|
0000b4  4a29              LDR      r2,|L2.348|
0000b6  eb0202c0          ADD      r2,r2,r0,LSL #3
0000ba  f8322011          LDRH     r2,[r2,r1,LSL #1]
0000be  b292              UXTH     r2,r2
0000c0  f82d2010          STRH     r2,[sp,r0,LSL #1]
                  |L2.196|
;;;183    				  // 求和
;;;184    					rcDataMean[chan] += rcDataCache[chan][a];  
0000c4  4a25              LDR      r2,|L2.348|
0000c6  eb0202c0          ADD      r2,r2,r0,LSL #3
0000ca  f8322011          LDRH     r2,[r2,r1,LSL #1]
0000ce  4b24              LDR      r3,|L2.352|
0000d0  f8333010          LDRH     r3,[r3,r0,LSL #1]
0000d4  441a              ADD      r2,r2,r3
0000d6  b212              SXTH     r2,r2
0000d8  4b21              LDR      r3,|L2.352|
0000da  f8232010          STRH     r2,[r3,r0,LSL #1]
0000de  1c4a              ADDS     r2,r1,#1              ;179
0000e0  b2d1              UXTB     r1,r2                 ;179
                  |L2.226|
0000e2  2904              CMP      r1,#4                 ;179
0000e4  dbcb              BLT      |L2.126|
;;;185          }
;;;186    			// 剔除缓存中 最大值 && 最小值 
;;;187    			rcDataMean[chan] = (rcDataMean[chan] - (rcDataMax[chan] + rcDataMin[chan])) / 2;
0000e6  ab04              ADD      r3,sp,#0x10
0000e8  f8333010          LDRH     r3,[r3,r0,LSL #1]
0000ec  f83d4010          LDRH     r4,[sp,r0,LSL #1]
0000f0  4423              ADD      r3,r3,r4
0000f2  4c1b              LDR      r4,|L2.352|
0000f4  f9344010          LDRSH    r4,[r4,r0,LSL #1]
0000f8  1ae2              SUBS     r2,r4,r3
0000fa  eb0273d2          ADD      r3,r2,r2,LSR #31
0000fe  105b              ASRS     r3,r3,#1
000100  b21b              SXTH     r3,r3
000102  4c17              LDR      r4,|L2.352|
000104  f8243010          STRH     r3,[r4,r0,LSL #1]
000108  1c42              ADDS     r2,r0,#1              ;169
00010a  b2d0              UXTB     r0,r2                 ;169
                  |L2.268|
00010c  2808              CMP      r0,#8                 ;169
00010e  db80              BLT      |L2.18|
;;;188    	} 
;;;189    
;;;190    	 RC_Data.ROLL     = RC_Data.rc_data[0] = rcDataMean[0];
000110  4a13              LDR      r2,|L2.352|
000112  f9b22000          LDRSH    r2,[r2,#0]  ; rcDataMean
000116  4b13              LDR      r3,|L2.356|
000118  801a              STRH     r2,[r3,#0]
00011a  821a              STRH     r2,[r3,#0x10]
;;;191    	 RC_Data.PITCH    = RC_Data.rc_data[1] = rcDataMean[1];
00011c  4a10              LDR      r2,|L2.352|
00011e  f9b22002          LDRSH    r2,[r2,#2]  ; rcDataMean
000122  805a              STRH     r2,[r3,#2]
000124  825a              STRH     r2,[r3,#0x12]
;;;192    	 RC_Data.THROTTLE = RC_Data.rc_data[3] = rcDataMean[2]; 
000126  4a0e              LDR      r2,|L2.352|
000128  f9b22004          LDRSH    r2,[r2,#4]  ; rcDataMean
00012c  80da              STRH     r2,[r3,#6]
00012e  829a              STRH     r2,[r3,#0x14]
;;;193    	 RC_Data.YAW      = RC_Data.rc_data[2] = rcDataMean[3];
000130  4a0b              LDR      r2,|L2.352|
000132  f9b22006          LDRSH    r2,[r2,#6]  ; rcDataMean
000136  809a              STRH     r2,[r3,#4]
000138  82da              STRH     r2,[r3,#0x16]
;;;194    	 RC_Data.rc_data[4] = rcDataMean[4];
00013a  4a09              LDR      r2,|L2.352|
00013c  8912              LDRH     r2,[r2,#8]  ; rcDataMean
00013e  811a              STRH     r2,[r3,#8]
;;;195    	 RC_Data.rc_data[5] = rcDataMean[5];
000140  4a07              LDR      r2,|L2.352|
000142  8952              LDRH     r2,[r2,#0xa]  ; rcDataMean
000144  815a              STRH     r2,[r3,#0xa]
;;;196    	 RC_Data.rc_data[6] = rcDataMean[6];
000146  4a06              LDR      r2,|L2.352|
000148  8992              LDRH     r2,[r2,#0xc]  ; rcDataMean
00014a  819a              STRH     r2,[r3,#0xc]
;;;197    }
00014c  b008              ADD      sp,sp,#0x20
00014e  bd30              POP      {r4,r5,pc}
;;;198    
                          ENDP

                  |L2.336|
                          DCD      rcValuesIndex
                  |L2.340|
                          DCD      RC_Pwm_In
                  |L2.344|
                          DCD      RC_Pwm_In_his
                  |L2.348|
                          DCD      rcDataCache
                  |L2.352|
                          DCD      rcDataMean
                  |L2.356|
                          DCD      RC_Data

                          AREA ||i.RC_directive||, CODE, READONLY, ALIGN=2

                  RC_directive PROC
;;;33     u8  rcSticks,keySticks;
;;;34     void RC_directive(void)
000000  b570              PUSH     {r4-r6,lr}
;;;35     {
;;;36       u8 stTmp = 0,keyTemp=0,i;
000002  2500              MOVS     r5,#0
000004  2600              MOVS     r6,#0
;;;37     	//static u8  rcSticks,keySticks;
;;;38     	static u16  rcDelayCommand,keyDelayCommand;
;;;39       static u16 seltLockCommend;	
;;;40     /**************************以下处理遥控控制通道数据******************************/	
;;;41     	for (i = 0; i < 4; i++) {
000006  2400              MOVS     r4,#0
000008  e014              B        |L3.52|
                  |L3.10|
;;;42     			stTmp >>= 2;
00000a  10ad              ASRS     r5,r5,#2
;;;43     			if (RC_Data.rc_data[i] > RC_MINCHECK)
00000c  487f              LDR      r0,|L3.524|
00000e  f9300014          LDRSH    r0,[r0,r4,LSL #1]
000012  f240417e          MOV      r1,#0x47e
000016  4288              CMP      r0,r1
000018  dd01              BLE      |L3.30|
;;;44     					stTmp |= 0x80;  // check for MIN
00001a  f0450580          ORR      r5,r5,#0x80
                  |L3.30|
;;;45     			if (RC_Data.rc_data[i] < RC_MAXCHECK)
00001e  487b              LDR      r0,|L3.524|
000020  f9300014          LDRSH    r0,[r0,r4,LSL #1]
000024  f240713a          MOV      r1,#0x73a
000028  4288              CMP      r0,r1
00002a  da01              BGE      |L3.48|
;;;46     					stTmp |= 0x40;  // check for MAX
00002c  f0450540          ORR      r5,r5,#0x40
                  |L3.48|
000030  1c60              ADDS     r0,r4,#1              ;41
000032  b2c4              UXTB     r4,r0                 ;41
                  |L3.52|
000034  2c04              CMP      r4,#4                 ;41
000036  dbe8              BLT      |L3.10|
;;;47     	}
;;;48     
;;;49     	if (stTmp == rcSticks) {
000038  4875              LDR      r0,|L3.528|
00003a  7800              LDRB     r0,[r0,#0]  ; rcSticks
00003c  4285              CMP      r5,r0
00003e  d10a              BNE      |L3.86|
;;;50     			if (rcDelayCommand < 600)
000040  4874              LDR      r0,|L3.532|
000042  8800              LDRH     r0,[r0,#0]  ; rcDelayCommand
000044  f5b07f16          CMP      r0,#0x258
000048  da08              BGE      |L3.92|
;;;51     					rcDelayCommand++;
00004a  4872              LDR      r0,|L3.532|
00004c  8800              LDRH     r0,[r0,#0]  ; rcDelayCommand
00004e  1c40              ADDS     r0,r0,#1
000050  4970              LDR      r1,|L3.532|
000052  8008              STRH     r0,[r1,#0]
000054  e002              B        |L3.92|
                  |L3.86|
;;;52     	} else
;;;53     			rcDelayCommand = 0;
000056  2000              MOVS     r0,#0
000058  496e              LDR      r1,|L3.532|
00005a  8008              STRH     r0,[r1,#0]
                  |L3.92|
;;;54     	rcSticks = stTmp;
00005c  486c              LDR      r0,|L3.528|
00005e  7005              STRB     r5,[r0,#0]
;;;55     	
;;;56     	if (rcDelayCommand == ARMED_TIME) {
000060  486c              LDR      r0,|L3.532|
000062  8800              LDRH     r0,[r0,#0]  ; rcDelayCommand
000064  f5b07f16          CMP      r0,#0x258
000068  d13b              BNE      |L3.226|
;;;57     		if (flag.ARMED){
00006a  486b              LDR      r0,|L3.536|
00006c  7940              LDRB     r0,[r0,#5]  ; flag
00006e  b138              CBZ      r0,|L3.128|
;;;58     			 if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE)   //上锁 左下+中位
000070  4867              LDR      r0,|L3.528|
000072  7800              LDRB     r0,[r0,#0]  ; rcSticks
000074  285f              CMP      r0,#0x5f
000076  d134              BNE      |L3.226|
;;;59     				  flag.ARMED=0;
000078  2000              MOVS     r0,#0
00007a  4967              LDR      r1,|L3.536|
00007c  7148              STRB     r0,[r1,#5]
00007e  e030              B        |L3.226|
                  |L3.128|
;;;60     		}
;;;61     		else{
;;;62     					if ((rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE) && flag.FlightMode==MANUAL_High)    //解锁 右下+中位 ,处于手动模式 
000080  4863              LDR      r0,|L3.528|
000082  7800              LDRB     r0,[r0,#0]  ; rcSticks
000084  286f              CMP      r0,#0x6f
000086  d10b              BNE      |L3.160|
000088  4863              LDR      r0,|L3.536|
00008a  7cc0              LDRB     r0,[r0,#0x13]  ; flag
00008c  2801              CMP      r0,#1
00008e  d107              BNE      |L3.160|
;;;63     					{
;;;64     						 flag.ARMED=1;Pressure_groud=Pressure;//解锁即记下当前的气压值作为地面气压值。
000090  4961              LDR      r1,|L3.536|
000092  7148              STRB     r0,[r1,#5]
000094  4861              LDR      r0,|L3.540|
000096  6800              LDR      r0,[r0,#0]  ; Pressure
000098  f7fffffe          BL       __aeabi_ui2f
00009c  4960              LDR      r1,|L3.544|
00009e  6008              STR      r0,[r1,#0]  ; Pressure_groud
                  |L3.160|
;;;65     					}
;;;66     					if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)    //加速度矫正 左下+右
0000a0  485b              LDR      r0,|L3.528|
0000a2  7800              LDRB     r0,[r0,#0]  ; rcSticks
0000a4  285e              CMP      r0,#0x5e
0000a6  d107              BNE      |L3.184|
;;;67     							{flag.calibratingA = 1;flag.calibratingG = 1;stTmp=0;rcSticks=0;}
0000a8  2001              MOVS     r0,#1
0000aa  495b              LDR      r1,|L3.536|
0000ac  71c8              STRB     r0,[r1,#7]
0000ae  7288              STRB     r0,[r1,#0xa]
0000b0  2500              MOVS     r5,#0
0000b2  2000              MOVS     r0,#0
0000b4  4956              LDR      r1,|L3.528|
0000b6  7008              STRB     r0,[r1,#0]
                  |L3.184|
;;;68     					if ((rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_HI) && flag.calibratingM_pre)//左上+右上指南针矫正 
0000b8  4855              LDR      r0,|L3.528|
0000ba  7800              LDRB     r0,[r0,#0]  ; rcSticks
0000bc  2896              CMP      r0,#0x96
0000be  d105              BNE      |L3.204|
0000c0  4855              LDR      r0,|L3.536|
0000c2  7a40              LDRB     r0,[r0,#9]  ; flag
0000c4  b110              CBZ      r0,|L3.204|
;;;69     							flag.calibratingM = 1; 
0000c6  2001              MOVS     r0,#1
0000c8  4953              LDR      r1,|L3.536|
0000ca  7208              STRB     r0,[r1,#8]
                  |L3.204|
;;;70     					if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_LO)//右上+左上    
0000cc  4850              LDR      r0,|L3.528|
0000ce  7800              LDRB     r0,[r0,#0]  ; rcSticks
0000d0  28a5              CMP      r0,#0xa5
0000d2  d103              BNE      |L3.220|
;;;71     							flag.calibratingM_pre = 1;
0000d4  2001              MOVS     r0,#1
0000d6  4950              LDR      r1,|L3.536|
0000d8  7248              STRB     r0,[r1,#9]
0000da  e002              B        |L3.226|
                  |L3.220|
;;;72     					else flag.calibratingM_pre = 0;	
0000dc  2000              MOVS     r0,#0
0000de  494e              LDR      r1,|L3.536|
0000e0  7248              STRB     r0,[r1,#9]
                  |L3.226|
;;;73         }
;;;74     	}
;;;75     	//解锁之后一段时间油门保持最低  则自动上锁
;;;76     	if (flag.ARMED){
0000e2  484d              LDR      r0,|L3.536|
0000e4  7940              LDRB     r0,[r0,#5]  ; flag
0000e6  b1a8              CBZ      r0,|L3.276|
;;;77     	   if (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_CE) {
0000e8  4849              LDR      r0,|L3.528|
0000ea  7800              LDRB     r0,[r0,#0]  ; rcSticks
0000ec  287f              CMP      r0,#0x7f
0000ee  d10e              BNE      |L3.270|
;;;78     		    if (seltLockCommend < AUTODISARMED_TIME)
0000f0  484c              LDR      r0,|L3.548|
0000f2  8800              LDRH     r0,[r0,#0]  ; seltLockCommend
0000f4  f5b06ffa          CMP      r0,#0x7d0
0000f8  da05              BGE      |L3.262|
;;;79     					 seltLockCommend++;
0000fa  484a              LDR      r0,|L3.548|
0000fc  8800              LDRH     r0,[r0,#0]  ; seltLockCommend
0000fe  1c40              ADDS     r0,r0,#1
000100  4948              LDR      r1,|L3.548|
000102  8008              STRH     r0,[r1,#0]
000104  e006              B        |L3.276|
                  |L3.262|
;;;80     				else 
;;;81     					 flag.ARMED=0;
000106  2000              MOVS     r0,#0
000108  4943              LDR      r1,|L3.536|
00010a  7148              STRB     r0,[r1,#5]
00010c  e002              B        |L3.276|
                  |L3.270|
;;;82     		 }
;;;83     		 else 
;;;84             seltLockCommend = 0;			 
00010e  2000              MOVS     r0,#0
000110  4944              LDR      r1,|L3.548|
000112  8008              STRH     r0,[r1,#0]
                  |L3.276|
;;;85     	}
;;;86     
;;;87     /**************************以下处理遥控开关数据******************************/
;;;88         for (i = 0; i < 4; i++) {
000114  2400              MOVS     r4,#0
000116  e016              B        |L3.326|
                  |L3.280|
;;;89                 keyTemp >>= 2;
000118  10b6              ASRS     r6,r6,#2
;;;90                 if (RC_Data.rc_data[i+4] > RC_MINCHECK)
00011a  493c              LDR      r1,|L3.524|
00011c  1d20              ADDS     r0,r4,#4
00011e  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000122  f240417e          MOV      r1,#0x47e
000126  4288              CMP      r0,r1
000128  dd01              BLE      |L3.302|
;;;91                         keyTemp |= 0x80;  // check for MIN
00012a  f0460680          ORR      r6,r6,#0x80
                  |L3.302|
;;;92                 if (RC_Data.rc_data[i+4] < RC_MAXCHECK)
00012e  4937              LDR      r1,|L3.524|
000130  1d20              ADDS     r0,r4,#4
000132  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000136  f240713a          MOV      r1,#0x73a
00013a  4288              CMP      r0,r1
00013c  da01              BGE      |L3.322|
;;;93                         keyTemp |= 0x40;  // check for MAX
00013e  f0460640          ORR      r6,r6,#0x40
                  |L3.322|
000142  1c60              ADDS     r0,r4,#1              ;88
000144  b2c4              UXTB     r4,r0                 ;88
                  |L3.326|
000146  2c04              CMP      r4,#4                 ;88
000148  dbe6              BLT      |L3.280|
;;;94                 }
;;;95         if (keyTemp == keySticks) {
00014a  4837              LDR      r0,|L3.552|
00014c  7800              LDRB     r0,[r0,#0]  ; keySticks
00014e  4286              CMP      r6,r0
000150  d10d              BNE      |L3.366|
;;;96                 if (keyDelayCommand < 200)//250
000152  4836              LDR      r0,|L3.556|
000154  8800              LDRH     r0,[r0,#0]  ; keyDelayCommand
000156  28c8              CMP      r0,#0xc8
000158  da05              BGE      |L3.358|
;;;97                         keyDelayCommand++;
00015a  4834              LDR      r0,|L3.556|
00015c  8800              LDRH     r0,[r0,#0]  ; keyDelayCommand
00015e  1c40              ADDS     r0,r0,#1
000160  4932              LDR      r1,|L3.556|
000162  8008              STRH     r0,[r1,#0]
000164  e006              B        |L3.372|
                  |L3.358|
;;;98                 else keyDelayCommand = 0;
000166  2000              MOVS     r0,#0
000168  4930              LDR      r1,|L3.556|
00016a  8008              STRH     r0,[r1,#0]
00016c  e002              B        |L3.372|
                  |L3.366|
;;;99         } else
;;;100                keyDelayCommand = 0;
00016e  2000              MOVS     r0,#0
000170  492e              LDR      r1,|L3.556|
000172  8008              STRH     r0,[r1,#0]
                  |L3.372|
;;;101        keySticks = keyTemp;
000174  482c              LDR      r0,|L3.552|
000176  7006              STRB     r6,[r0,#0]
;;;102    
;;;103        if (keyDelayCommand==120) {
000178  482c              LDR      r0,|L3.556|
00017a  8800              LDRH     r0,[r0,#0]  ; keyDelayCommand
00017c  2878              CMP      r0,#0x78
00017e  d143              BNE      |L3.520|
;;;104           // if (flag.ARMED) {
;;;105                if ((keySticks&0X03)==CH5_LO) {//CH5处于低位时
000180  4829              LDR      r0,|L3.552|
000182  7800              LDRB     r0,[r0,#0]  ; keySticks
000184  f0000003          AND      r0,r0,#3
000188  2801              CMP      r0,#1
00018a  d103              BNE      |L3.404|
;;;106                    flag.FlightMode=MANUAL_High;
00018c  4922              LDR      r1,|L3.536|
00018e  74c8              STRB     r0,[r1,#0x13]
;;;107    							  flag.HUDMode=STABILIZE_MODE;
000190  2000              MOVS     r0,#0
000192  7508              STRB     r0,[r1,#0x14]
                  |L3.404|
;;;108    							//keephigh=0;
;;;109                }
;;;110                if ((keySticks&0X03)==CH5_CE) {//CH5处于中位时
000194  4824              LDR      r0,|L3.552|
000196  7800              LDRB     r0,[r0,#0]  ; keySticks
000198  f0000003          AND      r0,r0,#3
00019c  2803              CMP      r0,#3
00019e  d103              BNE      |L3.424|
;;;111                    flag.FlightMode=ULTRASONIC_High;//
0001a0  2002              MOVS     r0,#2
0001a2  491d              LDR      r1,|L3.536|
0001a4  74c8              STRB     r0,[r1,#0x13]
;;;112    							  flag.HUDMode=ALTHOLD_MODE;
0001a6  7508              STRB     r0,[r1,#0x14]
                  |L3.424|
;;;113    							//keephigh=1;
;;;114                }
;;;115                if ((keySticks&0X03)==CH5_HI) {//CH5处于高位时
0001a8  481f              LDR      r0,|L3.552|
0001aa  7800              LDRB     r0,[r0,#0]  ; keySticks
0001ac  f0000003          AND      r0,r0,#3
0001b0  2802              CMP      r0,#2
0001b2  d104              BNE      |L3.446|
;;;116                  //gps_flag=1;
;;;117    							  flag.FlightMode=ATMOSPHERE_High;//ULTRASONIC_High;ACC_High;// 
0001b4  2003              MOVS     r0,#3
0001b6  4918              LDR      r1,|L3.536|
0001b8  74c8              STRB     r0,[r1,#0x13]
;;;118    							  flag.HUDMode=ALTHOLD_MODE;
0001ba  2002              MOVS     r0,#2
0001bc  7508              STRB     r0,[r1,#0x14]
                  |L3.446|
;;;119                }
;;;120                if ((keySticks&0X0C)==CH6_LO) {;//CH6处于低位时
0001be  481a              LDR      r0,|L3.552|
0001c0  7800              LDRB     r0,[r0,#0]  ; keySticks
0001c2  f000000c          AND      r0,r0,#0xc
0001c6  2804              CMP      r0,#4
0001c8  d102              BNE      |L3.464|
;;;121    							 //flag.ControlMode=RC_MODE;
;;;122                   flag.ARMED = 0;
0001ca  2000              MOVS     r0,#0
0001cc  4912              LDR      r1,|L3.536|
0001ce  7148              STRB     r0,[r1,#5]
                  |L3.464|
;;;123                }
;;;124                if ((keySticks&0X0C)==CH6_CE) {;//CH6处于中位时
0001d0  4815              LDR      r0,|L3.552|
0001d2  7800              LDRB     r0,[r0,#0]  ; keySticks
0001d4  f000000c          AND      r0,r0,#0xc
0001d8  280c              CMP      r0,#0xc
0001da  d102              BNE      |L3.482|
;;;125                   flag.ARMED = 0;
0001dc  2000              MOVS     r0,#0
0001de  490e              LDR      r1,|L3.536|
0001e0  7148              STRB     r0,[r1,#5]
                  |L3.482|
;;;126                }
;;;127                if ((keySticks&0X0C)==CH6_HI) {;//CH6处于高位时
0001e2  4811              LDR      r0,|L3.552|
0001e4  7800              LDRB     r0,[r0,#0]  ; keySticks
0001e6  f000000c          AND      r0,r0,#0xc
0001ea  2808              CMP      r0,#8
0001ec  d102              BNE      |L3.500|
;;;128    							 //flag.ControlMode=PC_MODE;
;;;129                   flag.ARMED = 1;              
0001ee  2001              MOVS     r0,#1
0001f0  4909              LDR      r1,|L3.536|
0001f2  7148              STRB     r0,[r1,#5]
                  |L3.500|
;;;130                }
;;;131                if ((keySticks&0X30)==CH7_LO) {//CH7处于低位时
;;;132                }
;;;133                if ((keySticks&0X30)==CH7_CE) {//CH7处于中位时
;;;134                    //keephigh=2;
;;;135                    //lockpressure=0;
;;;136                }
;;;137                if ((keySticks&0X30)==CH7_HI) {//CH7处于高位时
0001f4  480c              LDR      r0,|L3.552|
0001f6  7800              LDRB     r0,[r0,#0]  ; keySticks
0001f8  f0000030          AND      r0,r0,#0x30
0001fc  2820              CMP      r0,#0x20
0001fe  d102              BNE      |L3.518|
;;;138                   // keephigh=3;
;;;139                   flag.ARMED = 0;
000200  2000              MOVS     r0,#0
000202  4905              LDR      r1,|L3.536|
000204  7148              STRB     r0,[r1,#5]
                  |L3.518|
;;;140                }
;;;141                if ((keySticks&0XC0)==CH8_LO) {;//CH8处于低位时
;;;142                }
;;;143                if ((keySticks&0XC0)==CH8_CE) {;//CH8处于中位时
;;;144                }
;;;145                if ((keySticks&0XC0)==CH8_HI) {;//CH8处于高位时
000206  bf00              NOP      
                  |L3.520|
;;;146                }
;;;147            //}
;;;148        }
;;;149        
;;;150    }
000208  bd70              POP      {r4-r6,pc}
;;;151    /*====================================================================================================*/
                          ENDP

00020a  0000              DCW      0x0000
                  |L3.524|
                          DCD      RC_Data
                  |L3.528|
                          DCD      rcSticks
                  |L3.532|
                          DCD      rcDelayCommand
                  |L3.536|
                          DCD      flag
                  |L3.540|
                          DCD      Pressure
                  |L3.544|
                          DCD      Pressure_groud
                  |L3.548|
                          DCD      seltLockCommend
                  |L3.552|
                          DCD      keySticks
                  |L3.556|
                          DCD      keyDelayCommand

                          AREA ||i.RDAU||, CODE, READONLY, ALIGN=2

                  RDAU PROC
;;;17     
;;;18     void RDAU(void)
000000  b510              PUSH     {r4,lr}
;;;19     {
;;;20     	RC_directive();
000002  f7fffffe          BL       RC_directive
;;;21     	rcReadRawFunc();
000006  4802              LDR      r0,|L4.16|
000008  6800              LDR      r0,[r0,#0]  ; rcReadRawFunc
00000a  4780              BLX      r0
;;;22     }
00000c  bd10              POP      {r4,pc}
;;;23     
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      rcReadRawFunc

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  RC_Data
                          %        28
                  rcDataCache
                          %        64
                  rcDataMean
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  rcReadRawFunc
                          DCD      RC_Data_Refine
                  rcSticks
000004  00                DCB      0x00
                  keySticks
000005  00                DCB      0x00
                  rcDelayCommand
000006  0000              DCB      0x00,0x00
                  keyDelayCommand
000008  0000              DCB      0x00,0x00
                  seltLockCommend
00000a  0000              DCB      0x00,0x00
                  rcValuesIndex
00000c  00                DCB      0x00
                  ECS_Calibrate_FLAG
00000d  00                DCB      0x00
                  time
00000e  07d0              DCW      0x07d0
