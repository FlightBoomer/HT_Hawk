; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\multirotor_ahrs.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\multirotor_ahrs.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\GPS -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Heigh -I..\..\User\Algorithm\ekf2 -IC:\__Electronic_Projects\STM32\HT_Hawk_0528_1\Project\MDK-ARM(uV5)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\multirotor_ahrs.crf ..\..\User\Function\MultiRotor_ahrs\MultiRotor_ahrs.c]
                          THUMB

                          AREA ||i.AHRS_GetQ||, CODE, READONLY, ALIGN=2

                  AHRS_GetQ PROC
;;;70     /*====================================================================================================*/
;;;71     void AHRS_GetQ( Quaternion *pNumQ )
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;72     {
000004  b08f              SUB      sp,sp,#0x3c
;;;73       fp32 ErrX, ErrY, ErrZ;
;;;74       fp32 AccX, AccY, AccZ;
;;;75       fp32 GyrX, GyrY, GyrZ;
;;;76     	fp32 Normalize;
;;;77       static fp32 exInt = 0.0f, eyInt = 0.0f, ezInt = 0.0f;
;;;78     
;;;79     	
;;;80     	// 加速度归一化
;;;81     	Normalize = Q_rsqrt(squa(sensor.acc.averag.x)+ squa(sensor.acc.averag.y) +squa(sensor.acc.averag.z));
000006  4a93              LDR      r2,|L1.596|
000008  6911              LDR      r1,[r2,#0x10]
00000a  6910              LDR      r0,[r2,#0x10]
00000c  f7fffffe          BL       __aeabi_fmul
000010  4607              MOV      r7,r0
000012  4a90              LDR      r2,|L1.596|
000014  68d1              LDR      r1,[r2,#0xc]
000016  68d0              LDR      r0,[r2,#0xc]
000018  f7fffffe          BL       __aeabi_fmul
00001c  4680              MOV      r8,r0
00001e  4a8d              LDR      r2,|L1.596|
000020  6891              LDR      r1,[r2,#8]  ; sensor
000022  6890              LDR      r0,[r2,#8]  ; sensor
000024  f7fffffe          BL       __aeabi_fmul
000028  4683              MOV      r11,r0
00002a  4641              MOV      r1,r8
00002c  f7fffffe          BL       __aeabi_fadd
000030  4605              MOV      r5,r0
000032  4639              MOV      r1,r7
000034  f7fffffe          BL       __aeabi_fadd
000038  4606              MOV      r6,r0
00003a  f7fffffe          BL       Q_rsqrt
00003e  9008              STR      r0,[sp,#0x20]
;;;82     	AccX = sensor.acc.averag.x*Normalize;
000040  4984              LDR      r1,|L1.596|
000042  6888              LDR      r0,[r1,#8]  ; sensor
000044  9908              LDR      r1,[sp,#0x20]
000046  f7fffffe          BL       __aeabi_fmul
00004a  900e              STR      r0,[sp,#0x38]
;;;83       AccY = sensor.acc.averag.y*Normalize;
00004c  4981              LDR      r1,|L1.596|
00004e  68c8              LDR      r0,[r1,#0xc]
000050  9908              LDR      r1,[sp,#0x20]
000052  f7fffffe          BL       __aeabi_fmul
000056  900d              STR      r0,[sp,#0x34]
;;;84       AccZ = sensor.acc.averag.z*Normalize;
000058  497e              LDR      r1,|L1.596|
00005a  6908              LDR      r0,[r1,#0x10]
00005c  9908              LDR      r1,[sp,#0x20]
00005e  f7fffffe          BL       __aeabi_fmul
000062  900c              STR      r0,[sp,#0x30]
;;;85     
;;;86     	// 提取重力分量
;;;87     	V = Quaternion_vectorGravity(&NumQ);
000064  497c              LDR      r1,|L1.600|
000066  a805              ADD      r0,sp,#0x14
000068  f7fffffe          BL       Quaternion_vectorGravity
00006c  ad05              ADD      r5,sp,#0x14
00006e  497b              LDR      r1,|L1.604|
000070  9805              LDR      r0,[sp,#0x14]
000072  6008              STR      r0,[r1,#0]  ; V
000074  9806              LDR      r0,[sp,#0x18]
000076  6048              STR      r0,[r1,#4]  ; V
000078  9807              LDR      r0,[sp,#0x1c]
00007a  6088              STR      r0,[r1,#8]  ; V
;;;88     	
;;;89     	// 向量差乘
;;;90      	ErrX = (AccY*V.z - AccZ*V.y);
00007c  4608              MOV      r0,r1
00007e  6841              LDR      r1,[r0,#4]  ; V
000080  980c              LDR      r0,[sp,#0x30]
000082  f7fffffe          BL       __aeabi_fmul
000086  4605              MOV      r5,r0
000088  4874              LDR      r0,|L1.604|
00008a  6881              LDR      r1,[r0,#8]  ; V
00008c  980d              LDR      r0,[sp,#0x34]
00008e  f7fffffe          BL       __aeabi_fmul
000092  4606              MOV      r6,r0
000094  4629              MOV      r1,r5
000096  f7fffffe          BL       __aeabi_fsub
00009a  4604              MOV      r4,r0
;;;91       ErrY = (AccZ*V.x - AccX*V.z);
00009c  486f              LDR      r0,|L1.604|
00009e  6881              LDR      r1,[r0,#8]  ; V
0000a0  980e              LDR      r0,[sp,#0x38]
0000a2  f7fffffe          BL       __aeabi_fmul
0000a6  4605              MOV      r5,r0
0000a8  486c              LDR      r0,|L1.604|
0000aa  6801              LDR      r1,[r0,#0]  ; V
0000ac  980c              LDR      r0,[sp,#0x30]
0000ae  f7fffffe          BL       __aeabi_fmul
0000b2  4606              MOV      r6,r0
0000b4  4629              MOV      r1,r5
0000b6  f7fffffe          BL       __aeabi_fsub
0000ba  4681              MOV      r9,r0
;;;92       ErrZ = (AccX*V.y - AccY*V.x);
0000bc  4867              LDR      r0,|L1.604|
0000be  6801              LDR      r1,[r0,#0]  ; V
0000c0  980d              LDR      r0,[sp,#0x34]
0000c2  f7fffffe          BL       __aeabi_fmul
0000c6  4605              MOV      r5,r0
0000c8  4864              LDR      r0,|L1.604|
0000ca  6841              LDR      r1,[r0,#4]  ; V
0000cc  980e              LDR      r0,[sp,#0x38]
0000ce  f7fffffe          BL       __aeabi_fmul
0000d2  4606              MOV      r6,r0
0000d4  4629              MOV      r1,r5
0000d6  f7fffffe          BL       __aeabi_fsub
0000da  4682              MOV      r10,r0
;;;93      	
;;;94      	exInt = exInt + ErrX * KiDef;
0000dc  4960              LDR      r1,|L1.608|
0000de  4620              MOV      r0,r4
0000e0  f7fffffe          BL       __aeabi_fmul
0000e4  4605              MOV      r5,r0
0000e6  485f              LDR      r0,|L1.612|
0000e8  6801              LDR      r1,[r0,#0]  ; exInt
0000ea  4628              MOV      r0,r5
0000ec  f7fffffe          BL       __aeabi_fadd
0000f0  495c              LDR      r1,|L1.612|
0000f2  6008              STR      r0,[r1,#0]  ; exInt
;;;95       eyInt = eyInt + ErrY * KiDef;
0000f4  495a              LDR      r1,|L1.608|
0000f6  4648              MOV      r0,r9
0000f8  f7fffffe          BL       __aeabi_fmul
0000fc  4605              MOV      r5,r0
0000fe  485a              LDR      r0,|L1.616|
000100  6801              LDR      r1,[r0,#0]  ; eyInt
000102  4628              MOV      r0,r5
000104  f7fffffe          BL       __aeabi_fadd
000108  4957              LDR      r1,|L1.616|
00010a  6008              STR      r0,[r1,#0]  ; eyInt
;;;96       ezInt = ezInt + ErrZ * KiDef;
00010c  4954              LDR      r1,|L1.608|
00010e  4650              MOV      r0,r10
000110  f7fffffe          BL       __aeabi_fmul
000114  4605              MOV      r5,r0
000116  4855              LDR      r0,|L1.620|
000118  6801              LDR      r1,[r0,#0]  ; ezInt
00011a  4628              MOV      r0,r5
00011c  f7fffffe          BL       __aeabi_fadd
000120  4952              LDR      r1,|L1.620|
000122  6008              STR      r0,[r1,#0]  ; ezInt
;;;97     
;;;98       GyrX = Rad(sensor.gyro.averag.x) + KpDef * VariableParameter(ErrX) * ErrX  +  exInt;
000124  484f              LDR      r0,|L1.612|
000126  6800              LDR      r0,[r0,#0]  ; exInt
000128  f7fffffe          BL       __aeabi_f2d
00012c  e9cd0104          STRD     r0,r1,[sp,#0x10]
000130  4620              MOV      r0,r4
000132  f7fffffe          BL       VariableParameter
000136  4683              MOV      r11,r0
000138  494d              LDR      r1,|L1.624|
00013a  f7fffffe          BL       __aeabi_fmul
00013e  4680              MOV      r8,r0
000140  4621              MOV      r1,r4
000142  f7fffffe          BL       __aeabi_fmul
000146  4607              MOV      r7,r0
000148  f7fffffe          BL       __aeabi_f2d
00014c  4605              MOV      r5,r0
00014e  460e              MOV      r6,r1
000150  4940              LDR      r1,|L1.596|
000152  6bc8              LDR      r0,[r1,#0x3c]
000154  f7fffffe          BL       __aeabi_f2d
000158  4607              MOV      r7,r0
00015a  f7fffffe          BL       ||Rad||
00015e  462a              MOV      r2,r5
000160  4633              MOV      r3,r6
000162  e9cd0100          STRD     r0,r1,[sp,#0]
000166  f7fffffe          BL       __aeabi_dadd
00016a  e9cd0102          STRD     r0,r1,[sp,#8]
00016e  e9dd2304          LDRD     r2,r3,[sp,#0x10]
000172  f7fffffe          BL       __aeabi_dadd
000176  e9cd0106          STRD     r0,r1,[sp,#0x18]
00017a  f7fffffe          BL       __aeabi_d2f
00017e  900b              STR      r0,[sp,#0x2c]
;;;99       GyrY = Rad(sensor.gyro.averag.y) + KpDef * VariableParameter(ErrY) * ErrY  +  eyInt;
000180  4839              LDR      r0,|L1.616|
000182  6800              LDR      r0,[r0,#0]  ; eyInt
000184  f7fffffe          BL       __aeabi_f2d
000188  e9cd0104          STRD     r0,r1,[sp,#0x10]
00018c  4648              MOV      r0,r9
00018e  f7fffffe          BL       VariableParameter
000192  4683              MOV      r11,r0
000194  4936              LDR      r1,|L1.624|
000196  f7fffffe          BL       __aeabi_fmul
00019a  4606              MOV      r6,r0
00019c  4649              MOV      r1,r9
00019e  f7fffffe          BL       __aeabi_fmul
0001a2  4605              MOV      r5,r0
0001a4  f7fffffe          BL       __aeabi_f2d
0001a8  4607              MOV      r7,r0
0001aa  4688              MOV      r8,r1
0001ac  4929              LDR      r1,|L1.596|
0001ae  6c08              LDR      r0,[r1,#0x40]
0001b0  f7fffffe          BL       __aeabi_f2d
0001b4  4605              MOV      r5,r0
0001b6  f7fffffe          BL       ||Rad||
0001ba  463a              MOV      r2,r7
0001bc  4643              MOV      r3,r8
0001be  e9cd0100          STRD     r0,r1,[sp,#0]
0001c2  f7fffffe          BL       __aeabi_dadd
0001c6  e9cd0102          STRD     r0,r1,[sp,#8]
0001ca  e9dd2304          LDRD     r2,r3,[sp,#0x10]
0001ce  f7fffffe          BL       __aeabi_dadd
0001d2  e9cd0106          STRD     r0,r1,[sp,#0x18]
0001d6  f7fffffe          BL       __aeabi_d2f
0001da  900a              STR      r0,[sp,#0x28]
;;;100    	GyrZ = Rad(sensor.gyro.averag.z) + KpDef * VariableParameter(ErrZ) * ErrZ  +  ezInt;
0001dc  4823              LDR      r0,|L1.620|
0001de  6800              LDR      r0,[r0,#0]  ; ezInt
0001e0  f7fffffe          BL       __aeabi_f2d
0001e4  e9cd0104          STRD     r0,r1,[sp,#0x10]
0001e8  4650              MOV      r0,r10
0001ea  f7fffffe          BL       VariableParameter
0001ee  4920              LDR      r1,|L1.624|
0001f0  9000              STR      r0,[sp,#0]
0001f2  f7fffffe          BL       __aeabi_fmul
0001f6  4651              MOV      r1,r10
0001f8  9001              STR      r0,[sp,#4]
0001fa  f7fffffe          BL       __aeabi_fmul
0001fe  4683              MOV      r11,r0
000200  f7fffffe          BL       __aeabi_f2d
000204  e9cd0102          STRD     r0,r1,[sp,#8]
000208  4912              LDR      r1,|L1.596|
00020a  6c48              LDR      r0,[r1,#0x44]
00020c  f7fffffe          BL       __aeabi_f2d
000210  e9cd0100          STRD     r0,r1,[sp,#0]
000214  f7fffffe          BL       ||Rad||
000218  4607              MOV      r7,r0
00021a  e9dd2302          LDRD     r2,r3,[sp,#8]
00021e  f7fffffe          BL       __aeabi_dadd
000222  4605              MOV      r5,r0
000224  e9dd2304          LDRD     r2,r3,[sp,#0x10]
000228  f7fffffe          BL       __aeabi_dadd
00022c  e9cd0106          STRD     r0,r1,[sp,#0x18]
000230  f7fffffe          BL       __aeabi_d2f
000234  9009              STR      r0,[sp,#0x24]
;;;101    	
;;;102    	
;;;103    	// 一阶龙格库塔法, 更新四元数
;;;104    	Quaternion_RungeKutta(&NumQ, GyrX, GyrY, GyrZ, SampleRateHalf);
000236  480f              LDR      r0,|L1.628|
000238  9000              STR      r0,[sp,#0]
00023a  4807              LDR      r0,|L1.600|
00023c  e9dd3209          LDRD     r3,r2,[sp,#0x24]
000240  990b              LDR      r1,[sp,#0x2c]
000242  f7fffffe          BL       Quaternion_RungeKutta
;;;105    	
;;;106    	// 四元数归一化
;;;107    	Quaternion_Normalize(&NumQ);
000246  4804              LDR      r0,|L1.600|
000248  f7fffffe          BL       Quaternion_Normalize
;;;108    }
00024c  b00f              ADD      sp,sp,#0x3c
00024e  e8bd8ff0          POP      {r4-r11,pc}
;;;109    
                          ENDP

000252  0000              DCW      0x0000
                  |L1.596|
                          DCD      sensor
                  |L1.600|
                          DCD      NumQ
                  |L1.604|
                          DCD      V
                  |L1.608|
                          DCD      0x3a03126f
                  |L1.612|
                          DCD      exInt
                  |L1.616|
                          DCD      eyInt
                  |L1.620|
                          DCD      ezInt
                  |L1.624|
                          DCD      0x3f4ccccd
                  |L1.628|
                          DCD      0x3aa3d70a

                          AREA ||i.AHRS_Geteuler||, CODE, READONLY, ALIGN=2

                  AHRS_Geteuler PROC
;;;118    /*====================================================================================================*/
;;;119    void AHRS_Geteuler(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;120    {
000004  b087              SUB      sp,sp,#0x1c
;;;121    	fp32 sin_pitch,sin_roll,cos_roll,cos_pitch;
;;;122    	
;;;123    	AHRS_getValues();
000006  f7fffffe          BL       AHRS_getValues
;;;124    	
;;;125    	// 获取四元数
;;;126      AHRS_GetQ(&NumQ);
00000a  4888              LDR      r0,|L2.556|
00000c  f7fffffe          BL       AHRS_GetQ
;;;127    	
;;;128      // 四元数转欧拉角
;;;129    	Quaternion_ToAngE(&NumQ, &AngE);
000010  4987              LDR      r1,|L2.560|
000012  4886              LDR      r0,|L2.556|
000014  f7fffffe          BL       Quaternion_ToAngE
;;;130    	
;;;131      // 计算欧拉角的三角函数值
;;;132      sin_roll  = sin(AngE.Roll);
000018  4985              LDR      r1,|L2.560|
00001a  6848              LDR      r0,[r1,#4]  ; AngE
00001c  f7fffffe          BL       __aeabi_f2d
000020  4606              MOV      r6,r0
000022  f7fffffe          BL       ||sin||
000026  4604              MOV      r4,r0
000028  f7fffffe          BL       __aeabi_d2f
00002c  9005              STR      r0,[sp,#0x14]
;;;133      sin_pitch = sin(AngE.Pitch);
00002e  4980              LDR      r1,|L2.560|
000030  6808              LDR      r0,[r1,#0]  ; AngE
000032  f7fffffe          BL       __aeabi_f2d
000036  4606              MOV      r6,r0
000038  f7fffffe          BL       ||sin||
00003c  4604              MOV      r4,r0
00003e  f7fffffe          BL       __aeabi_d2f
000042  9006              STR      r0,[sp,#0x18]
;;;134      cos_roll  = cos(AngE.Roll);
000044  497a              LDR      r1,|L2.560|
000046  6848              LDR      r0,[r1,#4]  ; AngE
000048  f7fffffe          BL       __aeabi_f2d
00004c  4606              MOV      r6,r0
00004e  f7fffffe          BL       ||cos||
000052  4604              MOV      r4,r0
000054  f7fffffe          BL       __aeabi_d2f
000058  9004              STR      r0,[sp,#0x10]
;;;135      cos_pitch = cos(AngE.Pitch);
00005a  4975              LDR      r1,|L2.560|
00005c  6808              LDR      r0,[r1,#0]  ; AngE
00005e  f7fffffe          BL       __aeabi_f2d
000062  4606              MOV      r6,r0
000064  f7fffffe          BL       ||cos||
000068  4604              MOV      r4,r0
00006a  f7fffffe          BL       __aeabi_d2f
00006e  9003              STR      r0,[sp,#0xc]
;;;136    	
;;;137    	//  地磁不存在或地磁数据不正常则停用地磁数据
;;;138      //flag.MagIssue=0;//地磁存在问题，待调试解决
;;;139      //flag.MagExist=0;
;;;140    
;;;141    	if(!flag.MagIssue && flag.MagExist){//40US
000070  4870              LDR      r0,|L2.564|
000072  78c0              LDRB     r0,[r0,#3]  ; flag
000074  2800              CMP      r0,#0
000076  d17d              BNE      |L2.372|
000078  486e              LDR      r0,|L2.564|
00007a  7840              LDRB     r0,[r0,#1]  ; flag
00007c  2800              CMP      r0,#0
00007e  d079              BEQ      |L2.372|
;;;142    		// 地磁倾角补偿
;;;143    		fp32 hx = MAG[0]*cos_pitch + MAG[1]*sin_pitch*sin_roll - MAG[2]*cos_roll*sin_pitch; 
000080  496d              LDR      r1,|L2.568|
000082  f9b10004          LDRSH    r0,[r1,#4]  ; MAG
000086  f7fffffe          BL       __aeabi_i2f
00008a  4607              MOV      r7,r0
00008c  9904              LDR      r1,[sp,#0x10]
00008e  f7fffffe          BL       __aeabi_fmul
000092  4606              MOV      r6,r0
000094  9906              LDR      r1,[sp,#0x18]
000096  f7fffffe          BL       __aeabi_fmul
00009a  4604              MOV      r4,r0
00009c  4966              LDR      r1,|L2.568|
00009e  f9b10002          LDRSH    r0,[r1,#2]  ; MAG
0000a2  f7fffffe          BL       __aeabi_i2f
0000a6  4681              MOV      r9,r0
0000a8  9906              LDR      r1,[sp,#0x18]
0000aa  f7fffffe          BL       __aeabi_fmul
0000ae  4680              MOV      r8,r0
0000b0  9905              LDR      r1,[sp,#0x14]
0000b2  f7fffffe          BL       __aeabi_fmul
0000b6  4606              MOV      r6,r0
0000b8  495f              LDR      r1,|L2.568|
0000ba  f9b10000          LDRSH    r0,[r1,#0]  ; MAG
0000be  f7fffffe          BL       __aeabi_i2f
0000c2  4680              MOV      r8,r0
0000c4  9903              LDR      r1,[sp,#0xc]
0000c6  f7fffffe          BL       __aeabi_fmul
0000ca  4607              MOV      r7,r0
0000cc  4631              MOV      r1,r6
0000ce  f7fffffe          BL       __aeabi_fadd
0000d2  4605              MOV      r5,r0
0000d4  4621              MOV      r1,r4
0000d6  f7fffffe          BL       __aeabi_fsub
0000da  4683              MOV      r11,r0
;;;144    		fp32 hy = MAG[1]*cos_roll + MAG[2]*sin_roll;
0000dc  4956              LDR      r1,|L2.568|
0000de  f9b10004          LDRSH    r0,[r1,#4]  ; MAG
0000e2  f7fffffe          BL       __aeabi_i2f
0000e6  4606              MOV      r6,r0
0000e8  9905              LDR      r1,[sp,#0x14]
0000ea  f7fffffe          BL       __aeabi_fmul
0000ee  4604              MOV      r4,r0
0000f0  4951              LDR      r1,|L2.568|
0000f2  f9b10002          LDRSH    r0,[r1,#2]  ; MAG
0000f6  f7fffffe          BL       __aeabi_i2f
0000fa  4606              MOV      r6,r0
0000fc  9904              LDR      r1,[sp,#0x10]
0000fe  f7fffffe          BL       __aeabi_fmul
000102  4605              MOV      r5,r0
000104  4621              MOV      r1,r4
000106  f7fffffe          BL       __aeabi_fadd
00010a  9002              STR      r0,[sp,#8]
;;;145    		
;;;146    		// 利用地磁解算航向角
;;;147    		fp32 mag_yaw = -Degree(atan2((fp64)hy,(fp64)hx));
00010c  4658              MOV      r0,r11
00010e  f7fffffe          BL       __aeabi_f2d
000112  e9cd0100          STRD     r0,r1,[sp,#0]
000116  9802              LDR      r0,[sp,#8]
000118  f7fffffe          BL       __aeabi_f2d
00011c  4680              MOV      r8,r0
00011e  e9dd2300          LDRD     r2,r3,[sp,#0]
000122  f7fffffe          BL       atan2
000126  4606              MOV      r6,r0
000128  f7fffffe          BL       Degree
00012c  f0814100          EOR      r1,r1,#0x80000000
000130  4604              MOV      r4,r0
000132  f7fffffe          BL       __aeabi_d2f
000136  4682              MOV      r10,r0
;;;148    		 yawangle=mag_yaw;
000138  4840              LDR      r0,|L2.572|
00013a  f8c0a000          STR      r10,[r0,#0]  ; yawangle
;;;149    		// 陀螺仪积分解算航向角
;;;150    //		AngE.Yaw += Degree(sensor.gyro.averag.z * Gyro_Gr * 2 * SampleRateHalf);//重大bug，已经是角度，这里不能再乘以Gyro_Gr了
;;;151    		AngE.Yaw += sensor.gyro.averag.z * 2  * SampleRateHalf;
00013e  4940              LDR      r1,|L2.576|
000140  6c48              LDR      r0,[r1,#0x44]
000142  f04f4180          MOV      r1,#0x40000000
000146  f7fffffe          BL       __aeabi_fmul
00014a  4605              MOV      r5,r0
00014c  493d              LDR      r1,|L2.580|
00014e  f7fffffe          BL       __aeabi_fmul
000152  4604              MOV      r4,r0
000154  4836              LDR      r0,|L2.560|
000156  6881              LDR      r1,[r0,#8]  ; AngE
000158  4620              MOV      r0,r4
00015a  f7fffffe          BL       __aeabi_fadd
00015e  4934              LDR      r1,|L2.560|
000160  6088              STR      r0,[r1,#8]  ; AngE
;;;152    		// 地磁解算的航向角与陀螺仪积分解算的航向角进行互补融合 
;;;153    		if((mag_yaw>90 && IMU.Yaw<-90) || (mag_yaw<-90 && IMU.Yaw>90)) 
000162  4939              LDR      r1,|L2.584|
000164  4650              MOV      r0,r10
000166  f7fffffe          BL       __aeabi_cfrcmple
00016a  d207              BCS      |L2.380|
00016c  4937              LDR      r1,|L2.588|
00016e  6888              LDR      r0,[r1,#8]  ; IMU
000170  4937              LDR      r1,|L2.592|
000172  e000              B        |L2.374|
                  |L2.372|
000174  e032              B        |L2.476|
                  |L2.374|
000176  f7fffffe          BL       __aeabi_cfcmple
00017a  d30a              BCC      |L2.402|
                  |L2.380|
00017c  4934              LDR      r1,|L2.592|
00017e  4650              MOV      r0,r10
000180  f7fffffe          BL       __aeabi_cfcmple
000184  d219              BCS      |L2.442|
000186  4931              LDR      r1,|L2.588|
000188  6888              LDR      r0,[r1,#8]  ; IMU
00018a  492f              LDR      r1,|L2.584|
00018c  f7fffffe          BL       __aeabi_cfrcmple
000190  d213              BCS      |L2.442|
                  |L2.402|
;;;154    			IMU.Yaw = -IMU.Yaw * 0.988f + mag_yaw * 0.012f;
000192  4930              LDR      r1,|L2.596|
000194  4650              MOV      r0,r10
000196  f7fffffe          BL       __aeabi_fmul
00019a  4606              MOV      r6,r0
00019c  482b              LDR      r0,|L2.588|
00019e  6880              LDR      r0,[r0,#8]  ; IMU
0001a0  f0804500          EOR      r5,r0,#0x80000000
0001a4  492c              LDR      r1,|L2.600|
0001a6  4628              MOV      r0,r5
0001a8  f7fffffe          BL       __aeabi_fmul
0001ac  4604              MOV      r4,r0
0001ae  4631              MOV      r1,r6
0001b0  f7fffffe          BL       __aeabi_fadd
0001b4  4925              LDR      r1,|L2.588|
0001b6  6088              STR      r0,[r1,#8]  ; IMU
0001b8  e00f              B        |L2.474|
                  |L2.442|
;;;155    		else 
;;;156    			IMU.Yaw = IMU.Yaw * 0.988f + mag_yaw * 0.012f;
0001ba  4926              LDR      r1,|L2.596|
0001bc  4650              MOV      r0,r10
0001be  f7fffffe          BL       __aeabi_fmul
0001c2  4604              MOV      r4,r0
0001c4  4921              LDR      r1,|L2.588|
0001c6  6888              LDR      r0,[r1,#8]  ; IMU
0001c8  4923              LDR      r1,|L2.600|
0001ca  f7fffffe          BL       __aeabi_fmul
0001ce  4605              MOV      r5,r0
0001d0  4621              MOV      r1,r4
0001d2  f7fffffe          BL       __aeabi_fadd
0001d6  491d              LDR      r1,|L2.588|
0001d8  6088              STR      r0,[r1,#8]  ; IMU
                  |L2.474|
;;;157    	}
0001da  e00b              B        |L2.500|
                  |L2.476|
;;;158    	else 
;;;159    		IMU.Yaw = Degree(AngE.Yaw);
0001dc  4914              LDR      r1,|L2.560|
0001de  6888              LDR      r0,[r1,#8]  ; AngE
0001e0  f7fffffe          BL       __aeabi_f2d
0001e4  4606              MOV      r6,r0
0001e6  f7fffffe          BL       Degree
0001ea  4604              MOV      r4,r0
0001ec  f7fffffe          BL       __aeabi_d2f
0001f0  4916              LDR      r1,|L2.588|
0001f2  6088              STR      r0,[r1,#8]  ; IMU
                  |L2.500|
;;;160    
;;;161      IMU.Roll = Degree(AngE.Roll);  // roll
0001f4  490e              LDR      r1,|L2.560|
0001f6  6848              LDR      r0,[r1,#4]  ; AngE
0001f8  f7fffffe          BL       __aeabi_f2d
0001fc  4606              MOV      r6,r0
0001fe  f7fffffe          BL       Degree
000202  4604              MOV      r4,r0
000204  f7fffffe          BL       __aeabi_d2f
000208  4910              LDR      r1,|L2.588|
00020a  6048              STR      r0,[r1,#4]  ; IMU
;;;162    	IMU.Pitch = Degree(AngE.Pitch); // pitch
00020c  4908              LDR      r1,|L2.560|
00020e  6808              LDR      r0,[r1,#0]  ; AngE
000210  f7fffffe          BL       __aeabi_f2d
000214  4606              MOV      r6,r0
000216  f7fffffe          BL       Degree
00021a  4604              MOV      r4,r0
00021c  f7fffffe          BL       __aeabi_d2f
000220  490a              LDR      r1,|L2.588|
000222  6008              STR      r0,[r1,#0]  ; IMU
;;;163    }
000224  b007              ADD      sp,sp,#0x1c
000226  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

00022a  0000              DCW      0x0000
                  |L2.556|
                          DCD      NumQ
                  |L2.560|
                          DCD      AngE
                  |L2.564|
                          DCD      flag
                  |L2.568|
                          DCD      MAG
                  |L2.572|
                          DCD      yawangle
                  |L2.576|
                          DCD      sensor
                  |L2.580|
                          DCD      0x3aa3d70a
                  |L2.584|
                          DCD      0x42b40000
                  |L2.588|
                          DCD      IMU
                  |L2.592|
                          DCD      0xc2b40000
                  |L2.596|
                          DCD      0x3c449ba6
                  |L2.600|
                          DCD      0x3f7ced91

                          AREA ||i.AHRS_getValues||, CODE, READONLY, ALIGN=2

                  AHRS_getValues PROC
;;;42     
;;;43     void AHRS_getValues(void)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;44     {
;;;45     	static float x,y,z;
;;;46     	
;;;47     	MPU6050_Dataanl();
000004  f7fffffe          BL       MPU6050_Dataanl
;;;48     	
;;;49     	HMC5883lRead(MAG);//260us
000008  484d              LDR      r0,|L3.320|
00000a  f7fffffe          BL       HMC5883lRead
;;;50     	
;;;51     	// 加速度计IIR滤波
;;;52     	sensor.acc.averag.x = IIR_I_Filter(sensor.acc.origin.x, InPut_IIR[0], OutPut_IIR[0], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
00000e  494d              LDR      r1,|L3.324|
000010  f9b10000          LDRSH    r0,[r1,#0]  ; sensor
000014  f7fffffe          BL       __aeabi_i2d
000018  4606              MOV      r6,r0
00001a  460f              MOV      r7,r1
00001c  2005              MOVS     r0,#5
00001e  494a              LDR      r1,|L3.328|
000020  4b4a              LDR      r3,|L3.332|
000022  e9cd3000          STRD     r3,r0,[sp,#0]
000026  4b4a              LDR      r3,|L3.336|
000028  4a4a              LDR      r2,|L3.340|
00002a  e9cd1002          STRD     r1,r0,[sp,#8]
00002e  4630              MOV      r0,r6
000030  4639              MOV      r1,r7
000032  f7fffffe          BL       IIR_I_Filter
000036  4604              MOV      r4,r0
000038  f7fffffe          BL       __aeabi_d2f
00003c  4941              LDR      r1,|L3.324|
00003e  6088              STR      r0,[r1,#8]  ; sensor
;;;53     	sensor.acc.averag.y = IIR_I_Filter(sensor.acc.origin.y, InPut_IIR[1], OutPut_IIR[1], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
000040  f9b10002          LDRSH    r0,[r1,#2]  ; sensor
000044  f7fffffe          BL       __aeabi_i2d
000048  4606              MOV      r6,r0
00004a  460f              MOV      r7,r1
00004c  2005              MOVS     r0,#5
00004e  493e              LDR      r1,|L3.328|
000050  4b3e              LDR      r3,|L3.332|
000052  e9cd3000          STRD     r3,r0,[sp,#0]
000056  4b3e              LDR      r3,|L3.336|
000058  3328              ADDS     r3,r3,#0x28
00005a  4a3e              LDR      r2,|L3.340|
00005c  3228              ADDS     r2,r2,#0x28
00005e  e9cd1002          STRD     r1,r0,[sp,#8]
000062  4630              MOV      r0,r6
000064  4639              MOV      r1,r7
000066  f7fffffe          BL       IIR_I_Filter
00006a  4604              MOV      r4,r0
00006c  f7fffffe          BL       __aeabi_d2f
000070  4934              LDR      r1,|L3.324|
000072  60c8              STR      r0,[r1,#0xc]
;;;54     	sensor.acc.averag.z = IIR_I_Filter(sensor.acc.origin.z, InPut_IIR[2], OutPut_IIR[2], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
000074  f9b10004          LDRSH    r0,[r1,#4]  ; sensor
000078  f7fffffe          BL       __aeabi_i2d
00007c  4606              MOV      r6,r0
00007e  460f              MOV      r7,r1
000080  2005              MOVS     r0,#5
000082  4931              LDR      r1,|L3.328|
000084  4b31              LDR      r3,|L3.332|
000086  e9cd3000          STRD     r3,r0,[sp,#0]
00008a  4b31              LDR      r3,|L3.336|
00008c  3350              ADDS     r3,r3,#0x50
00008e  4a31              LDR      r2,|L3.340|
000090  3250              ADDS     r2,r2,#0x50
000092  e9cd1002          STRD     r1,r0,[sp,#8]
000096  4630              MOV      r0,r6
000098  4639              MOV      r1,r7
00009a  f7fffffe          BL       IIR_I_Filter
00009e  4604              MOV      r4,r0
0000a0  f7fffffe          BL       __aeabi_d2f
0000a4  4927              LDR      r1,|L3.324|
0000a6  6108              STR      r0,[r1,#0x10]
;;;55     	
;;;56     	// 陀螺仪一阶低通滤波
;;;57      	sensor.gyro.averag.x = LPF_1st(x,sensor.gyro.radian.x * Gyro_G,0.386f);	x = sensor.gyro.averag.x;
0000a8  6dc8              LDR      r0,[r1,#0x5c]
0000aa  f7fffffe          BL       __aeabi_f2d
0000ae  4607              MOV      r7,r0
0000b0  4a29              LDR      r2,|L3.344|
0000b2  4b2a              LDR      r3,|L3.348|
0000b4  f7fffffe          BL       __aeabi_dmul
0000b8  4605              MOV      r5,r0
0000ba  f7fffffe          BL       __aeabi_d2f
0000be  4604              MOV      r4,r0
0000c0  4a27              LDR      r2,|L3.352|
0000c2  4621              MOV      r1,r4
0000c4  4827              LDR      r0,|L3.356|
0000c6  6800              LDR      r0,[r0,#0]  ; x
0000c8  f7fffffe          BL       LPF_1st
0000cc  491d              LDR      r1,|L3.324|
0000ce  63c8              STR      r0,[r1,#0x3c]
0000d0  4608              MOV      r0,r1
0000d2  6bc0              LDR      r0,[r0,#0x3c]
0000d4  4923              LDR      r1,|L3.356|
0000d6  6008              STR      r0,[r1,#0]  ; x
;;;58      	sensor.gyro.averag.y = LPF_1st(y,sensor.gyro.radian.y * Gyro_G,0.386f);	y = sensor.gyro.averag.y;
0000d8  491a              LDR      r1,|L3.324|
0000da  6e08              LDR      r0,[r1,#0x60]
0000dc  f7fffffe          BL       __aeabi_f2d
0000e0  4607              MOV      r7,r0
0000e2  4a1d              LDR      r2,|L3.344|
0000e4  4b1d              LDR      r3,|L3.348|
0000e6  f7fffffe          BL       __aeabi_dmul
0000ea  4605              MOV      r5,r0
0000ec  f7fffffe          BL       __aeabi_d2f
0000f0  4604              MOV      r4,r0
0000f2  4a1b              LDR      r2,|L3.352|
0000f4  4621              MOV      r1,r4
0000f6  481c              LDR      r0,|L3.360|
0000f8  6800              LDR      r0,[r0,#0]  ; y
0000fa  f7fffffe          BL       LPF_1st
0000fe  4601              MOV      r1,r0
000100  4810              LDR      r0,|L3.324|
000102  6401              STR      r1,[r0,#0x40]
000104  6c00              LDR      r0,[r0,#0x40]
000106  4918              LDR      r1,|L3.360|
000108  6008              STR      r0,[r1,#0]  ; y
;;;59      	sensor.gyro.averag.z = LPF_1st(z,sensor.gyro.radian.z * Gyro_G ,0.386f);	z = sensor.gyro.averag.z;//
00010a  490e              LDR      r1,|L3.324|
00010c  6e48              LDR      r0,[r1,#0x64]
00010e  f7fffffe          BL       __aeabi_f2d
000112  4607              MOV      r7,r0
000114  4a10              LDR      r2,|L3.344|
000116  4b11              LDR      r3,|L3.348|
000118  f7fffffe          BL       __aeabi_dmul
00011c  4605              MOV      r5,r0
00011e  f7fffffe          BL       __aeabi_d2f
000122  4604              MOV      r4,r0
000124  4a0e              LDR      r2,|L3.352|
000126  4621              MOV      r1,r4
000128  4810              LDR      r0,|L3.364|
00012a  6800              LDR      r0,[r0,#0]  ; z
00012c  f7fffffe          BL       LPF_1st
000130  4601              MOV      r1,r0
000132  4804              LDR      r0,|L3.324|
000134  6441              STR      r1,[r0,#0x44]
000136  6c40              LDR      r0,[r0,#0x44]
000138  490c              LDR      r1,|L3.364|
00013a  6008              STR      r0,[r1,#0]  ; z
;;;60     }
00013c  e8bd81ff          POP      {r0-r8,pc}
;;;61     
                          ENDP

                  |L3.320|
                          DCD      MAG
                  |L3.324|
                          DCD      sensor
                  |L3.328|
                          DCD      a_IIR
                  |L3.332|
                          DCD      b_IIR
                  |L3.336|
                          DCD      OutPut_IIR
                  |L3.340|
                          DCD      InPut_IIR
                  |L3.344|
                          DCD      0xc89d6830
                  |L3.348|
                          DCD      0x3f9f3ffe
                  |L3.352|
                          DCD      0x3ec5a1cb
                  |L3.356|
                          DCD      x
                  |L3.360|
                          DCD      y
                  |L3.364|
                          DCD      z

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  InPut_IIR
                          %        120
                  OutPut_IIR
                          %        120
                  AngE
                          %        12
                  IMU
                          %        12
                  V
                          %        12

                          AREA ||.data||, DATA, ALIGN=3

                  b_IIR
000000  e0000000          DCFD     0x3f4a36e2e0000000 ; 0.00079999997979030013
000004  3f4a36e2
000008  e0000000          DCFD     0x3f6a36e2e0000000 ; 0.0031999999191612005
00000c  3f6a36e2
000010  40000000          DCFD     0x3f73a92a40000000 ; 0.0048000002279877663
000014  3f73a92a
000018  e0000000          DCFD     0x3f6a36e2e0000000 ; 0.0031999999191612005
00001c  3f6a36e2
000020  e0000000          DCFD     0x3f4a36e2e0000000 ; 0.00079999997979030013
000024  3f4a36e2
                  a_IIR
000028  00000000          DCFD     0x3ff0000000000000 ; 1
00002c  3ff00000
000030  80000000          DCFD     0xc008240b80000000 ; -3.0176000595092773
000034  c008240b
000038  e0000000          DCFD     0x400c0ebee0000000 ; 3.5072000026702881
00003c  400c0ebe
000040  00000000          DCFD     0xbffd8fc500000000 ; -1.847599983215332
000044  bffd8fc5
000048  e0000000          DCFD     0x3fd7bb2fe0000000 ; 0.37079998850822449
00004c  3fd7bb2f
                  yawangle
                          DCD      0x00000000
                  testtime
000054  00000000          DCB      0x00,0x00,0x00,0x00
                  NumQ
000058  3f800000          DCFS     0x3f800000 ; 1
00005c  00000000          DCFS     0x00000000 ; 0
000060  00000000          DCFS     0x00000000 ; 0
000064  00000000          DCFS     0x00000000 ; 0
                  MAG
                          DCD      0x00000000
00006c  00000000          DCB      0x00,0x00,0x00,0x00
                  x
                          DCD      0x00000000
                  y
                          DCD      0x00000000
                  z
                          DCD      0x00000000
                  exInt
00007c  00000000          DCFS     0x00000000 ; 0
                  eyInt
000080  00000000          DCFS     0x00000000 ; 0
                  ezInt
000084  00000000          DCFS     0x00000000 ; 0
