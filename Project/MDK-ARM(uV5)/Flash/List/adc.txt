; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\adc.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\adc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\GPS -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Heigh -I..\..\User\Algorithm\ekf2 -IC:\__Electronic_Projects\STM32\HT_Hawk_0528_1\Project\MDK-ARM(uV5)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\adc.crf ..\..\User\Driver\ADC\adc.c]
                          THUMB

                          AREA ||i.ADC1_GPIO_Config||, CODE, READONLY, ALIGN=2

                  ADC1_GPIO_Config PROC
;;;17     
;;;18     static void ADC1_GPIO_Config(void)
000000  b508              PUSH     {r3,lr}
;;;19     {
;;;20     	GPIO_InitTypeDef GPIO_InitStructure;
;;;21     
;;;22       RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;23     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  f44f7001          MOV      r0,#0x204
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;24     	RCC_ADCCLKConfig(RCC_PCLK2_Div6);
000014  f44f4000          MOV      r0,#0x8000
000018  f7fffffe          BL       RCC_ADCCLKConfig
;;;25     
;;;26     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
00001c  2010              MOVS     r0,#0x10
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;27       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
000022  2000              MOVS     r0,#0
000024  f88d0003          STRB     r0,[sp,#3]
;;;28       GPIO_Init(GPIOA, &GPIO_InitStructure);	
000028  4669              MOV      r1,sp
00002a  4802              LDR      r0,|L1.52|
00002c  f7fffffe          BL       GPIO_Init
;;;29     				
;;;30     }
000030  bd08              POP      {r3,pc}
;;;31     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0x40010800

                          AREA ||i.ADC1_Init||, CODE, READONLY, ALIGN=1

                  ADC1_Init PROC
;;;97      */
;;;98     void ADC1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;99     {
;;;100    	ADC1_GPIO_Config();
000002  f7fffffe          BL       ADC1_GPIO_Config
;;;101    	ADC1_Mode_Config();
000006  f7fffffe          BL       ADC1_Mode_Config
;;;102    }
00000a  bd10              POP      {r4,pc}
;;;103    
                          ENDP


                          AREA ||i.ADC1_Mode_Config||, CODE, READONLY, ALIGN=2

                  ADC1_Mode_Config PROC
;;;31     
;;;32     static void ADC1_Mode_Config(void)
000000  b500              PUSH     {lr}
;;;33     {
000002  b091              SUB      sp,sp,#0x44
;;;34     	DMA_InitTypeDef DMA_InitStructure;
;;;35     	ADC_InitTypeDef ADC_InitStructure;
;;;36     
;;;37     	/* DMA channel1 configuration */
;;;38       DMA_DeInit(DMA1_Channel1);
000004  4833              LDR      r0,|L3.212|
000006  f7fffffe          BL       DMA_DeInit
;;;39       DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address;    //DMA外设基地址
00000a  4833              LDR      r0,|L3.216|
00000c  9006              STR      r0,[sp,#0x18]
;;;40       DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&ADC_ConvertedValue;  //DMA内存基地址
00000e  4833              LDR      r0,|L3.220|
000010  9007              STR      r0,[sp,#0x1c]
;;;41       DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;      //数据传输方向，从外设发送到内存
000012  2000              MOVS     r0,#0
000014  9008              STR      r0,[sp,#0x20]
;;;42       DMA_InitStructure.DMA_BufferSize = 1;
000016  2001              MOVS     r0,#1
000018  9009              STR      r0,[sp,#0x24]
;;;43       DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;   //外设地址寄存器不变
00001a  2000              MOVS     r0,#0
00001c  900a              STR      r0,[sp,#0x28]
;;;44       DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;            //内存地址寄存器递增
00001e  2080              MOVS     r0,#0x80
000020  900b              STR      r0,[sp,#0x2c]
;;;45       DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
000022  0040              LSLS     r0,r0,#1
000024  900c              STR      r0,[sp,#0x30]
;;;46       DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
000026  0080              LSLS     r0,r0,#2
000028  900d              STR      r0,[sp,#0x34]
;;;47       DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;   //工作在循环缓存模式
00002a  2020              MOVS     r0,#0x20
00002c  900e              STR      r0,[sp,#0x38]
;;;48       DMA_InitStructure.DMA_Priority = DMA_Priority_High;
00002e  0200              LSLS     r0,r0,#8
000030  900f              STR      r0,[sp,#0x3c]
;;;49       DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
000032  2000              MOVS     r0,#0
000034  9010              STR      r0,[sp,#0x40]
;;;50       DMA_Init(DMA1_Channel1, &DMA_InitStructure);
000036  a906              ADD      r1,sp,#0x18
000038  4826              LDR      r0,|L3.212|
00003a  f7fffffe          BL       DMA_Init
;;;51       
;;;52       /* Enable DMA channel1 */
;;;53       DMA_Cmd(DMA1_Channel1, ENABLE);
00003e  2101              MOVS     r1,#1
000040  4824              LDR      r0,|L3.212|
000042  f7fffffe          BL       DMA_Cmd
;;;54          
;;;55       /* ADC1 configuration */
;;;56       ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;	//独立模式 每个ADC独立工作
000046  2000              MOVS     r0,#0
000048  9001              STR      r0,[sp,#4]
;;;57       ADC_InitStructure.ADC_ScanConvMode = ENABLE;				 //使用扫描模式  scan位设置
00004a  2001              MOVS     r0,#1
00004c  f88d0008          STRB     r0,[sp,#8]
;;;58       ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;	// cont位设置 连续转换模式
000050  f88d0009          STRB     r0,[sp,#9]
;;;59       ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;	;//EXTSEL 选择启动规则通道组转换的外部事件 设置成有软件控制
000054  f44f2060          MOV      r0,#0xe0000
000058  9003              STR      r0,[sp,#0xc]
;;;60       ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;	//数据对齐 由软件置位和清楚   这里设置成右对齐
00005a  2000              MOVS     r0,#0
00005c  9004              STR      r0,[sp,#0x10]
;;;61       ADC_InitStructure.ADC_NbrOfChannel = 1;		//规则通道序列长度 这些位由软件定义在规则通道转换序列中的通道数目 1个转换 指定由多少个通道被转换
00005e  2001              MOVS     r0,#1
000060  f88d0014          STRB     r0,[sp,#0x14]
;;;62       ADC_Init(ADC1, &ADC_InitStructure);
000064  a901              ADD      r1,sp,#4
000066  481c              LDR      r0,|L3.216|
000068  384c              SUBS     r0,r0,#0x4c
00006a  f7fffffe          BL       ADC_Init
;;;63     
;;;64       /* ADC1 regular channel11 configuration */ 
;;;65     	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 1, ADC_SampleTime_55Cycles5);	//转换时间是55.5个周期
00006e  2305              MOVS     r3,#5
000070  2201              MOVS     r2,#1
000072  2104              MOVS     r1,#4
000074  4818              LDR      r0,|L3.216|
000076  384c              SUBS     r0,r0,#0x4c
000078  f7fffffe          BL       ADC_RegularChannelConfig
;;;66     
;;;67     
;;;68       /* Enable ADC1 external trigger */
;;;69       ADC_ExternalTrigConvCmd(ADC1, DISABLE);
00007c  2100              MOVS     r1,#0
00007e  4816              LDR      r0,|L3.216|
000080  384c              SUBS     r0,r0,#0x4c
000082  f7fffffe          BL       ADC_ExternalTrigConvCmd
;;;70     
;;;71       /* Enable ADC1 DMA */
;;;72       ADC_DMACmd(ADC1, ENABLE);
000086  2101              MOVS     r1,#1
000088  4813              LDR      r0,|L3.216|
00008a  384c              SUBS     r0,r0,#0x4c
00008c  f7fffffe          BL       ADC_DMACmd
;;;73       
;;;74       /* Enable ADC1 */
;;;75       ADC_Cmd(ADC1, ENABLE);
000090  2101              MOVS     r1,#1
000092  4811              LDR      r0,|L3.216|
000094  384c              SUBS     r0,r0,#0x4c
000096  f7fffffe          BL       ADC_Cmd
;;;76     
;;;77       /* Enable ADC1 reset calibaration register */   
;;;78       ADC_ResetCalibration(ADC1);
00009a  480f              LDR      r0,|L3.216|
00009c  384c              SUBS     r0,r0,#0x4c
00009e  f7fffffe          BL       ADC_ResetCalibration
;;;79       /* Check the end of ADC1 reset calibration register */
;;;80       while(ADC_GetResetCalibrationStatus(ADC1));
0000a2  bf00              NOP      
                  |L3.164|
0000a4  480c              LDR      r0,|L3.216|
0000a6  384c              SUBS     r0,r0,#0x4c
0000a8  f7fffffe          BL       ADC_GetResetCalibrationStatus
0000ac  2800              CMP      r0,#0
0000ae  d1f9              BNE      |L3.164|
;;;81     
;;;82       /* Start ADC1 calibaration */
;;;83       ADC_StartCalibration(ADC1);
0000b0  4809              LDR      r0,|L3.216|
0000b2  384c              SUBS     r0,r0,#0x4c
0000b4  f7fffffe          BL       ADC_StartCalibration
;;;84       /* Check the end of ADC1 calibration */
;;;85       while(ADC_GetCalibrationStatus(ADC1));
0000b8  bf00              NOP      
                  |L3.186|
0000ba  4807              LDR      r0,|L3.216|
0000bc  384c              SUBS     r0,r0,#0x4c
0000be  f7fffffe          BL       ADC_GetCalibrationStatus
0000c2  2800              CMP      r0,#0
0000c4  d1f9              BNE      |L3.186|
;;;86          
;;;87       /* Start ADC1 Software Conversion */ 
;;;88       ADC_SoftwareStartConvCmd(ADC1, ENABLE);
0000c6  2101              MOVS     r1,#1
0000c8  4803              LDR      r0,|L3.216|
0000ca  384c              SUBS     r0,r0,#0x4c
0000cc  f7fffffe          BL       ADC_SoftwareStartConvCmd
;;;89     }
0000d0  b011              ADD      sp,sp,#0x44
0000d2  bd00              POP      {pc}
;;;90     
                          ENDP

                  |L3.212|
                          DCD      0x40020008
                  |L3.216|
                          DCD      0x4001244c
                  |L3.220|
                          DCD      ADC_ConvertedValue

                          AREA ||.data||, DATA, ALIGN=1

                  ADC_ConvertedValue
000000  0000              DCB      0x00,0x00
