; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\algorithm_filter.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\algorithm_filter.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\GPS -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Heigh -IC:\__Electronic_Projects\STM32\HT_Hawk_0528_1\Project\MDK-ARM(uV5)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\algorithm_filter.crf ..\..\User\Algorithm\Algorithm_filter\Algorithm_filter.c]
                          THUMB

                          AREA ||i.IIR_I_Filter||, CODE, READONLY, ALIGN=1

                  IIR_I_Filter PROC
;;;33     /*====================================================================================================*/
;;;34     double IIR_I_Filter(double InData, double *x, double *y, double *b, short nb, double *a, short na)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;35     {
000004  b088              SUB      sp,sp,#0x20
000006  4692              MOV      r10,r2
000008  4699              MOV      r9,r3
00000a  f8ddb05c          LDR      r11,[sp,#0x5c]
;;;36       double z1,z2;
;;;37       short i;
;;;38       double OutData;
;;;39       
;;;40       for(i=nb-1; i>0; i--)
00000e  f1ab0001          SUB      r0,r11,#1
000012  b204              SXTH     r4,r0
000014  e008              B        |L1.40|
                  |L1.22|
;;;41       {
;;;42         x[i]=x[i-1];
000016  1e60              SUBS     r0,r4,#1
000018  eb0a01c0          ADD      r1,r10,r0,LSL #3
00001c  c903              LDM      r1,{r0,r1}
00001e  eb0a02c4          ADD      r2,r10,r4,LSL #3
000022  c203              STM      r2!,{r0,r1}
000024  1e60              SUBS     r0,r4,#1              ;40
000026  b204              SXTH     r4,r0                 ;40
                  |L1.40|
000028  2c00              CMP      r4,#0                 ;40
00002a  dcf4              BGT      |L1.22|
;;;43       }
;;;44       
;;;45       x[0] = InData;
00002c  e9dd0108          LDRD     r0,r1,[sp,#0x20]
000030  e9ca0100          STRD     r0,r1,[r10,#0]
;;;46       
;;;47       for(z1=0,i=0; i<nb; i++)
000034  2500              MOVS     r5,#0
000036  462e              MOV      r6,r5
000038  2400              MOVS     r4,#0
00003a  e018              B        |L1.110|
                  |L1.60|
;;;48       {
;;;49         z1 += x[i]*b[i];
00003c  9816              LDR      r0,[sp,#0x58]
00003e  eb0000c4          ADD      r0,r0,r4,LSL #3
000042  c803              LDM      r0,{r0,r1}
000044  e9cd0102          STRD     r0,r1,[sp,#8]
000048  eb0a00c4          ADD      r0,r10,r4,LSL #3
00004c  c803              LDM      r0,{r0,r1}
00004e  e9cd0100          STRD     r0,r1,[sp,#0]
000052  e9dd2302          LDRD     r2,r3,[sp,#8]
000056  f7fffffe          BL       __aeabi_dmul
00005a  462a              MOV      r2,r5
00005c  4633              MOV      r3,r6
00005e  e9cd0104          STRD     r0,r1,[sp,#0x10]
000062  f7fffffe          BL       __aeabi_dadd
000066  4605              MOV      r5,r0
000068  460e              MOV      r6,r1
00006a  1c60              ADDS     r0,r4,#1              ;47
00006c  b204              SXTH     r4,r0                 ;47
                  |L1.110|
00006e  455c              CMP      r4,r11                ;47
000070  dbe4              BLT      |L1.60|
;;;50       }
;;;51       
;;;52       for(i=na-1; i>0; i--)
000072  9819              LDR      r0,[sp,#0x64]
000074  1e40              SUBS     r0,r0,#1
000076  b204              SXTH     r4,r0
000078  e008              B        |L1.140|
                  |L1.122|
;;;53       {
;;;54         y[i]=y[i-1];
00007a  1e60              SUBS     r0,r4,#1
00007c  eb0901c0          ADD      r1,r9,r0,LSL #3
000080  c903              LDM      r1,{r0,r1}
000082  eb0902c4          ADD      r2,r9,r4,LSL #3
000086  c203              STM      r2!,{r0,r1}
000088  1e60              SUBS     r0,r4,#1              ;52
00008a  b204              SXTH     r4,r0                 ;52
                  |L1.140|
00008c  2c00              CMP      r4,#0                 ;52
00008e  dcf4              BGT      |L1.122|
;;;55       }
;;;56       
;;;57       for(z2=0,i=1; i<na; i++)
000090  2700              MOVS     r7,#0
000092  46b8              MOV      r8,r7
000094  2401              MOVS     r4,#1
000096  e018              B        |L1.202|
                  |L1.152|
;;;58       {
;;;59         z2 += y[i]*a[i];
000098  9818              LDR      r0,[sp,#0x60]
00009a  eb0001c4          ADD      r1,r0,r4,LSL #3
00009e  c903              LDM      r1,{r0,r1}
0000a0  e9cd0102          STRD     r0,r1,[sp,#8]
0000a4  eb0900c4          ADD      r0,r9,r4,LSL #3
0000a8  c803              LDM      r0,{r0,r1}
0000aa  e9cd0100          STRD     r0,r1,[sp,#0]
0000ae  e9dd2302          LDRD     r2,r3,[sp,#8]
0000b2  f7fffffe          BL       __aeabi_dmul
0000b6  463a              MOV      r2,r7
0000b8  4643              MOV      r3,r8
0000ba  e9cd0104          STRD     r0,r1,[sp,#0x10]
0000be  f7fffffe          BL       __aeabi_dadd
0000c2  4607              MOV      r7,r0
0000c4  4688              MOV      r8,r1
0000c6  1c60              ADDS     r0,r4,#1              ;57
0000c8  b204              SXTH     r4,r0                 ;57
                  |L1.202|
0000ca  9819              LDR      r0,[sp,#0x64]         ;57
0000cc  4284              CMP      r4,r0                 ;57
0000ce  dbe3              BLT      |L1.152|
;;;60       }
;;;61       
;;;62       y[0] = z1 - z2; 
0000d0  463a              MOV      r2,r7
0000d2  4643              MOV      r3,r8
0000d4  4628              MOV      r0,r5
0000d6  4631              MOV      r1,r6
0000d8  f7fffffe          BL       __aeabi_dsub
0000dc  e9c90100          STRD     r0,r1,[r9,#0]
;;;63       OutData = y[0];
0000e0  e9d90100          LDRD     r0,r1,[r9,#0]
0000e4  e9cd0106          STRD     r0,r1,[sp,#0x18]
;;;64         
;;;65       return OutData;
0000e8  e9dd0106          LDRD     r0,r1,[sp,#0x18]
;;;66     }
0000ec  b00c              ADD      sp,sp,#0x30
0000ee  e8bd9ff0          POP      {r4-r12,pc}
;;;67     
                          ENDP


                          AREA ||i.KalmanFilter||, CODE, READONLY, ALIGN=2

                  KalmanFilter PROC
;;;76     /*====================================================================================================*/
;;;77     double KalmanFilter(const double ResrcData,double ProcessNiose_Q,double MeasureNoise_R)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;78     {
000004  b087              SUB      sp,sp,#0x1c
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4614              MOV      r4,r2
00000c  461d              MOV      r5,r3
00000e  e9dd6710          LDRD     r6,r7,[sp,#0x40]
;;;79        double R = MeasureNoise_R;
000012  e9cd6704          STRD     r6,r7,[sp,#0x10]
;;;80        double Q = ProcessNiose_Q;
000016  e9cd4502          STRD     r4,r5,[sp,#8]
;;;81        static double x_mid ;//= x_last
;;;82        static double x_now;
;;;83        static double p_mid ;
;;;84        static double p_now;
;;;85        static double kg;        
;;;86        static double x_last,p_last;//原来是在形式参数里的
;;;87        x_mid=x_last;          //x_last=x(k-1|k-1),x_mid=x(k|k-1)
00001a  4826              LDR      r0,|L2.180|
00001c  e9d01000          LDRD     r1,r0,[r0,#0]
000020  4a25              LDR      r2,|L2.184|
000022  e9c21000          STRD     r1,r0,[r2,#0]
;;;88        p_mid=p_last+Q;        //p_mid=p(k|k-1),p_last=p(k-1|k-1),Q=噪声
000026  4925              LDR      r1,|L2.188|
000028  e9dd2302          LDRD     r2,r3,[sp,#8]
00002c  c903              LDM      r1,{r0,r1}
00002e  f7fffffe          BL       __aeabi_dadd
000032  4a23              LDR      r2,|L2.192|
000034  c203              STM      r2!,{r0,r1}
;;;89        kg=p_mid/(p_mid+R);    //kg为kalman filter，R为噪声
000036  4922              LDR      r1,|L2.192|
000038  e9dd2304          LDRD     r2,r3,[sp,#0x10]
00003c  c903              LDM      r1,{r0,r1}
00003e  f7fffffe          BL       __aeabi_dadd
000042  4682              MOV      r10,r0
000044  4652              MOV      r2,r10
000046  460b              MOV      r3,r1
000048  491d              LDR      r1,|L2.192|
00004a  c903              LDM      r1,{r0,r1}
00004c  f7fffffe          BL       __aeabi_ddiv
000050  4a1c              LDR      r2,|L2.196|
000052  c203              STM      r2!,{r0,r1}
;;;90        x_now=x_mid+kg*(ResrcData-x_mid);//估计出的最优值
000054  4818              LDR      r0,|L2.184|
000056  c80c              LDM      r0!,{r2,r3}
000058  4640              MOV      r0,r8
00005a  4649              MOV      r1,r9
00005c  f7fffffe          BL       __aeabi_dsub
000060  4682              MOV      r10,r0
000062  4818              LDR      r0,|L2.196|
000064  c80c              LDM      r0!,{r2,r3}
000066  4650              MOV      r0,r10
000068  f7fffffe          BL       __aeabi_dmul
00006c  e9cd0100          STRD     r0,r1,[sp,#0]
000070  4811              LDR      r0,|L2.184|
000072  c80c              LDM      r0!,{r2,r3}
000074  9800              LDR      r0,[sp,#0]
000076  f7fffffe          BL       __aeabi_dadd
00007a  4a13              LDR      r2,|L2.200|
00007c  c203              STM      r2!,{r0,r1}
;;;91                     
;;;92        p_now=(1-kg)*p_mid;   //最优值对应的covariance       
00007e  4811              LDR      r0,|L2.196|
000080  c80c              LDM      r0!,{r2,r3}
000082  2000              MOVS     r0,#0
000084  4911              LDR      r1,|L2.204|
000086  f7fffffe          BL       __aeabi_dsub
00008a  4682              MOV      r10,r0
00008c  480c              LDR      r0,|L2.192|
00008e  c80c              LDM      r0!,{r2,r3}
000090  4650              MOV      r0,r10
000092  f7fffffe          BL       __aeabi_dmul
000096  4a0e              LDR      r2,|L2.208|
000098  c203              STM      r2!,{r0,r1}
;;;93        p_last = p_now;       //更新covariance值
00009a  490d              LDR      r1,|L2.208|
00009c  c903              LDM      r1,{r0,r1}
00009e  4a07              LDR      r2,|L2.188|
0000a0  c203              STM      r2!,{r0,r1}
;;;94        x_last = x_now;       //更新系统状态值
0000a2  4909              LDR      r1,|L2.200|
0000a4  c903              LDM      r1,{r0,r1}
0000a6  4a03              LDR      r2,|L2.180|
0000a8  c203              STM      r2!,{r0,r1}
;;;95        return x_now;                
0000aa  4907              LDR      r1,|L2.200|
0000ac  c903              LDM      r1,{r0,r1}
;;;96     }
0000ae  b007              ADD      sp,sp,#0x1c
0000b0  e8bd8ff0          POP      {r4-r11,pc}
;;;97     /*====================================================================================================*/
                          ENDP

                  |L2.180|
                          DCD      x_last
                  |L2.184|
                          DCD      x_mid
                  |L2.188|
                          DCD      p_last
                  |L2.192|
                          DCD      p_mid
                  |L2.196|
                          DCD      ||kg||
                  |L2.200|
                          DCD      x_now
                  |L2.204|
                          DCD      0x3ff00000
                  |L2.208|
                          DCD      p_now

                          AREA ||i.LPF_1st||, CODE, READONLY, ALIGN=1

                  LPF_1st PROC
;;;105    /*====================================================================================================*/
;;;106    fp32 LPF_1st(fp32 oldData, fp32 newData, fp32 lpf_factor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;107    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;108    	return oldData * (1 - lpf_factor) + newData * lpf_factor;
00000a  4631              MOV      r1,r6
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       __aeabi_fmul
000012  4680              MOV      r8,r0
000014  4631              MOV      r1,r6
000016  f04f507e          MOV      r0,#0x3f800000
00001a  f7fffffe          BL       __aeabi_fsub
00001e  4681              MOV      r9,r0
000020  4621              MOV      r1,r4
000022  f7fffffe          BL       __aeabi_fmul
000026  4607              MOV      r7,r0
000028  4641              MOV      r1,r8
00002a  f7fffffe          BL       __aeabi_fadd
;;;109    }
00002e  e8bd87f0          POP      {r4-r10,pc}
;;;110    // #define WIDTH_NUM 101
                          ENDP


                          AREA ||i.Moving_Average||, CODE, READONLY, ALIGN=1

                  Moving_Average PROC
;;;112    
;;;113    void Moving_Average(float in,float moavarray[],u16 len ,u16 fil_cnt[2],float *out)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;114    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
00000c  f8dd9028          LDR      r9,[sp,#0x28]
;;;115    	u16 width_num;
;;;116    	
;;;117    	width_num = len ;
000010  4637              MOV      r7,r6
;;;118    	
;;;119    	if( ++fil_cnt[0] > width_num )	
000012  8820              LDRH     r0,[r4,#0]
000014  1c40              ADDS     r0,r0,#1
000016  b280              UXTH     r0,r0
000018  8020              STRH     r0,[r4,#0]
00001a  42b8              CMP      r0,r7
00001c  dd04              BLE      |L4.40|
;;;120    	{
;;;121    		fil_cnt[0] = 0; //now
00001e  2000              MOVS     r0,#0
000020  8020              STRH     r0,[r4,#0]
;;;122    		fil_cnt[1] = 1; //old
000022  2001              MOVS     r0,#1
000024  8060              STRH     r0,[r4,#2]
000026  e007              B        |L4.56|
                  |L4.40|
;;;123    	}
;;;124    	else
;;;125    	{
;;;126    		fil_cnt[1] = (fil_cnt[0] == width_num)? 0 : (fil_cnt[0] + 1);
000028  8820              LDRH     r0,[r4,#0]
00002a  42b8              CMP      r0,r7
00002c  d101              BNE      |L4.50|
00002e  2000              MOVS     r0,#0
000030  e001              B        |L4.54|
                  |L4.50|
000032  8820              LDRH     r0,[r4,#0]
000034  1c40              ADDS     r0,r0,#1
                  |L4.54|
000036  8060              STRH     r0,[r4,#2]
                  |L4.56|
;;;127    	}
;;;128    	
;;;129    	moavarray[ fil_cnt[0] ] = in;
000038  8820              LDRH     r0,[r4,#0]
00003a  f8458020          STR      r8,[r5,r0,LSL #2]
;;;130    	*out += ( in - ( moavarray[ fil_cnt[1] ]  ) )/(float)( width_num ) ;
00003e  4638              MOV      r0,r7
000040  f7fffffe          BL       __aeabi_ui2f
000044  4683              MOV      r11,r0
000046  8860              LDRH     r0,[r4,#2]
000048  f8551020          LDR      r1,[r5,r0,LSL #2]
00004c  4640              MOV      r0,r8
00004e  f7fffffe          BL       __aeabi_fsub
000052  4659              MOV      r1,r11
000054  9000              STR      r0,[sp,#0]
000056  f7fffffe          BL       __aeabi_fdiv
00005a  4682              MOV      r10,r0
00005c  f8d91000          LDR      r1,[r9,#0]
000060  f7fffffe          BL       __aeabi_fadd
000064  f8c90000          STR      r0,[r9,#0]
;;;131    	
;;;132    }
000068  e8bd8ff8          POP      {r3-r11,pc}
;;;133    
                          ENDP


                          AREA ||i.Moving_Median||, CODE, READONLY, ALIGN=2

                  Moving_Median PROC
;;;141    
;;;142    float Moving_Median(u8 item,u8 width_num,float in)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;143    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4690              MOV      r8,r2
;;;144    	u8 i,j;
;;;145    	float t;
;;;146    	float tmp[MED_WIDTH_NUM];
;;;147    	
;;;148    	if(item >= MED_FIL_ITEM || width_num >= MED_WIDTH_NUM )
00000c  2c04              CMP      r4,#4
00000e  da01              BGE      |L5.20|
000010  2d0b              CMP      r5,#0xb
000012  db03              BLT      |L5.28|
                  |L5.20|
;;;149    	{
;;;150    		return 0;
000014  2000              MOVS     r0,#0
                  |L5.22|
;;;151    	}
;;;152    	else
;;;153    	{
;;;154    		if( ++med_fil_cnt[item] >= width_num )	
;;;155    		{
;;;156    			med_fil_cnt[item] = 0;
;;;157    		}
;;;158    		
;;;159    		med_filter_tmp[item][ med_fil_cnt[item] ] = in;
;;;160    		
;;;161    		for(i=0;i<width_num;i++)
;;;162    		{
;;;163    			tmp[i] = med_filter_tmp[item][i];
;;;164    		}
;;;165    		
;;;166    		for(i=0;i<width_num-1;i++)
;;;167    		{
;;;168    			for(j=0;j<(width_num-1-i);j++)
;;;169    			{
;;;170    				if(tmp[j] > tmp[j+1])
;;;171    				{
;;;172    					t = tmp[j];
;;;173    					tmp[j] = tmp[j+1];
;;;174    					tmp[j+1] = t;
;;;175    				}
;;;176    			}
;;;177    		}		
;;;178    		return ( tmp[(u16)width_num/2] );
;;;179    	}
;;;180    }
000016  b00b              ADD      sp,sp,#0x2c
000018  e8bd83f0          POP      {r4-r9,pc}
                  |L5.28|
00001c  4826              LDR      r0,|L5.184|
00001e  5d00              LDRB     r0,[r0,r4]            ;154
000020  1c40              ADDS     r0,r0,#1              ;154
000022  b2c0              UXTB     r0,r0                 ;154
000024  4924              LDR      r1,|L5.184|
000026  5508              STRB     r0,[r1,r4]            ;154
000028  42a8              CMP      r0,r5                 ;154
00002a  db01              BLT      |L5.48|
00002c  2000              MOVS     r0,#0                 ;156
00002e  5508              STRB     r0,[r1,r4]            ;156
                  |L5.48|
000030  eb040044          ADD      r0,r4,r4,LSL #1       ;159
000034  eb0000c4          ADD      r0,r0,r4,LSL #3       ;159
000038  4920              LDR      r1,|L5.188|
00003a  eb010080          ADD      r0,r1,r0,LSL #2       ;159
00003e  491e              LDR      r1,|L5.184|
000040  5d09              LDRB     r1,[r1,r4]            ;159
000042  f8408021          STR      r8,[r0,r1,LSL #2]     ;159
000046  2600              MOVS     r6,#0                 ;161
000048  e00c              B        |L5.100|
                  |L5.74|
00004a  eb040044          ADD      r0,r4,r4,LSL #1       ;163
00004e  eb0000c4          ADD      r0,r0,r4,LSL #3       ;163
000052  491a              LDR      r1,|L5.188|
000054  eb010080          ADD      r0,r1,r0,LSL #2       ;163
000058  f8500026          LDR      r0,[r0,r6,LSL #2]     ;163
00005c  f84d0026          STR      r0,[sp,r6,LSL #2]     ;163
000060  1c70              ADDS     r0,r6,#1              ;161
000062  b2c6              UXTB     r6,r0                 ;161
                  |L5.100|
000064  42ae              CMP      r6,r5                 ;161
000066  dbf0              BLT      |L5.74|
000068  2600              MOVS     r6,#0                 ;166
00006a  e01b              B        |L5.164|
                  |L5.108|
00006c  2700              MOVS     r7,#0                 ;168
00006e  e013              B        |L5.152|
                  |L5.112|
000070  1c7a              ADDS     r2,r7,#1              ;170
000072  f85d1022          LDR      r1,[sp,r2,LSL #2]     ;170
000076  f85d0027          LDR      r0,[sp,r7,LSL #2]     ;170
00007a  f7fffffe          BL       __aeabi_cfrcmple
00007e  d209              BCS      |L5.148|
000080  f85d9027          LDR      r9,[sp,r7,LSL #2]     ;172
000084  1c78              ADDS     r0,r7,#1              ;173
000086  f85d0020          LDR      r0,[sp,r0,LSL #2]     ;173
00008a  f84d0027          STR      r0,[sp,r7,LSL #2]     ;173
00008e  1c78              ADDS     r0,r7,#1              ;174
000090  f84d9020          STR      r9,[sp,r0,LSL #2]     ;174
                  |L5.148|
000094  1c78              ADDS     r0,r7,#1              ;168
000096  b2c7              UXTB     r7,r0                 ;168
                  |L5.152|
000098  1e68              SUBS     r0,r5,#1              ;168
00009a  1b80              SUBS     r0,r0,r6              ;168
00009c  42b8              CMP      r0,r7                 ;168
00009e  dce7              BGT      |L5.112|
0000a0  1c70              ADDS     r0,r6,#1              ;166
0000a2  b2c6              UXTB     r6,r0                 ;166
                  |L5.164|
0000a4  1e68              SUBS     r0,r5,#1              ;166
0000a6  42b0              CMP      r0,r6                 ;166
0000a8  dce0              BGT      |L5.108|
0000aa  4629              MOV      r1,r5                 ;178
0000ac  eb0570d1          ADD      r0,r5,r1,LSR #31      ;178
0000b0  1040              ASRS     r0,r0,#1              ;178
0000b2  f85d0020          LDR      r0,[sp,r0,LSL #2]     ;178
0000b6  e7ae              B        |L5.22|
;;;181    
                          ENDP

                  |L5.184|
                          DCD      med_fil_cnt
                  |L5.188|
                          DCD      med_filter_tmp

                          AREA ||i.kalmanUpdate||, CODE, READONLY, ALIGN=2

                  kalmanUpdate PROC
;;;187    #define Q_gyro         0.001 //过程噪声的协方差  过程噪声协方差为一个一行两列矩阵 
;;;188    float kalmanUpdate(const float gyro_m,const float incAngle)    
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;189    {  
000004  b08d              SUB      sp,sp,#0x34
000006  4683              MOV      r11,r0
000008  468a              MOV      r10,r1
;;;190    	  float K_0;//含有卡尔曼增益的另外一个函数，用于计算最优估计值         
;;;191    		float K_1;//含有卡尔曼增益的函数，用于计算最优估计值的偏差         
;;;192    		float Y_0;         
;;;193    		float Y_1;            
;;;194    			float Rate;//去除偏差后的角速度           
;;;195    		float Pdot[4];//过程协方差矩阵的微分矩阵          
;;;196    		float angle_err;//角度偏量         
;;;197    		float E;//计算的过程量          
;;;198    		static float angle = 0;            //下时刻最优估计值角度          
;;;199    		static float q_bias = 0;        //陀螺仪的偏差                          
;;;200    		static float P[2][2] = {{ 1, 0 }, { 0, 1 }};//过程协方差矩阵         
;;;201    		Rate = gyro_m - q_bias;          //计算过程协方差矩阵的微分矩阵               
00000a  488c              LDR      r0,|L6.572|
00000c  6801              LDR      r1,[r0,#0]  ; q_bias
00000e  4658              MOV      r0,r11
000010  f7fffffe          BL       __aeabi_fsub
000014  9008              STR      r0,[sp,#0x20]
;;;202    		Pdot[0] = Q_angle - P[0][1] - P[1][0];//？？？？？？                  
000016  498a              LDR      r1,|L6.576|
000018  6888              LDR      r0,[r1,#8]  ; P
00001a  f7fffffe          BL       __aeabi_f2d
00001e  4680              MOV      r8,r0
000020  4689              MOV      r9,r1
000022  4987              LDR      r1,|L6.576|
000024  6848              LDR      r0,[r1,#4]  ; P
000026  f7fffffe          BL       __aeabi_f2d
00002a  4a86              LDR      r2,|L6.580|
00002c  4b86              LDR      r3,|L6.584|
00002e  e9cd0100          STRD     r0,r1,[sp,#0]
000032  f7fffffe          BL       __aeabi_drsub
000036  4606              MOV      r6,r0
000038  4642              MOV      r2,r8
00003a  464b              MOV      r3,r9
00003c  f7fffffe          BL       __aeabi_dsub
000040  4604              MOV      r4,r0
000042  f7fffffe          BL       __aeabi_d2f
000046  9004              STR      r0,[sp,#0x10]
;;;203    		Pdot[1] = - P[1][1];                                   
000048  487d              LDR      r0,|L6.576|
00004a  68c0              LDR      r0,[r0,#0xc]
00004c  f0804000          EOR      r0,r0,#0x80000000
000050  9005              STR      r0,[sp,#0x14]
;;;204    		Pdot[2] = - P[1][1];                                           
000052  487b              LDR      r0,|L6.576|
000054  68c0              LDR      r0,[r0,#0xc]
000056  f0804000          EOR      r0,r0,#0x80000000
00005a  9006              STR      r0,[sp,#0x18]
;;;205    		Pdot[3] = Q_gyro;//？？？？？？                                  
00005c  487b              LDR      r0,|L6.588|
00005e  9007              STR      r0,[sp,#0x1c]
;;;206    		angle += Rate * dt; //角速度积分得出角度         
000060  9808              LDR      r0,[sp,#0x20]
000062  f7fffffe          BL       __aeabi_f2d
000066  4a77              LDR      r2,|L6.580|
000068  4b79              LDR      r3,|L6.592|
00006a  e9cd0100          STRD     r0,r1,[sp,#0]
00006e  f7fffffe          BL       __aeabi_dmul
000072  4606              MOV      r6,r0
000074  460f              MOV      r7,r1
000076  4877              LDR      r0,|L6.596|
000078  6800              LDR      r0,[r0,#0]  ; angle
00007a  f7fffffe          BL       __aeabi_f2d
00007e  4680              MOV      r8,r0
000080  4632              MOV      r2,r6
000082  463b              MOV      r3,r7
000084  f7fffffe          BL       __aeabi_dadd
000088  4604              MOV      r4,r0
00008a  f7fffffe          BL       __aeabi_d2f
00008e  4971              LDR      r1,|L6.596|
000090  6008              STR      r0,[r1,#0]  ; angle
;;;207    		P[0][0] += Pdot[0] * dt; //计算协方差矩阵         
000092  9804              LDR      r0,[sp,#0x10]
000094  f7fffffe          BL       __aeabi_f2d
000098  4a6a              LDR      r2,|L6.580|
00009a  4b6d              LDR      r3,|L6.592|
00009c  e9cd0100          STRD     r0,r1,[sp,#0]
0000a0  f7fffffe          BL       __aeabi_dmul
0000a4  4606              MOV      r6,r0
0000a6  460f              MOV      r7,r1
0000a8  4965              LDR      r1,|L6.576|
0000aa  6808              LDR      r0,[r1,#0]  ; P
0000ac  f7fffffe          BL       __aeabi_f2d
0000b0  4680              MOV      r8,r0
0000b2  4632              MOV      r2,r6
0000b4  463b              MOV      r3,r7
0000b6  f7fffffe          BL       __aeabi_dadd
0000ba  4604              MOV      r4,r0
0000bc  f7fffffe          BL       __aeabi_d2f
0000c0  495f              LDR      r1,|L6.576|
0000c2  6008              STR      r0,[r1,#0]  ; P
;;;208    		P[0][1] += Pdot[1] * dt;          
0000c4  9805              LDR      r0,[sp,#0x14]
0000c6  f7fffffe          BL       __aeabi_f2d
0000ca  4a5e              LDR      r2,|L6.580|
0000cc  4b60              LDR      r3,|L6.592|
0000ce  e9cd0100          STRD     r0,r1,[sp,#0]
0000d2  f7fffffe          BL       __aeabi_dmul
0000d6  4606              MOV      r6,r0
0000d8  460f              MOV      r7,r1
0000da  4959              LDR      r1,|L6.576|
0000dc  6848              LDR      r0,[r1,#4]  ; P
0000de  f7fffffe          BL       __aeabi_f2d
0000e2  4680              MOV      r8,r0
0000e4  4632              MOV      r2,r6
0000e6  463b              MOV      r3,r7
0000e8  f7fffffe          BL       __aeabi_dadd
0000ec  4604              MOV      r4,r0
0000ee  f7fffffe          BL       __aeabi_d2f
0000f2  4953              LDR      r1,|L6.576|
0000f4  6048              STR      r0,[r1,#4]  ; P
;;;209    		P[1][0] += Pdot[2] * dt;          
0000f6  9806              LDR      r0,[sp,#0x18]
0000f8  f7fffffe          BL       __aeabi_f2d
0000fc  4680              MOV      r8,r0
0000fe  4a51              LDR      r2,|L6.580|
000100  4b53              LDR      r3,|L6.592|
000102  f7fffffe          BL       __aeabi_dmul
000106  e9cd0100          STRD     r0,r1,[sp,#0]
00010a  494d              LDR      r1,|L6.576|
00010c  6888              LDR      r0,[r1,#8]  ; P
00010e  f7fffffe          BL       __aeabi_f2d
000112  4606              MOV      r6,r0
000114  e9dd2300          LDRD     r2,r3,[sp,#0]
000118  f7fffffe          BL       __aeabi_dadd
00011c  4604              MOV      r4,r0
00011e  f7fffffe          BL       __aeabi_d2f
000122  4947              LDR      r1,|L6.576|
000124  6088              STR      r0,[r1,#8]  ; P
;;;210    		P[1][1] += Pdot[3] * dt;            
000126  9807              LDR      r0,[sp,#0x1c]
000128  f7fffffe          BL       __aeabi_f2d
00012c  4680              MOV      r8,r0
00012e  4a45              LDR      r2,|L6.580|
000130  4b47              LDR      r3,|L6.592|
000132  f7fffffe          BL       __aeabi_dmul
000136  4604              MOV      r4,r0
000138  460d              MOV      r5,r1
00013a  4941              LDR      r1,|L6.576|
00013c  68c8              LDR      r0,[r1,#0xc]
00013e  f7fffffe          BL       __aeabi_f2d
000142  4606              MOV      r6,r0
000144  4622              MOV      r2,r4
000146  462b              MOV      r3,r5
000148  f7fffffe          BL       __aeabi_dadd
00014c  e9cd0100          STRD     r0,r1,[sp,#0]
000150  f7fffffe          BL       __aeabi_d2f
000154  493a              LDR      r1,|L6.576|
000156  60c8              STR      r0,[r1,#0xc]
;;;211    		angle_err = incAngle - angle; //计算角度偏差          
000158  483e              LDR      r0,|L6.596|
00015a  6801              LDR      r1,[r0,#0]  ; angle
00015c  4650              MOV      r0,r10
00015e  f7fffffe          BL       __aeabi_fsub
000162  9003              STR      r0,[sp,#0xc]
;;;212    		E = R_angle + P[0][0];          
000164  4936              LDR      r1,|L6.576|
000166  6808              LDR      r0,[r1,#0]  ; P
000168  f7fffffe          BL       __aeabi_f2d
00016c  4606              MOV      r6,r0
00016e  4a3a              LDR      r2,|L6.600|
000170  4b3a              LDR      r3,|L6.604|
000172  f7fffffe          BL       __aeabi_dadd
000176  4604              MOV      r4,r0
000178  f7fffffe          BL       __aeabi_d2f
00017c  9002              STR      r0,[sp,#8]
;;;213    		K_0 = P[0][0] / E; //计算卡尔曼增益         
00017e  4930              LDR      r1,|L6.576|
000180  6808              LDR      r0,[r1,#0]  ; P
000182  9902              LDR      r1,[sp,#8]
000184  f7fffffe          BL       __aeabi_fdiv
000188  900c              STR      r0,[sp,#0x30]
;;;214    		K_1 = P[1][0] / E;           
00018a  492d              LDR      r1,|L6.576|
00018c  6888              LDR      r0,[r1,#8]  ; P
00018e  9902              LDR      r1,[sp,#8]
000190  f7fffffe          BL       __aeabi_fdiv
000194  900b              STR      r0,[sp,#0x2c]
;;;215    		Y_0 = P[0][0];            
000196  482a              LDR      r0,|L6.576|
000198  6800              LDR      r0,[r0,#0]  ; P
00019a  900a              STR      r0,[sp,#0x28]
;;;216    		Y_1 = P[0][1];             
00019c  4828              LDR      r0,|L6.576|
00019e  6840              LDR      r0,[r0,#4]  ; P
0001a0  9009              STR      r0,[sp,#0x24]
;;;217    		P[0][0] -= K_0 * Y_0; //跟新协方差矩阵         
0001a2  990a              LDR      r1,[sp,#0x28]
0001a4  980c              LDR      r0,[sp,#0x30]
0001a6  f7fffffe          BL       __aeabi_fmul
0001aa  4604              MOV      r4,r0
0001ac  4824              LDR      r0,|L6.576|
0001ae  6801              LDR      r1,[r0,#0]  ; P
0001b0  4620              MOV      r0,r4
0001b2  f7fffffe          BL       __aeabi_frsub
0001b6  4922              LDR      r1,|L6.576|
0001b8  6008              STR      r0,[r1,#0]  ; P
;;;218    		P[0][1] -= K_0 * Y_1;          
0001ba  9909              LDR      r1,[sp,#0x24]
0001bc  980c              LDR      r0,[sp,#0x30]
0001be  f7fffffe          BL       __aeabi_fmul
0001c2  4604              MOV      r4,r0
0001c4  481e              LDR      r0,|L6.576|
0001c6  6841              LDR      r1,[r0,#4]  ; P
0001c8  4620              MOV      r0,r4
0001ca  f7fffffe          BL       __aeabi_frsub
0001ce  491c              LDR      r1,|L6.576|
0001d0  6048              STR      r0,[r1,#4]  ; P
;;;219    		P[1][0] -= K_1 * Y_0;           
0001d2  e9dd100a          LDRD     r1,r0,[sp,#0x28]
0001d6  f7fffffe          BL       __aeabi_fmul
0001da  4604              MOV      r4,r0
0001dc  4818              LDR      r0,|L6.576|
0001de  6881              LDR      r1,[r0,#8]  ; P
0001e0  4620              MOV      r0,r4
0001e2  f7fffffe          BL       __aeabi_frsub
0001e6  4916              LDR      r1,|L6.576|
0001e8  6088              STR      r0,[r1,#8]  ; P
;;;220    		P[1][1] -= K_1 * Y_1;          
0001ea  9909              LDR      r1,[sp,#0x24]
0001ec  980b              LDR      r0,[sp,#0x2c]
0001ee  f7fffffe          BL       __aeabi_fmul
0001f2  4604              MOV      r4,r0
0001f4  4812              LDR      r0,|L6.576|
0001f6  68c1              LDR      r1,[r0,#0xc]
0001f8  4620              MOV      r0,r4
0001fa  f7fffffe          BL       __aeabi_frsub
0001fe  4910              LDR      r1,|L6.576|
000200  60c8              STR      r0,[r1,#0xc]
;;;221    		angle += K_0 * angle_err; //给出最优估计值         
000202  9903              LDR      r1,[sp,#0xc]
000204  980c              LDR      r0,[sp,#0x30]
000206  f7fffffe          BL       __aeabi_fmul
00020a  4604              MOV      r4,r0
00020c  4811              LDR      r0,|L6.596|
00020e  6801              LDR      r1,[r0,#0]  ; angle
000210  4620              MOV      r0,r4
000212  f7fffffe          BL       __aeabi_fadd
000216  490f              LDR      r1,|L6.596|
000218  6008              STR      r0,[r1,#0]  ; angle
;;;222    		q_bias += K_1 * angle_err;//跟新最优估计值偏差          
00021a  9903              LDR      r1,[sp,#0xc]
00021c  980b              LDR      r0,[sp,#0x2c]
00021e  f7fffffe          BL       __aeabi_fmul
000222  4604              MOV      r4,r0
000224  4805              LDR      r0,|L6.572|
000226  6801              LDR      r1,[r0,#0]  ; q_bias
000228  4620              MOV      r0,r4
00022a  f7fffffe          BL       __aeabi_fadd
00022e  4903              LDR      r1,|L6.572|
000230  6008              STR      r0,[r1,#0]  ; q_bias
;;;223    		return angle;
000232  4808              LDR      r0,|L6.596|
000234  6800              LDR      r0,[r0,#0]  ; angle
;;;224    }
000236  b00d              ADD      sp,sp,#0x34
000238  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L6.572|
                          DCD      q_bias
                  |L6.576|
                          DCD      P
                  |L6.580|
                          DCD      0x47ae147b
                  |L6.584|
                          DCD      0x3f747ae1
                  |L6.588|
                          DCD      0x3a83126f
                  |L6.592|
                          DCD      0x3f647ae1
                  |L6.596|
                          DCD      angle
                  |L6.600|
                          DCD      0xe147ae14
                  |L6.604|
                          DCD      0x3fe6147a

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  med_filter_tmp
                          %        176
                  med_filter_out
                          %        16

                          AREA ||.data||, DATA, ALIGN=3

                  med_fil_cnt
                          DCD      0x00000000
                          DCD      0x00000000
                  x_mid
                          %        8
                  x_now
                          %        8
                  p_mid
                          %        8
                  p_now
                          %        8
                  ||kg||
                          %        8
                  x_last
                          %        8
                  p_last
                          %        8
                  angle
000040  00000000          DCFS     0x00000000 ; 0
                  q_bias
000044  00000000          DCFS     0x00000000 ; 0
                  P
000048  3f800000          DCFS     0x3f800000 ; 1
00004c  00000000          DCFS     0x00000000 ; 0
000050  00000000          DCFS     0x00000000 ; 0
000054  3f800000          DCFS     0x3f800000 ; 1
