; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\stmflash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\stmflash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\GPS -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Heigh -I..\..\User\Algorithm\ekf2 -IC:\__Electronic_Projects\STM32\HT_Hawk_0528_1\Project\MDK-ARM(uV5)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\stmflash.crf ..\..\User\Driver\STMFLASH\stmflash.c]
                          THUMB

                          AREA ||i.STMFLASH_Read||, CODE, READONLY, ALIGN=1

                  STMFLASH_Read PROC
;;;95     //NumToWrite:半字(16位)数
;;;96     void STMFLASH_Read(u32 ReadAddr,u16 *pBuffer,u16 NumToRead)   	
000000  b530              PUSH     {r4,r5,lr}
;;;97     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;98     	u16 i;
;;;99     	for(i=0;i<NumToRead;i++)
000008  2200              MOVS     r2,#0
00000a  e007              B        |L1.28|
                  |L1.12|
;;;100    	{
;;;101    		pBuffer[i]=STMFLASH_ReadHalfWord(ReadAddr);//读取2个字节.
00000c  4618              MOV      r0,r3
00000e  f7fffffe          BL       STMFLASH_ReadHalfWord
000012  f8240012          STRH     r0,[r4,r2,LSL #1]
;;;102    		ReadAddr+=2;//偏移2个字节.	
000016  1c9b              ADDS     r3,r3,#2
000018  1c50              ADDS     r0,r2,#1              ;99
00001a  b282              UXTH     r2,r0                 ;99
                  |L1.28|
00001c  42aa              CMP      r2,r5                 ;99
00001e  dbf5              BLT      |L1.12|
;;;103    	}
;;;104    }
000020  bd30              POP      {r4,r5,pc}
;;;105    
                          ENDP


                          AREA ||i.STMFLASH_ReadHalfWord||, CODE, READONLY, ALIGN=1

                  STMFLASH_ReadHalfWord PROC
;;;17     //返回值:对应数据.
;;;18     u16 STMFLASH_ReadHalfWord(u32 faddr)
000000  4601              MOV      r1,r0
;;;19     {
;;;20     	return *(vu16*)faddr; 
000002  8808              LDRH     r0,[r1,#0]
;;;21     }
000004  4770              BX       lr
;;;22     #if STM32_FLASH_WREN	//如果使能了写   
                          ENDP


                          AREA ||i.STMFLASH_Write||, CODE, READONLY, ALIGN=2

                  STMFLASH_Write PROC
;;;45     u16 STMFLASH_BUF[STM_SECTOR_SIZE/2];//最多是2K字节
;;;46     void STMFLASH_Write(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)	
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;47     {
000004  4680              MOV      r8,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
;;;48     	u32 secpos;	   //扇区地址
;;;49     	u16 secoff;	   //扇区内偏移地址(16位字计算)
;;;50     	u16 secremain; //扇区内剩余地址(16位字计算)	   
;;;51      	u16 i;    
;;;52     	u32 offaddr;   //去掉0X08000000后的地址
;;;53     	if(WriteAddr<STM32_FLASH_BASE||(WriteAddr>=(STM32_FLASH_BASE+1024*STM32_FLASH_SIZE)))return;//非法地址
00000a  f1b86f00          CMP      r8,#0x8000000
00000e  d302              BCC      |L3.22|
000010  4833              LDR      r0,|L3.224|
000012  4580              CMP      r8,r0
000014  d301              BCC      |L3.26|
                  |L3.22|
;;;54     	FLASH_Unlock();						//解锁
;;;55     	offaddr=WriteAddr-STM32_FLASH_BASE;		//实际偏移地址.
;;;56     	secpos=offaddr/STM_SECTOR_SIZE;			//扇区地址  0~127 for STM32F103RBT6
;;;57     	secoff=(offaddr%STM_SECTOR_SIZE)/2;		//在扇区内的偏移(2个字节为基本单位.)
;;;58     	secremain=STM_SECTOR_SIZE/2-secoff;		//扇区剩余空间大小   
;;;59     	if(NumToWrite<=secremain)secremain=NumToWrite;//不大于该扇区范围
;;;60     	while(1) 
;;;61     	{	
;;;62     		STMFLASH_Read(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//读出整个扇区的内容
;;;63     		for(i=0;i<secremain;i++)//校验数据
;;;64     		{
;;;65     			if(STMFLASH_BUF[secoff+i]!=0XFFFF)break;//需要擦除  	  
;;;66     		}
;;;67     		if(i<secremain)//需要擦除
;;;68     		{
;;;69     			FLASH_ErasePage(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE);//擦除这个扇区
;;;70     			for(i=0;i<secremain;i++)//复制
;;;71     			{
;;;72     				STMFLASH_BUF[i+secoff]=pBuffer[i];	  
;;;73     			}
;;;74     			STMFLASH_Write_NoCheck(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//写入整个扇区  
;;;75     		}else STMFLASH_Write_NoCheck(WriteAddr,pBuffer,secremain);//写已经擦除了的,直接写入扇区剩余区间. 				   
;;;76     		if(NumToWrite==secremain)break;//写入结束了
;;;77     		else//写入未结束
;;;78     		{
;;;79     			secpos++;				//扇区地址增1
;;;80     			secoff=0;				//偏移位置为0 	 
;;;81     		   	pBuffer+=secremain;  	//指针偏移
;;;82     			WriteAddr+=secremain;	//写地址偏移	   
;;;83     		   	NumToWrite-=secremain;	//字节(16位)数递减
;;;84     			if(NumToWrite>(STM_SECTOR_SIZE/2))secremain=STM_SECTOR_SIZE/2;//下一个扇区还是写不完
;;;85     			else secremain=NumToWrite;//下一个扇区可以写完了
;;;86     		}	 
;;;87     	};	
;;;88     	FLASH_Lock();//上锁
;;;89     }
000016  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.26|
00001a  f7fffffe          BL       FLASH_Unlock
00001e  f1a86b00          SUB      r11,r8,#0x8000000     ;55
000022  ea4f25db          LSR      r5,r11,#11            ;56
000026  f3cb0949          UBFX     r9,r11,#1,#10         ;57
00002a  f5c96480          RSB      r4,r9,#0x400          ;58
00002e  42a7              CMP      r7,r4                 ;59
000030  dc00              BGT      |L3.52|
000032  463c              MOV      r4,r7                 ;59
                  |L3.52|
000034  e04d              B        |L3.210|
                  |L3.54|
000036  f04f6100          MOV      r1,#0x8000000         ;62
00003a  eb0120c5          ADD      r0,r1,r5,LSL #11      ;62
00003e  144a              ASRS     r2,r1,#17             ;62
000040  4928              LDR      r1,|L3.228|
000042  f7fffffe          BL       STMFLASH_Read
000046  2600              MOVS     r6,#0                 ;63
000048  e00b              B        |L3.98|
                  |L3.74|
00004a  eb090006          ADD      r0,r9,r6              ;65
00004e  4925              LDR      r1,|L3.228|
000050  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;65
000054  f64f71ff          MOV      r1,#0xffff            ;65
000058  4288              CMP      r0,r1                 ;65
00005a  d000              BEQ      |L3.94|
00005c  e003              B        |L3.102|
                  |L3.94|
00005e  1c70              ADDS     r0,r6,#1              ;63
000060  b286              UXTH     r6,r0                 ;63
                  |L3.98|
000062  42a6              CMP      r6,r4                 ;63
000064  dbf1              BLT      |L3.74|
                  |L3.102|
000066  bf00              NOP                            ;65
000068  42a6              CMP      r6,r4                 ;67
00006a  da1b              BGE      |L3.164|
00006c  f04f6100          MOV      r1,#0x8000000         ;69
000070  eb0120c5          ADD      r0,r1,r5,LSL #11      ;69
000074  f7fffffe          BL       FLASH_ErasePage
000078  2600              MOVS     r6,#0                 ;70
00007a  e008              B        |L3.142|
                  |L3.124|
00007c  f83a0016          LDRH     r0,[r10,r6,LSL #1]    ;72
000080  eb060109          ADD      r1,r6,r9              ;72
000084  4a17              LDR      r2,|L3.228|
000086  f8220011          STRH     r0,[r2,r1,LSL #1]     ;72
00008a  1c70              ADDS     r0,r6,#1              ;70
00008c  b286              UXTH     r6,r0                 ;70
                  |L3.142|
00008e  42a6              CMP      r6,r4                 ;70
000090  dbf4              BLT      |L3.124|
000092  f04f6100          MOV      r1,#0x8000000         ;74
000096  eb0120c5          ADD      r0,r1,r5,LSL #11      ;74
00009a  144a              ASRS     r2,r1,#17             ;74
00009c  4911              LDR      r1,|L3.228|
00009e  f7fffffe          BL       STMFLASH_Write_NoCheck
0000a2  e004              B        |L3.174|
                  |L3.164|
0000a4  4622              MOV      r2,r4                 ;75
0000a6  4651              MOV      r1,r10                ;75
0000a8  4640              MOV      r0,r8                 ;75
0000aa  f7fffffe          BL       STMFLASH_Write_NoCheck
                  |L3.174|
0000ae  42a7              CMP      r7,r4                 ;76
0000b0  d100              BNE      |L3.180|
0000b2  e00f              B        |L3.212|
                  |L3.180|
0000b4  1c6d              ADDS     r5,r5,#1              ;79
0000b6  f04f0900          MOV      r9,#0                 ;80
0000ba  eb0a0a44          ADD      r10,r10,r4,LSL #1     ;81
0000be  44a0              ADD      r8,r8,r4              ;82
0000c0  1b38              SUBS     r0,r7,r4              ;83
0000c2  b287              UXTH     r7,r0                 ;83
0000c4  f5b76f80          CMP      r7,#0x400             ;84
0000c8  dd02              BLE      |L3.208|
0000ca  f44f6480          MOV      r4,#0x400             ;84
0000ce  e000              B        |L3.210|
                  |L3.208|
0000d0  463c              MOV      r4,r7                 ;85
                  |L3.210|
0000d2  e7b0              B        |L3.54|
                  |L3.212|
0000d4  bf00              NOP                            ;76
0000d6  f7fffffe          BL       FLASH_Lock
0000da  bf00              NOP      
0000dc  e79b              B        |L3.22|
;;;90     #endif
                          ENDP

0000de  0000              DCW      0x0000
                  |L3.224|
                          DCD      0x08080000
                  |L3.228|
                          DCD      STMFLASH_BUF

                          AREA ||i.STMFLASH_Write_NoCheck||, CODE, READONLY, ALIGN=1

                  STMFLASH_Write_NoCheck PROC
;;;26     //NumToWrite:半字(16位)数   
;;;27     void STMFLASH_Write_NoCheck(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)   
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;28     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;29     	u16 i;
;;;30     	for(i=0;i<NumToWrite;i++)
00000a  2400              MOVS     r4,#0
00000c  e007              B        |L4.30|
                  |L4.14|
;;;31     	{
;;;32     		FLASH_ProgramHalfWord(WriteAddr,pBuffer[i]);
00000e  f8361014          LDRH     r1,[r6,r4,LSL #1]
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       FLASH_ProgramHalfWord
;;;33     	    WriteAddr+=2;//地址增加2.
000018  1cad              ADDS     r5,r5,#2
00001a  1c60              ADDS     r0,r4,#1              ;30
00001c  b284              UXTH     r4,r0                 ;30
                  |L4.30|
00001e  42bc              CMP      r4,r7                 ;30
000020  dbf5              BLT      |L4.14|
;;;34     	}  
;;;35     } 
000022  e8bd81f0          POP      {r4-r8,pc}
;;;36     //从指定地址开始写入指定长度的数据
                          ENDP


                          AREA ||i.Test_Write||, CODE, READONLY, ALIGN=1

                  Test_Write PROC
;;;108    //WriteData:要写入的数据
;;;109    void Test_Write(u32 WriteAddr,u16 WriteData)   	
000000  b513              PUSH     {r0,r1,r4,lr}
;;;110    {
000002  4604              MOV      r4,r0
;;;111    	STMFLASH_Write(WriteAddr,&WriteData,1);//写入一个字 
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       STMFLASH_Write
;;;112    }
00000e  bd1c              POP      {r2-r4,pc}
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  STMFLASH_BUF
                          %        2048
